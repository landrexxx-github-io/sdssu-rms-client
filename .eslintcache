[{"D:\\research-management-system\\client\\src\\index.js":"1","D:\\research-management-system\\client\\src\\App.js":"2","D:\\research-management-system\\client\\src\\redux\\reducers\\index.js":"3","D:\\research-management-system\\client\\src\\context\\AccountContext.js":"4","D:\\research-management-system\\client\\src\\components\\layouts\\Main.js":"5","D:\\research-management-system\\client\\src\\redux\\reducers\\completed.js":"6","D:\\research-management-system\\client\\src\\redux\\reducers\\presentation.js":"7","D:\\research-management-system\\client\\src\\redux\\reducers\\proposal.js":"8","D:\\research-management-system\\client\\src\\redux\\reducers\\campus.js":"9","D:\\research-management-system\\client\\src\\redux\\reducers\\department.js":"10","D:\\research-management-system\\client\\src\\redux\\reducers\\utilization.js":"11","D:\\research-management-system\\client\\src\\redux\\reducers\\publication.js":"12","D:\\research-management-system\\client\\src\\redux\\reducers\\account.js":"13","D:\\research-management-system\\client\\src\\redux\\reducers\\seminar.js":"14","D:\\research-management-system\\client\\src\\redux\\reducers\\innovation.js":"15","D:\\research-management-system\\client\\src\\redux\\reducers\\authentication.js":"16","D:\\research-management-system\\client\\src\\components\\layouts\\Header.js":"17","D:\\research-management-system\\client\\src\\components\\layouts\\Content.js":"18","D:\\research-management-system\\client\\src\\components\\layouts\\Footer.js":"19","D:\\research-management-system\\client\\src\\components\\layouts\\SideMenu.js":"20","D:\\research-management-system\\client\\src\\components\\layouts\\SideMenuBarUser.jsx":"21","D:\\research-management-system\\client\\src\\components\\pages\\manage\\Campus.js":"22","D:\\research-management-system\\client\\src\\components\\pages\\manage\\Profile.jsx":"23","D:\\research-management-system\\client\\src\\components\\pages\\manage\\ChangePassword.jsx":"24","D:\\research-management-system\\client\\src\\components\\auth\\Registration.jsx":"25","D:\\research-management-system\\client\\src\\components\\pages\\manage\\Account.jsx":"26","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Publication.jsx":"27","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Completed.jsx":"28","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Presentation.jsx":"29","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Seminar.jsx":"30","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Utilization.jsx":"31","D:\\research-management-system\\client\\src\\components\\pages\\researches\\dashboard\\Administrator.jsx":"32","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Innovation.jsx":"33","D:\\research-management-system\\client\\src\\components\\pages\\error\\PageNotFound.jsx":"34","D:\\research-management-system\\client\\src\\components\\pages\\manage\\Department.js":"35","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Proposal.jsx":"36","D:\\research-management-system\\client\\src\\components\\pages\\researches\\dashboard\\Faculties.jsx":"37","D:\\research-management-system\\client\\src\\components\\auth\\Login.jsx":"38","D:\\research-management-system\\client\\src\\redux\\actions\\account_action.js":"39","D:\\research-management-system\\client\\src\\redux\\actions\\department_action.js":"40","D:\\research-management-system\\client\\src\\redux\\actions\\campus_action.js":"41","D:\\research-management-system\\client\\src\\redux\\actions\\proposal_action.js":"42","D:\\research-management-system\\client\\src\\redux\\actions\\auth_action.js":"43","D:\\research-management-system\\client\\src\\redux\\actions\\completed_action.js":"44","D:\\research-management-system\\client\\src\\redux\\actions\\innovation_action.js":"45","D:\\research-management-system\\client\\src\\redux\\actions\\publication_action.js":"46","D:\\research-management-system\\client\\src\\redux\\actions\\utilization_action.js":"47","D:\\research-management-system\\client\\src\\redux\\actions\\presentation_action.js":"48","D:\\research-management-system\\client\\src\\redux\\actions\\seminar_action.js":"49","D:\\research-management-system\\client\\src\\api\\index.js":"50"},{"size":585,"mtime":1622670562267,"results":"51","hashOfConfig":"52"},{"size":1309,"mtime":1632359899262,"results":"53","hashOfConfig":"52"},{"size":1679,"mtime":1630987224089,"results":"54","hashOfConfig":"52"},{"size":78,"mtime":1622673339839,"results":"55","hashOfConfig":"52"},{"size":961,"mtime":1631153451494,"results":"56","hashOfConfig":"52"},{"size":1832,"mtime":1631021598918,"results":"57","hashOfConfig":"52"},{"size":1150,"mtime":1622670813533,"results":"58","hashOfConfig":"52"},{"size":1342,"mtime":1622670839642,"results":"59","hashOfConfig":"52"},{"size":825,"mtime":1622670724990,"results":"60","hashOfConfig":"52"},{"size":1086,"mtime":1622670805590,"results":"61","hashOfConfig":"52"},{"size":1116,"mtime":1622670849608,"results":"62","hashOfConfig":"52"},{"size":1131,"mtime":1622670846232,"results":"63","hashOfConfig":"52"},{"size":1579,"mtime":1626518019752,"results":"64","hashOfConfig":"52"},{"size":1055,"mtime":1630987191806,"results":"65","hashOfConfig":"52"},{"size":1102,"mtime":1622670810455,"results":"66","hashOfConfig":"52"},{"size":709,"mtime":1622670720915,"results":"67","hashOfConfig":"52"},{"size":19963,"mtime":1631159320117,"results":"68","hashOfConfig":"52"},{"size":8944,"mtime":1632323014465,"results":"69","hashOfConfig":"52"},{"size":743,"mtime":1622696261598,"results":"70","hashOfConfig":"52"},{"size":14400,"mtime":1631156003541,"results":"71","hashOfConfig":"52"},{"size":0,"mtime":1631153280060,"results":"72","hashOfConfig":"52"},{"size":10271,"mtime":1625843791664,"results":"73","hashOfConfig":"52"},{"size":21029,"mtime":1632819720657,"results":"74","hashOfConfig":"52"},{"size":7991,"mtime":1626610399172,"results":"75","hashOfConfig":"52"},{"size":29092,"mtime":1631175628930,"results":"76","hashOfConfig":"52"},{"size":16568,"mtime":1632879607126,"results":"77","hashOfConfig":"52"},{"size":38957,"mtime":1631504656056,"results":"78","hashOfConfig":"52"},{"size":60729,"mtime":1632819246425,"results":"79","hashOfConfig":"52"},{"size":36284,"mtime":1631108818416,"results":"80","hashOfConfig":"52"},{"size":20601,"mtime":1632882939780,"results":"81","hashOfConfig":"52"},{"size":28765,"mtime":1631108636876,"results":"82","hashOfConfig":"52"},{"size":27206,"mtime":1626618041381,"results":"83","hashOfConfig":"52"},{"size":40133,"mtime":1631108681544,"results":"84","hashOfConfig":"52"},{"size":45968,"mtime":1625913186499,"results":"85","hashOfConfig":"52"},{"size":12657,"mtime":1625844950814,"results":"86","hashOfConfig":"52"},{"size":64856,"mtime":1632882442413,"results":"87","hashOfConfig":"52"},{"size":22931,"mtime":1625825766334,"results":"88","hashOfConfig":"52"},{"size":8739,"mtime":1632365553988,"results":"89","hashOfConfig":"52"},{"size":1922,"mtime":1626594108294,"results":"90","hashOfConfig":"52"},{"size":1541,"mtime":1622670419752,"results":"91","hashOfConfig":"52"},{"size":1488,"mtime":1622670397729,"results":"92","hashOfConfig":"52"},{"size":2173,"mtime":1631156730286,"results":"93","hashOfConfig":"52"},{"size":1345,"mtime":1626596553054,"results":"94","hashOfConfig":"52"},{"size":2251,"mtime":1631022549497,"results":"95","hashOfConfig":"52"},{"size":1694,"mtime":1626608349504,"results":"96","hashOfConfig":"52"},{"size":1725,"mtime":1622670437123,"results":"97","hashOfConfig":"52"},{"size":1738,"mtime":1622670439987,"results":"98","hashOfConfig":"52"},{"size":1779,"mtime":1627287734701,"results":"99","hashOfConfig":"52"},{"size":1670,"mtime":1630994570915,"results":"100","hashOfConfig":"52"},{"size":4353,"mtime":1632362854940,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"x67558",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"104"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"D:\\research-management-system\\client\\src\\index.js",[],["219","220"],"D:\\research-management-system\\client\\src\\App.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\index.js",[],"D:\\research-management-system\\client\\src\\context\\AccountContext.js",[],"D:\\research-management-system\\client\\src\\components\\layouts\\Main.js",["221","222","223","224"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport AccountContext from \"../../context/AccountContext\";\r\n\r\nimport Header from './Header';\r\nimport SideMenu from './SideMenu';\r\nimport SideMenuBarUser from './SideMenuBarUser';\r\nimport Content from './Content';\r\nimport Footer from './Footer'; \r\n\r\nconst Main = () => {\r\n    const [userType, setUserType] = useState(\"\");\r\n\r\n    const { userData, setUserData } = useContext(AccountContext);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (userData.user && userData.user !== undefined) {\r\n            const typeOfUser = userData.user.user_type;\r\n            setUserType(typeOfUser);\r\n        }\r\n    }, [userData.user]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header />\r\n            <SideMenu />\r\n            <Content />\r\n            <Footer />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","D:\\research-management-system\\client\\src\\redux\\reducers\\completed.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\presentation.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\proposal.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\campus.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\department.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\utilization.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\publication.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\account.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\seminar.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\innovation.js",[],"D:\\research-management-system\\client\\src\\redux\\reducers\\authentication.js",[],"D:\\research-management-system\\client\\src\\components\\layouts\\Header.js",["225","226","227"],"/* eslint-disable jsx-a11y/role-supports-aria-props */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport AccountContext from \"../../context/AccountContext\";\r\n// import RMSLOGO from \"../../../public/assets/images/rms-logo.png\";\r\n\r\nconst Header = () => {\r\n    const { userData, setUserData } = useContext(AccountContext);\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\r\n        userData.user ? userData.user.first_name : \"\"\r\n    );\r\n    const [lastName, setLastName] = useState(\r\n        userData.user ? userData.user.last_name : \"\"\r\n    );\r\n    const [position, setPosition] = useState(\r\n        userData.user ? userData.user.position : \"\"\r\n    );\r\n    const [college, setCollege] = useState(\r\n        userData.user ? userData.user.college : \"\"\r\n    );\r\n    const [userType, setUserType] = useState(\r\n        userData.user ? userData.user.user_type : \"\"\r\n    );\r\n\r\n    const onLogOut = () => {\r\n        setUserData({\r\n            token: undefined,\r\n            user: undefined,\r\n        });\r\n\r\n        localStorage.setItem(\"auth-token\", \"\");\r\n        history.push(\"/login\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (userData.user && userData.user !== undefined) {\r\n            setFirstName(userData.user.first_name);\r\n            setLastName(userData.user.last_name);\r\n            setPosition(userData.user.position);\r\n            setCollege(userData.user.college);\r\n            setUserType(userData.user.user_type);\r\n        }\r\n    }, [userData.user]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <header\r\n                className={userData.user ? \"topbar\" : \"hidden\"}\r\n                data-navbarbg=\"skin6\"\r\n            >\r\n                <nav className=\"navbar top-navbar navbar-expand-md\">\r\n                    <div className=\"navbar-header bg-dark\" data-logobg=\"skin6\">\r\n                        <a\r\n                            className=\"nav-toggler waves-effect waves-light d-block d-md-none\"\r\n                            href=\"#\"\r\n                        >\r\n                            <i className=\"ti-menu ti-close\" />\r\n                        </a>\r\n                        <div className=\"navbar-brand\">\r\n                            <a href=\"index.html\">\r\n                                \r\n\t\t\t\t\t\t\t\t<img src=\"../assets/images/rms-logo.png\" alt=\"homepage\" className=\"dark-logo\" />\r\n\t\t\t\t\t\t\t\t<img src=\"../assets/images/rms-label.png\" alt=\"homepage\" className=\"dark-logo\" />\r\n\t\t\t\t\t\t\t{/*\r\n\t\t\t\t\t\t\t<span className=\"logo-text\">\r\n\t\t\t\t\t\t\t\t<img src=\"../assets/images/logo-text.png\" alt=\"homepage\" className=\"dark-logo\" />\r\n\t\t\t\t\t\t\t\t<img src=\"../assets/images/logo-light-text.png\" className=\"light-logo\" alt=\"homepage\" />\r\n\t\t\t\t\t\t\t</span> */}\r\n                                <span className=\"logo-text text-white\">\r\n                                    {/* [ System ni Candia ] */}\r\n                                </span>\r\n                            </a>\r\n                        </div>\r\n                        <a\r\n                            className=\"topbartoggler d-block d-md-none waves-effect waves-light\"\r\n                            href=\"#\"\r\n                            data-toggle=\"collapse\"\r\n                            data-target=\"#navbarSupportedContent\"\r\n                            aria-controls=\"navbarSupportedContent\"\r\n                            aria-expanded=\"false\"\r\n                            aria-label=\"Toggle navigation\"\r\n                        >\r\n                            <i className=\"ti-more\" />\r\n                        </a>\r\n                    </div>\r\n                    <div\r\n                        className=\"navbar-collapse collapse\"\r\n                        id=\"navbarSupportedContent\"\r\n                    >\r\n                        <ul className=\"navbar-nav float-left mr-auto ml-3 pl-1\">\r\n                            <li className=\"nav-item dropdown\">\r\n                                {/* <a\r\n                                    className=\"nav-link dropdown-toggle pl-md-3 position-relative\"\r\n                                    href=\"#\"\r\n                                    id=\"bell\"\r\n                                    role=\"button\"\r\n                                    data-toggle=\"dropdown\"\r\n                                    aria-haspopup=\"true\"\r\n                                    aria-expanded=\"false\"\r\n                                >\r\n                                    <span>\r\n                                        <i\r\n                                            data-feather=\"bell\"\r\n                                            className=\"svg-icon\"\r\n                                        />\r\n                                    </span>\r\n                                    <span className=\"badge badge-primary notify-no rounded-circle\">\r\n                                        5\r\n                                    </span>\r\n                                </a> */}\r\n                                <div className=\"dropdown-menu dropdown-menu-left mailbox animated bounceInDown\">\r\n                                    <ul className=\"list-style-none\">\r\n                                        <li>\r\n                                            <div className=\"message-center notifications position-relative\">\r\n                                                <a\r\n                                                    href=\"#\"\r\n                                                    className=\"message-item d-flex align-items-center border-bottom px-3 py-2\"\r\n                                                >\r\n                                                    <div className=\"btn btn-danger rounded-circle btn-circle\">\r\n                                                        <i\r\n                                                            data-feather=\"airplay\"\r\n                                                            className=\"text-white\"\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"w-75 d-inline-block v-middle pl-2\">\r\n                                                        <h6 className=\"message-title mb-0 mt-1\">\r\n                                                            Luanch Admin\r\n                                                        </h6>\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted\">\r\n                                                            Just see the my new\r\n                                                            admin!\r\n                                                        </span>\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted\">\r\n                                                            9:30 AM\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </a>\r\n                                                <a\r\n                                                    href=\"#\"\r\n                                                    className=\"message-item d-flex align-items-center border-bottom px-3 py-2\"\r\n                                                >\r\n                                                    <span className=\"btn btn-success text-white rounded-circle btn-circle\">\r\n                                                        <i\r\n                                                            data-feather=\"calendar\"\r\n                                                            className=\"text-white\"\r\n                                                        />\r\n                                                    </span>\r\n                                                    <div className=\"w-75 d-inline-block v-middle pl-2\">\r\n                                                        <h6 className=\"message-title mb-0 mt-1\">\r\n                                                            Event today\r\n                                                        </h6>\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted text-truncate\">\r\n                                                            Just a reminder that\r\n                                                            you have event\r\n                                                        </span>\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted\">\r\n                                                            9:10 AM\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </a>\r\n                                                <a\r\n                                                    href=\"#\"\r\n                                                    className=\"message-item d-flex align-items-center border-bottom px-3 py-2\"\r\n                                                >\r\n                                                    <span className=\"btn btn-info rounded-circle btn-circle\">\r\n                                                        <i\r\n                                                            data-feather=\"settings\"\r\n                                                            className=\"text-white\"\r\n                                                        />\r\n                                                    </span>\r\n                                                    <div className=\"w-75 d-inline-block v-middle pl-2\">\r\n                                                        <h6 className=\"message-title mb-0 mt-1\">\r\n                                                            Settings\r\n                                                        </h6>\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted text-truncate\">\r\n                                                            You can customize\r\n                                                            this template as you\r\n                                                            want\r\n                                                        </span>\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted\">\r\n                                                            9:08 AM\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </a>\r\n                                                <a\r\n                                                    href=\"#\"\r\n                                                    className=\"message-item d-flex align-items-center border-bottom px-3 py-2\"\r\n                                                >\r\n                                                    <span className=\"btn btn-primary rounded-circle btn-circle\">\r\n                                                        <i\r\n                                                            data-feather=\"box\"\r\n                                                            className=\"text-white\"\r\n                                                        />\r\n                                                    </span>\r\n                                                    <div className=\"w-75 d-inline-block v-middle pl-2\">\r\n                                                        <h6 className=\"message-title mb-0 mt-1\">\r\n                                                            Pavan kumar\r\n                                                        </h6>{\" \"}\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted\">\r\n                                                            Just see the my\r\n                                                            admin!\r\n                                                        </span>\r\n                                                        <span className=\"font-12 text-nowrap d-block text-muted\">\r\n                                                            9:02 AM\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </a>\r\n                                            </div>\r\n                                        </li>\r\n                                        <li>\r\n                                            <a\r\n                                                className=\"nav-link pt-3 text-center text-dark\"\r\n                                                href=\"#\"\r\n                                            >\r\n                                                <strong>\r\n                                                    Check all notifications\r\n                                                </strong>\r\n                                                <i className=\"fa fa-angle-right\" />\r\n                                            </a>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </li>\r\n                            {/* <li className=\"nav-item dropdown\">\r\n                                <a\r\n                                    className=\"nav-link dropdown-toggle\"\r\n                                    href=\"#\"\r\n                                    id=\"navbarDropdown\"\r\n                                    role=\"button\"\r\n                                    data-toggle=\"dropdown\"\r\n                                    aria-haspopup=\"true\"\r\n                                    aria-expanded=\"false\"\r\n                                >\r\n                                    <i\r\n                                        data-feather=\"settings\"\r\n                                        className=\"svg-icon\"\r\n                                    />\r\n                                </a>\r\n                                <div\r\n                                    className=\"dropdown-menu\"\r\n                                    aria-labelledby=\"navbarDropdown\"\r\n                                >\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                        Action\r\n                                    </a>\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                        Another action\r\n                                    </a>\r\n                                    <div className=\"dropdown-divider\" />\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                        Something else here\r\n                                    </a>\r\n                                </div>\r\n                            </li> */}\r\n                            {/* <li className=\"nav-item d-none d-md-block\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\">\r\n\t\t\t\t\t\t\t\t<div className=\"customize-input\">\r\n\t\t\t\t\t\t\t\t<select className=\"custom-select form-control bg-white custom-radius custom-shadow border-0\">\r\n\t\t\t\t\t\t\t\t\t<option>EN</option>\r\n\t\t\t\t\t\t\t\t\t<option value={1}>AB</option>\r\n\t\t\t\t\t\t\t\t\t<option value={2}>AK</option>\r\n\t\t\t\t\t\t\t\t\t<option value={3}>BE</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li> */}\r\n                        </ul>\r\n                        <ul className=\"navbar-nav float-right\">\r\n                            {/* <li className=\"nav-item d-none d-md-block\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\">\r\n\t\t\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t\t<div className=\"customize-input\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"form-control custom-shadow custom-radius border-0 bg-white\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n\t\t\t\t\t\t\t\t\t<i className=\"form-control-icon\" data-feather=\"search\" />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li> */}\r\n                            <li className=\"nav-item dropdown\">\r\n                                <a\r\n                                    className=\"nav-link dropdown-toggle\"\r\n                                    href=\"#\"\r\n                                    data-toggle=\"dropdown\"\r\n                                    aria-haspopup=\"true\"\r\n                                    aria-expanded=\"false\"\r\n                                >\r\n                                    <img\r\n                                        src=\"../assets/images/profile-picture.svg\"\r\n                                        alt=\"user\"\r\n                                        className=\"rounded-circle\"\r\n                                        width={40}\r\n                                    />\r\n                                    <span className=\"ml-2 d-none d-lg-inline-block\">\r\n                                        <span>Hello,</span>{\" \"}\r\n                                        <span className=\"text-dark\">\r\n                                            {firstName} {lastName}\r\n                                        </span>{\" \"}\r\n                                        <i\r\n                                            data-feather=\"chevron-down\"\r\n                                            className=\"svg-icon\"\r\n                                        />\r\n                                    </span>\r\n                                </a>\r\n                                <div className=\"dropdown-menu dropdown-menu-right user-dd animated flipInY\">\r\n                                    <a className=\"dropdown-item\" href=\"/profile\">\r\n                                        <i\r\n                                            data-feather=\"user\"\r\n                                            className=\"svg-icon mr-2 ml-1\"\r\n                                        />{\" \"}\r\n                                        My Profile\r\n                                    </a>\r\n                                    {/* <a className=\"dropdown-item\" href=\"#\"><i data-feather=\"mail\" className=\"svg-icon mr-2 ml-1\" /> Inbox</a> */}\r\n                                    {/* <div className=\"dropdown-divider\" />\r\n\t\t\t\t\t\t\t\t\t<a className=\"dropdown-item\" href=\"#\"><i data-feather=\"settings\" className=\"svg-icon mr-2 ml-1\" />\r\n\t\t\t\t\t\t\t\t\t\tAccount Setting\r\n\t\t\t\t\t\t\t\t\t</a> */}\r\n                                    <div className=\"dropdown-divider\" />\r\n                                    {/* <a className=\"dropdown-item\" href=\"#\"><i data-feather=\"log-out\" className=\"svg-icon mr-2 ml-1\" />\r\n\t\t\t\t\t\t\t\t\t\tLogout\r\n\t\t\t\t\t\t\t\t\t</a> */}\r\n                                    <Link\r\n                                        className=\"dropdown-item\"\r\n                                        to=\"#\"\r\n                                        onClick={() => {\r\n                                            onLogOut();\r\n                                        }}\r\n                                    >\r\n                                        <i\r\n                                            data-feather=\"log-out\"\r\n                                            className=\"svg-icon mr-2 ml-1\"\r\n                                        />\r\n                                        Logout\r\n                                    </Link>\r\n                                    <div className=\"dropdown-divider\" />\r\n                                    {/* <div className=\"pl-4 p-3\">\r\n\t\t\t\t\t\t\t\t\t<a href=\"#\" className=\"btn btn-sm btn-info\">View\r\n\t\t\t\t\t\t\t\t\t\tProfile\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</div> */}\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","D:\\research-management-system\\client\\src\\components\\layouts\\Content.js",["228"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Faculty from \"../pages/researches/dashboard/Faculties\";\r\nimport Admin from \"../pages/researches/dashboard/Administrator\";\r\n\r\nimport Proposal from \"../pages/researches/Proposal\";\r\nimport Completed from \"../pages/researches/Completed\";\r\nimport Presentation from \"../pages/researches/Presentation\";\r\nimport Publication from \"../pages/researches/Publication\";\r\nimport Utilization from \"../pages/researches/Utilization\";\r\nimport Innovation from \"../pages/researches/Innovation\";\r\nimport Seminar from \"../pages/researches/Seminar\";\r\n\r\nimport Campus from \"../pages/manage/Campus\";\r\nimport Department from \"../pages/manage/Department\";\r\nimport Account from \"../pages/manage/Account\";\r\nimport Profile from \"../pages/manage/Profile\";\r\nimport ChangePassword from \"../pages/manage/ChangePassword\";\r\n\r\nimport Login from \"../auth/Login\";\r\nimport Registration from \"../auth/Registration\";\r\n\r\nimport PageNotFound from \"../pages/error/PageNotFound\";\r\n\r\nimport AccountContext from \"../../context/AccountContext\";\r\n\r\nconst Content = () => {\r\n    const { userData } = useContext(AccountContext);\r\n\r\n    if (userData.user && userData.user !== undefined) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-wrapper\" style={{ display: \"block\" }}>\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/dashboard\"\r\n                            render={() => {\r\n                                if (\r\n                                    userData.user.user_type === \"rh\" ||\r\n                                    userData.user.user_type === \"admin\"\r\n                                ) {\r\n                                    return (\r\n                                        <Admin currentUser={userData.user} />\r\n                                    );\r\n                                } else if (userData.user.user_type === \"user\") {\r\n                                    return (\r\n                                        <Faculty currentUser={userData.user} />\r\n                                    );\r\n                                }\r\n                            }}\r\n                        ></Route>\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/proposal\"\r\n                            render={() => (\r\n                                <Proposal currentUser={userData.user} />\r\n                            )}\r\n                        ></Route>\r\n                        <Route\r\n                            exact\r\n                            path=\"/completed\"\r\n                            render={() => (\r\n                                <Completed currentUser={userData.user} />\r\n                            )}\r\n                        ></Route>\r\n                        <Route\r\n                            exact\r\n                            path=\"/presentation\"\r\n                            render={() => (\r\n                                <Presentation currentUser={userData.user} />\r\n                            )}\r\n                        ></Route>\r\n                        <Route\r\n                            exact\r\n                            path=\"/publication\"\r\n                            render={() => (\r\n                                <Publication currentUser={userData.user} />\r\n                            )}\r\n                        ></Route>\r\n                        <Route\r\n                            exact\r\n                            path=\"/utilization\"\r\n                            render={() => (\r\n                                <Utilization currentUser={userData.user} />\r\n                            )}\r\n                        ></Route>\r\n                        <Route\r\n                            exact\r\n                            path=\"/innovation\"\r\n                            render={() => (\r\n                                <Innovation currentUser={userData.user} />\r\n                            )}\r\n                        ></Route>\r\n                        <Route\r\n                            exact\r\n                            path=\"/seminar\"\r\n                            render={() => (\r\n                                <Seminar currentUser={userData.user} />\r\n                            )}\r\n                        ></Route>\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/campus\"\r\n                            render={() => {\r\n                                if (\r\n                                    userData.user.user_type === \"rh\" ||\r\n                                    userData.user.user_type === \"admin\"\r\n                                ) {\r\n                                    return <Campus />;\r\n                                } else {\r\n                                    return <PageNotFound />;\r\n                                }\r\n                            }}\r\n                        ></Route>\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/department\"\r\n                            render={() => {\r\n                                if (\r\n                                    userData.user.user_type === \"rh\" ||\r\n                                    userData.user.user_type === \"admin\"\r\n                                ) {\r\n                                    return <Department />;\r\n                                } else {\r\n                                    return <PageNotFound />;\r\n                                }\r\n                            }}\r\n                        ></Route>\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/account\"\r\n                            render={() => {\r\n                                if (\r\n                                    userData.user.user_type === \"rh\" ||\r\n                                    userData.user.user_type === \"admin\"\r\n                                ) {\r\n                                    return <Account />;\r\n                                } else {\r\n                                    return <PageNotFound />;\r\n                                }\r\n                            }}\r\n                        ></Route>\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/registration\"\r\n                            render={() => {\r\n                                if (\r\n                                    userData.user.user_type === \"rh\" ||\r\n                                    userData.user.user_type === \"admin\"\r\n                                ) {\r\n                                    return <Registration />;\r\n                                } else {\r\n                                    return <PageNotFound />;\r\n                                }\r\n                            }}\r\n                        ></Route>\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/profile\"\r\n                            render={() => {\r\n                                if (\r\n                                    userData.user.user_type === \"user\" ||\r\n                                    userData.user.user_type === \"rh\" || \r\n                                    userData.user.user_type === \"admin\" \r\n                                ) {\r\n                                    return <Profile currentUser={userData.user} />;\r\n                                } else {\r\n                                    return <PageNotFound />;\r\n                                }\r\n                            }}\r\n                        ></Route>\r\n\r\n                        <Route\r\n                            exact\r\n                            path=\"/change-password\"\r\n                            render={() => {\r\n                                if (\r\n                                    userData.user.user_type === \"user\"\r\n                                ) {\r\n                                    return <ChangePassword currentUser={userData.user} />;\r\n                                } else {\r\n                                    return <PageNotFound />;\r\n                                }\r\n                            }}\r\n                        ></Route>\r\n\r\n                        <Route component={PageNotFound}></Route>\r\n                    </Switch>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <Switch>\r\n                    <Route \r\n                        path=\"/login\" \r\n                        component={Login}\r\n                    ></Route>\r\n\r\n                    {/* <Route component={PageNotFound}></Route> */}\r\n                </Switch>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Content;\r\n","D:\\research-management-system\\client\\src\\components\\layouts\\Footer.js",["229","230"],"import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AccountContext from '../../context/AccountContext';\r\n\r\nconst Footer = () => {\r\n    const { userData } = useContext(AccountContext);\r\n        \r\n    return <div></div>\r\n    // if(userData.user !== undefined) {\r\n    //     return (\r\n    //         <React.Fragment>\r\n    //             <div className=\"page-wrapper\">\r\n    //                 <footer className=\"footer text-center text-muted\">\r\n    //                     <Link to=\"#\">Surigao del Sur State University</Link> Research Management System v.1.\r\n    //                 </footer>\r\n    //             </div>\r\n    //         </React.Fragment>\r\n    //     )\r\n    // }\r\n}\r\n\r\nexport default Footer;\r\n","D:\\research-management-system\\client\\src\\components\\layouts\\SideMenu.js",[],"D:\\research-management-system\\client\\src\\components\\layouts\\SideMenuBarUser.jsx",[],"D:\\research-management-system\\client\\src\\components\\pages\\manage\\Campus.js",[],"D:\\research-management-system\\client\\src\\components\\pages\\manage\\Profile.jsx",["231","232","233","234","235","236","237","238","239","240","241","242","243","244","245"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n    Col,\r\n} from \"reactstrap\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// import DefaultAvatar from \"../../../profile-avatar.svg\";\r\nimport DefaultAvatar from \"../../../images/profile-picture.svg\";\r\nimport { getDepartment } from \"../../../redux/actions/department_action\";\r\nimport { updateAccount } from \"../../../redux/actions/account_action\";\r\n\r\nconst formSchema = yup.object().shape({\r\n    first_name: yup.string().required(\"First name field is required\"),\r\n    last_name: yup.string().required(\"Last name field is required\"),\r\n    position: yup.string().required(\"Position field is required\"),\r\n    college: yup.string().required(\"College field is required\"),\r\n});\r\n\r\nconst Profile = ({ currentUser }) => {\r\n    const [userId, setUserId] = useState(currentUser.id);\r\n    const [firstName, setFirstName] = useState(currentUser.first_name);\r\n    const [middleInitial, setmiddleInitial] = useState(\r\n        currentUser.middle_initial\r\n    );\r\n    const [lastName, setLastName] = useState(currentUser.last_name);\r\n    const [fullName, setFullName] = useState(currentUser.full_name);\r\n    const [position, setPosition] = useState(currentUser.position);\r\n    const [college, setCollege] = useState(currentUser.college);\r\n    const [campus, setCampus] = useState(currentUser.campus);\r\n    const [fieldOfSpecialization, setFieldOfSpecialization] = useState(\r\n        currentUser.field_of_specialization\r\n    );\r\n    const [educationalAttainment, setEducationalAttainment] = useState(\r\n        currentUser.educational_attainment\r\n    );\r\n\r\n    const department = useSelector((state) => state.department.departments);\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        resolver: yupResolver(formSchema),\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(getDepartment());\r\n    }, [dispatch]);\r\n\r\n    const onSubmit = (data) => {\r\n        const profileData = {\r\n            user_id: data.user_id,\r\n            first_name: data.first_name,\r\n            middle_initial: data.middle_initial,\r\n            last_name: data.last_name,\r\n            full_name: `${data.first_name} ${data.middle_initial} ${data.last_name}`,\r\n            position: data.position,\r\n            college: data.college,\r\n            field_of_specialization: data.field_of_specialization,\r\n            educational_attainment: data.educational_attainment,\r\n        };\r\n\r\n        console.log(\"PROFILE data: \", profileData);\r\n\r\n        return false;\r\n\r\n        dispatch(updateAccount(profileData));\r\n    };\r\n\r\n    const getColleges = () => {\r\n        const colleges = [];\r\n\r\n        for (let i = 0; i < department.length; i++) {\r\n            colleges.push(\r\n                <option\r\n                    key={department[i]._id}\r\n                    value={department[i].department_code}\r\n                    // data-campus={department[i].campus_name}\r\n                >\r\n                    {department[i].department_name}\r\n                </option>\r\n            );\r\n        }\r\n\r\n        return colleges;\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar={true}\r\n                newestOnTop={false}\r\n                closeOnClick={true}\r\n                rtl={false}\r\n                pauseOnFocusLoss={true}\r\n                draggable={true}\r\n                pauseOnHover={true}\r\n            />\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Personal Information\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/profile\">Profile</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Container fluid>\r\n                <Card>\r\n                    <CardBody>\r\n                        <Form onSubmit={handleSubmit(onSubmit)}>\r\n                            <Row className=\"pt-4 pb-4\">\r\n                                <Col md=\"5\" className=\"ml-5\">\r\n                                    <FormGroup className=\"text-center\">\r\n                                        <a\r\n                                            href=\"#\"\r\n                                            onClick={() =>\r\n                                                alert(\"Will be updated soon.\")\r\n                                            }\r\n                                        >\r\n                                            <img\r\n                                                src={DefaultAvatar}\r\n                                                alt=\"profile\"\r\n                                                width=\"150\"\r\n                                                height=\"150\"\r\n                                            />\r\n                                        </a>\r\n                                    </FormGroup>\r\n                                    {/* <FormGroup>\r\n                                        <Label>Username <span className=\"text-danger\">*</span></Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"username\"\r\n                                            value={userName}\r\n                                            {...register(\"username\")}\r\n                                        ></Input>\r\n                                        <small className=\"text-danger\">\r\n                                            { errors.username?.message }\r\n                                        </small>\r\n                                    </FormGroup> */}\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            First name{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        {/* <Input\r\n                                            type=\"text\"\r\n                                            id=\"user_id\"\r\n                                            name=\"user_id\"\r\n                                            defaultValue={userId}\r\n                                            {...register(\"user_id\")}\r\n                                            placeholder=\"User id\"\r\n                                        ></Input> */}\r\n                                        <input\r\n                                            className=\"\"\r\n                                            type=\"hidden\"\r\n                                            id=\"user_id\"\r\n                                            name=\"user_id\"\r\n                                            defaultValue={userId}\r\n                                            {...register(\"user_id\")}\r\n                                        />\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.user_id?.message}\r\n                                        </small>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            id=\"first_name\"\r\n                                            name=\"first_name\"\r\n                                            defaultValue={firstName}\r\n                                            {...register(\"first_name\")}\r\n                                        />\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.first_name?.message}\r\n                                        </small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            Last name{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"last_name\"\r\n                                            defaultValue={lastName}\r\n                                            {...register(\"last_name\")}\r\n                                        ></input>\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.last_name?.message}\r\n                                        </small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Middle initial / name</Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"middle_initial\"\r\n                                            defaultValue={middleInitial}\r\n                                            {...register(\"middle_initial\")}\r\n                                        ></input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md=\"1\">\r\n                                    <div\r\n                                        className=\"v-divider\"\r\n                                        style={{\r\n                                            marginLeft: \"35px\",\r\n                                            width: \"1px\",\r\n                                            height: \"100%\",\r\n                                            borderLeft: \"1px dotted grey\",\r\n                                        }}\r\n                                    ></div>\r\n                                </Col>\r\n                                <Col md=\"5\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            Position{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            type=\"select\"\r\n                                            name=\"position\"\r\n                                            defaultValue={position}\r\n                                            {...register(\"position\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"instructor i\">\r\n                                                Instructor I\r\n                                            </option>\r\n                                            <option value=\"instructor ii\">\r\n                                                Instructor II\r\n                                            </option>\r\n                                            <option value=\"instructor iii\">\r\n                                                Instructor III\r\n                                            </option>\r\n                                            <option value=\"assistant professor i\">\r\n                                                Assistant Professor I\r\n                                            </option>\r\n                                            <option value=\"assistant professor ii\">\r\n                                                Assistant Professor II\r\n                                            </option>\r\n                                            <option value=\"assistant professor iii\">\r\n                                                Assistant Professor III\r\n                                            </option>\r\n                                            <option value=\"assistant professor iii\">\r\n                                                Assistant Professor III\r\n                                            </option>\r\n                                            <option value=\"assistant professor iv\">\r\n                                                Assistant Professor IV\r\n                                            </option>\r\n                                            <option value=\"associate professor i\">\r\n                                                Associate Professor I\r\n                                            </option>\r\n                                            <option value=\"associate professor ii\">\r\n                                                Associate Professor II\r\n                                            </option>\r\n                                            <option value=\"associate professor iii\">\r\n                                                Associate Professor III\r\n                                            </option>\r\n                                            <option value=\"associate professor iv\">\r\n                                                Associate Professor IV\r\n                                            </option>\r\n                                            <option value=\"associate professor v\">\r\n                                                Associate Professor V\r\n                                            </option>\r\n                                            <option value=\"professor i\">\r\n                                                Professor I\r\n                                            </option>\r\n                                            <option value=\"professor ii\">\r\n                                                Professor II\r\n                                            </option>\r\n                                            <option value=\"professor iii\">\r\n                                                Professor III\r\n                                            </option>\r\n                                            <option value=\"professor iv\">\r\n                                                Professor IV\r\n                                            </option>\r\n                                            <option value=\"professor v\">\r\n                                                Professor V\r\n                                            </option>\r\n                                            <option value=\"professor vi\">\r\n                                                Professor VI\r\n                                            </option>\r\n                                        </select>\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.position?.message}\r\n                                        </small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            College{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"college\"\r\n                                            id=\"college\"\r\n                                            defaultValue={college}\r\n                                            {...register(\"college\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"CITE\">\r\n                                                College of Information\r\n                                                Technology\r\n                                            </option>\r\n                                            <option value=\"CTE\">\r\n                                                College of Teacher Education\r\n                                            </option>\r\n                                            <option value=\"CBM\">\r\n                                                College of Business and\r\n                                                Management\r\n                                            </option>\r\n                                            <option value=\"CAFS\">\r\n                                                College of Agriculture,\r\n                                                Fisheries and Forestry\r\n                                            </option>\r\n                                        </select>\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.college?.message}\r\n                                        </small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Field of Specialization</Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"field_of_specialization\"\r\n                                            defaultValue={fieldOfSpecialization}\r\n                                            {...register(\r\n                                                \"field_of_specialization\"\r\n                                            )}\r\n                                        ></input>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Educational Attainment</Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"educational_attainment\"\r\n                                            defaultValue={educationalAttainment}\r\n                                            {...register(\r\n                                                \"educational_attainment\"\r\n                                            )}\r\n                                        ></input>\r\n                                    </FormGroup>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-purple mt-3\"\r\n                                        style={{ float: \"right\" }}\r\n                                    >\r\n                                        Save Changes\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </CardBody>\r\n                </Card>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\manage\\ChangePassword.jsx",["246","247"],"import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { changePassword } from \"../../../redux/actions/auth_action\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n    Col,\r\n} from \"reactstrap\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst formSchema = yup.object().shape({\r\n    old_password: yup.string().required(\"Old password field is required.\"),\r\n    new_password: yup.string().required(\"New password field is required.\"),\r\n    confirm_password: yup\r\n        .string()\r\n        .oneOf([yup.ref(\"new_password\"), null])\r\n        .required(\"Confirm password field is required.\"),\r\n});\r\n\r\nconst ChangePassword = ({ currentUser }) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(formSchema),\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        const isConfirm = window.confirm(\r\n            \"Are you sure that you want to change your password?\"\r\n        );\r\n\r\n        if (isConfirm) {\r\n            dispatch(changePassword(data));\r\n        } else {\r\n            reset({});\r\n        }\r\n    };\r\n\r\n    console.log(\"Current user: \", currentUser);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Change Password\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/change-password\">\r\n                                            Change Password\r\n                                        </a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Container fluid>\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row className=\"pt-4 pb-4\">\r\n                            <Col md=\"5\" className=\"ml-4\">\r\n                                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            Old Password{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"hidden\"\r\n                                            name=\"username\"\r\n                                            value={\r\n                                                !currentUser\r\n                                                    ? \"\"\r\n                                                    : currentUser.username\r\n                                            }\r\n                                            {...register(\"username\")}\r\n                                        ></input>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"password\"\r\n                                            name=\"old_password\"\r\n                                            {...register(\"old_password\")}\r\n                                        ></input>\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.old_password?.message}\r\n                                        </small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            New Password{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"password\"\r\n                                            name=\"new_password\"\r\n                                            {...register(\"new_password\")}\r\n                                        ></input>\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.new_password?.message}\r\n                                        </small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            Confirm Password{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"password\"\r\n                                            name=\"confirm_password\"\r\n                                            {...register(\"confirm_password\")}\r\n                                        ></input>\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.confirm_password?.message &&\r\n                                                \"Passwords did not match.\"}\r\n                                        </small>\r\n                                    </FormGroup>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-purple mt-3\"\r\n                                        style={{ float: \"right\" }}\r\n                                    >\r\n                                        Save Changes\r\n                                    </Button>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ChangePassword;\r\n","D:\\research-management-system\\client\\src\\components\\auth\\Registration.jsx",["248","249","250"],"import React, { useState, useEffect, Fragment, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { createAccount } from \"../../redux/actions/account_action\";\r\nimport { getDepartment } from \"../../redux/actions/department_action\";\r\nimport { getCampus } from \"../../redux/actions/campus_action\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardFooter,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst formSchema = yup.object().shape({\r\n    first_name: yup.string().required(\"First name field is required.\"),\r\n    last_name: yup.string().required(\"Last name field is required.\"),\r\n    position: yup.string().required(\"Position field is required.\"),\r\n    college: yup.string().required(\"College field is required.\"),\r\n    campus: yup.string().required(\"Campus field is required.\"),\r\n    username: yup.string().required(\"Username field is required.\"),\r\n    user_type: yup.string().required(\"User type field is required.\"),\r\n    password: yup.string().required(\"Password field is required.\"),\r\n})\r\n\r\nconst Registration = () => {\r\n    const department = useSelector((state) => state.department.departments);\r\n    const campus = useSelector((state) => state.campus.campuses);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    console.log(\"department\", department);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    // const [firstName, setFirstName] = useState(\"\");\r\n    // const [lastName, setLastName] = useState(\"\");\r\n    // const [middleInitial, setMiddleInitial] = useState(\"\");\r\n    // const [position, setPosition] = useState(\"\");\r\n    // const [college, setCollege] = useState(\"\");\r\n    // const [campus, setCampus] = useState(\"\");\r\n    // const [userName, setUserName] = useState(\"\");\r\n    // const [userType, setUserType] = useState(\"\");\r\n    // const [password, setPassword] = useState(\"\");\r\n\r\n    const { register, handleSubmit, formState: { errors }, reset, watch } = useForm({\r\n        resolver: yupResolver(formSchema),\r\n        defaultValues: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(getDepartment());\r\n        dispatch(getCampus());\r\n    }, [dispatch]);\r\n\r\n    const onGenerateCredentials = () => {\r\n        const year = new Date().getFullYear();\r\n        const fname = watch(\"first_name\");\r\n        const lname = watch(\"last_name\");\r\n        const uname = `${lname}.${fname}`.split(\" \").join(\"_\").toLocaleLowerCase();\r\n        const pword = `${uname}${year}`;\r\n        \r\n        document.getElementById(\"username\").value = uname;\r\n        document.getElementById(\"password\").value = pword;\r\n    };\r\n\r\n    // const onSubmitFormRegistration = (e) => {\r\n    //     e.preventDefault();\r\n\r\n    //     const data = {\r\n    //         first_name: firstName,\r\n    //         last_name: lastName,\r\n    //         middle_initial: middleInitial,\r\n    //         full_name: `${lastName}, ${firstName} ${middleInitial}`,\r\n    //         position: position,\r\n    //         college: college,\r\n    //         campus: campus,\r\n    //         username: userName,\r\n    //         user_type: userType,\r\n    //         password: password,\r\n    //     };\r\n\r\n    //     dispatch(createAccount(data));\r\n    //     clearForm();\r\n    // };\r\n\r\n    const onSubmit = (data) => {\r\n        const details = {\r\n            first_name: data.first_name,\r\n            last_name: data.last_name,\r\n            middle_initial: data.middle_initial,\r\n            full_name: `${data.first_name} ${data.middle_initial} ${data.last_name}`,\r\n            position: data.position,\r\n            college: data.college,\r\n            campus: data.campus,\r\n            username: data.username,\r\n            user_type: data.user_type,\r\n            password: data.password\r\n        }\r\n\r\n        dispatch(createAccount(details));\r\n        reset({});\r\n    }\r\n\r\n    // const clearForm = () => {\r\n    //     setFirstName(\"\");\r\n    //     setLastName(\"\");\r\n    //     setMiddleInitial(\"\");\r\n    //     setPosition(\"\");\r\n    //     setCollege(\"\");\r\n    //     setCampus(\"\");\r\n    //     setUserName(\"\");\r\n    //     setUserType(\"\");\r\n    //     setPassword(\"\");\r\n    // };\r\n\r\n    const getColleges = () => {\r\n        const colleges = [];\r\n\r\n        for (let i = 0; i < department.length; i++) {\r\n            colleges.push(\r\n                <option\r\n                    key={department[i]._id}\r\n                    value={department[i].department_code}\r\n                    data-campus={department[i].campus_name}\r\n                >\r\n                    {department[i].department_name}\r\n                </option>\r\n            );\r\n        }\r\n\r\n        return colleges;\r\n    };\r\n\r\n    const getAllCampus = () => {\r\n        const campuses = [];\r\n\r\n        for (let i = 0; i < campus.length; i++) {\r\n            campuses.push(\r\n                <option\r\n                    key={campus[i]._id}\r\n                    value={campus[i].campus_name.toLocaleLowerCase().trim()}\r\n                >\r\n                    {campus[i].campus_name}\r\n                </option>\r\n            );\r\n        }\r\n\r\n        return campuses;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Account Registration\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/registration\">Registration</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Container fluid>\r\n                <Card>\r\n                    <Form onSubmit={handleSubmit(onSubmit)}>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col className=\"\" md=\"5\">\r\n                                    <div className=\"stepper\">\r\n                                        <p className=\"badge badge-primary\">\r\n                                            <span>STEP 1: </span> Basic\r\n                                            Information\r\n                                        </p>\r\n                                    </div>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            First name{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={errors.first_name ? \"is-invalid form-control\" : \"form-control\"}\r\n                                            type=\"text\"\r\n                                            name=\"first_name\"\r\n                                            {...register(\"first_name\")}\r\n                                        />\r\n                                        <small className=\"text-danger\">{errors.first_name?.message}</small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label className=\"\">\r\n                                            Last name{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={ errors.last_name ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"text\"\r\n                                            name=\"last_name\"\r\n                                            id=\"last_name\"\r\n                                            {...register(\"last_name\")}\r\n                                            // value={lastName}\r\n                                            // onChange={(e) => {\r\n                                            //     setLastName(e.target.value);\r\n                                            // }}\r\n                                            // required\r\n                                        />\r\n                                        <small className=\"text-danger\">{errors.last_name?.message}</small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label className=\"\">M.I.</Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"middle_initial\"\r\n                                            id=\"middle_initial\"\r\n                                            // ref={inputRef}\r\n                                            {...register(\"middle_initial\")}\r\n                                            // value={middleInitial}\r\n                                            // onChange={(e) => {\r\n                                            //     setMiddleInitial(\r\n                                            //         e.target.value\r\n                                            //     );\r\n                                            // }}\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label className=\"\">\r\n                                            Position{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className={ errors.position ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"select\"\r\n                                            name=\"position\"\r\n                                            id=\"position\"\r\n                                            // ref={fieldsRef}\r\n                                            {...register(\"position\")}\r\n                                            // value={position}\r\n                                            // onChange={(e) => {\r\n                                            //     setPosition(e.target.value);\r\n                                            // }}\r\n                                            // required\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"instructor i\">\r\n                                                Instructor I\r\n                                            </option>\r\n                                            <option value=\"instructor ii\">\r\n                                                Instructor II\r\n                                            </option>\r\n                                            <option value=\"instructor iii\">\r\n                                                Instructor III\r\n                                            </option>\r\n                                            <option value=\"assistant professor i\">\r\n                                                Assistant Professor I\r\n                                            </option>\r\n                                            <option value=\"assistant professor ii\">\r\n                                                Assistant Professor II\r\n                                            </option>\r\n                                            <option value=\"assistant professor iii\">\r\n                                                Assistant Professor III\r\n                                            </option>\r\n                                            <option value=\"assistant professor iii\">\r\n                                                Assistant Professor III\r\n                                            </option>\r\n                                            <option value=\"assistant professor iv\">\r\n                                                Assistant Professor IV\r\n                                            </option>\r\n                                            <option value=\"associate professor i\">\r\n                                                Associate Professor I\r\n                                            </option>\r\n                                            <option value=\"associate professor ii\">\r\n                                                Associate Professor II\r\n                                            </option>\r\n                                            <option value=\"associate professor iii\">\r\n                                                Associate Professor III\r\n                                            </option>\r\n                                            <option value=\"associate professor iv\">\r\n                                                Associate Professor IV\r\n                                            </option>\r\n                                            <option value=\"associate professor v\">\r\n                                                Associate Professor V\r\n                                            </option>\r\n                                            <option value=\"professor i\">\r\n                                                Professor I\r\n                                            </option>\r\n                                            <option value=\"professor ii\">\r\n                                                Professor II\r\n                                            </option>\r\n                                            <option value=\"professor iii\">\r\n                                                Professor III\r\n                                            </option>\r\n                                            <option value=\"professor iv\">\r\n                                                Professor IV\r\n                                            </option>\r\n                                            <option value=\"professor v\">\r\n                                                Professor V\r\n                                            </option>\r\n                                            <option value=\"professor vi\">\r\n                                                Professor VI\r\n                                            </option>\r\n                                        </select>\r\n                                        <small className=\"text-danger\">{errors.position?.message}</small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label className=\"\">\r\n                                            College{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className={ errors.college ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"select\"\r\n                                            name=\"college\"\r\n                                            id=\"college\"\r\n                                            {...register(\"college\")}\r\n                                            // value={college}\r\n                                            // onChange={(e) => {\r\n                                            //     let index =\r\n                                            //         e.nativeEvent.target\r\n                                            //             .selectedIndex;\r\n                                            //     let campus =\r\n                                            //         e.nativeEvent.target[index]\r\n                                            //             .dataset.campus;\r\n\r\n                                            //     setCollege(e.target.value);\r\n                                            //     setCampus(campus);\r\n                                            // }}\r\n                                            // required\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            {getColleges()}\r\n                                        </select>\r\n                                        <small className=\"text-danger\">{errors.college?.message}</small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label className=\"\">\r\n                                            Campus{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className={ errors.college ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"select\"\r\n                                            name=\"campus\"\r\n                                            id=\"campus\"\r\n                                            {...register(\"campus\")}\r\n                                            // value={college}\r\n                                            // onChange={(e) => {\r\n                                            //     let index =\r\n                                            //         e.nativeEvent.target\r\n                                            //             .selectedIndex;\r\n                                            //     let campus =\r\n                                            //         e.nativeEvent.target[index]\r\n                                            //             .dataset.campus;\r\n\r\n                                            //     setCollege(e.target.value);\r\n                                            //     setCampus(campus);\r\n                                            // }}\r\n                                            // required\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            {getAllCampus()}\r\n                                        </select>\r\n                                        <small className=\"text-danger\">{errors.campus?.message}</small>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md=\"1\">\r\n                                    <div\r\n                                        className=\"v-divider\"\r\n                                        style={{\r\n                                            marginLeft: \"35px\",\r\n                                            width: \"1px\",\r\n                                            height: \"100%\",\r\n                                            borderLeft: \"1px dotted grey\",\r\n                                        }}\r\n                                    ></div>\r\n                                </Col>\r\n                                <Col md=\"5\">\r\n                                    <div className=\"stepper\">\r\n                                        <p className=\"badge badge-primary\">\r\n                                            <span>STEP 2: </span> Generate\r\n                                            Credentials\r\n                                        </p>\r\n                                    </div>\r\n                                    <Button\r\n                                        className=\"mb-3 btn btn-success\"\r\n                                        type=\"submit\"\r\n                                        // disabled={\r\n                                        //     firstName !== \"\" &&\r\n                                        //     lastName !== \"\" &&\r\n                                        //     position !== \"\" &&\r\n                                        //     college !== \"\"\r\n                                        //         ? false\r\n                                        //         : true\r\n                                        // }\r\n                                        onClick={() => { onGenerateCredentials() }}\r\n                                    >\r\n                                        Generate\r\n                                    </Button>\r\n                                    <FormGroup>\r\n                                        <Label className=\"\">\r\n                                            Username{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={ errors.username ? \"form-control is-invalid\" : \"form-control\" }\r\n                                            type=\"text\"\r\n                                            name=\"username\"\r\n                                            id=\"username\"\r\n                                            {...register(\"username\")}\r\n                                            // value={userName}\r\n                                            // onChange={(e) => {\r\n                                            //     setUserName(e.target.value);\r\n                                            // }}\r\n                                            // required\r\n                                        ></input>\r\n                                        <small className=\"text-danger\">{errors.username?.message}</small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label className=\"\">\r\n                                            User type{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className={ errors.user_type ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"select\"\r\n                                            name=\"user_type\"\r\n                                            id=\"user_type\"\r\n                                            {...register(\"user_type\")}\r\n                                            // value={userType}\r\n                                            // onChange={(e) => {\r\n                                            //     setUserType(e.target.value);\r\n                                            // }}\r\n                                            // required\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"user\">User</option>\r\n                                            <option value=\"admin\">\r\n                                                Administrator\r\n                                            </option>\r\n                                            <option value=\"rd\">\r\n                                                Research Director\r\n                                            </option>\r\n                                            <option value=\"rh\">\r\n                                                Research Head\r\n                                            </option>\r\n                                            <option value=\"cd\">\r\n                                                Campus Director\r\n                                            </option>\r\n                                        </select>\r\n                                        <small className=\"text-danger\">{errors.user_type?.message}</small>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            Password{\" \"}\r\n                                            <span className=\"text-danger font-weight-bold\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={ errors.password ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type={\r\n                                                showPassword\r\n                                                    ? \"text\"\r\n                                                    : \"password\"\r\n                                            }\r\n                                            name=\"password\"\r\n                                            id=\"password\"\r\n                                            {...register(\"password\")}\r\n                                            // value={password}\r\n                                            // onChange={(e) => {\r\n                                            //     setPassword(e.target.value);\r\n                                            // }}\r\n                                            // required\r\n                                        ></input>\r\n                                        <small className=\"text-danger\">{errors.password?.message}</small>\r\n                                    </FormGroup>\r\n                                    <FormGroup check>\r\n                                        <Label check>\r\n                                            <Input\r\n                                                type=\"checkbox\"\r\n                                                onChange={() => {\r\n                                                    setShowPassword(\r\n                                                        !showPassword\r\n                                                    );\r\n                                                }}\r\n                                            />{\" \"}\r\n                                            Show password\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>&nbsp;</Label>\r\n                                        <Input\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-primary\"\r\n                                            value=\"Create account\"\r\n                                        ></Input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Form>\r\n                </Card>\r\n            </Container>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\manage\\Account.jsx",["251","252","253","254","255","256","257"],"D:\\research-management-system\\client\\src\\components\\pages\\researches\\Publication.jsx",["258","259","260","261","262","263","264","265"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { getProposalCompleted } from \"../../../redux/actions/completed_action\";\r\n\r\nimport {\r\n    getPublication,\r\n    createPublication,\r\n    updatePublication,\r\n    deletePublication,\r\n} from \"../../../redux/actions/publication_action\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    TabContent,\r\n    TabPane,\r\n    Row,\r\n    Col,\r\n} from \"reactstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactDatatable from \"@ashvin27/react-datatable\";\r\nimport { DateTimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\r\nimport moment from \"moment\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst MODAL_TYPE = {\r\n    CRT: \"CREATE\",\r\n    UPD: \"UPDATE\",\r\n    DEL: \"DELETE\",\r\n};\r\n\r\nconst USER_TYPE = {\r\n    USR: \"user\",\r\n    ADMIN: \"admin\",\r\n    RD: \"rd\", //? research director\r\n    RH: \"rh\", //? research head\r\n    CD: \"cd\", //? campus director\r\n};\r\n\r\nconst formSchema = yup.object().shape({\r\n    research_id: yup.string().required(\"Title of research field is required.\"),\r\n    title_of_publication: yup\r\n        .string()\r\n        .required(\"Title of publication field is required.\"),\r\n    date_of_publication: yup\r\n        .mixed()\r\n        .required(\"Date of publication field is required.\")\r\n        .test(\"date_of_utilization\", \"Date of publication field is requred\", (value) => {\r\n            return value !== \"\";\r\n        }),\r\n    title_of_journal: yup\r\n        .string()\r\n        .required(\"Title of journal field is required.\"),\r\n    type_of_journal: yup\r\n        .string()\r\n        .required(\"Type of journal field is required.\"),\r\n    issn_isbn_no: yup.string().required(\"ISSN / ISBN field is required.\"),\r\n    volume_issue_no: yup.string().required(\"Volume / Issue number field is required.\"),\r\n});\r\n\r\nconst Publication = ({ currentUser }) => {\r\n    const completed = useSelector((state) => state.completed.completed);\r\n    const publication = useSelector((state) => state.publication.publications);\r\n\r\n    const dispatch = useDispatch(); // this is to dispatch actions\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n        watch,\r\n    } = useForm({\r\n        resolver: yupResolver(formSchema),\r\n    });\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n    const [publicationId, setPublicationId] = useState(null);\r\n    const [researchId, setResearchId] = useState(null);\r\n    const [titleOfResearch, setTitleOfResearch] = useState(\"\");\r\n    const [titleOfPublication, setTitleOfPublication] = useState(\"\");\r\n    const [dateOfPublication, setDateOfPublication] = useState(\"\");\r\n    const [titleOfJournal, setTitleOfJournal] = useState(\"\");\r\n    const [typeOfJournal, setTypeOfJournal] = useState(\"\");\r\n    const [issnIsbn, setIssnIsbn] = useState(\"\");\r\n    const [volumeNo, setVolumeNo] = useState(\"\");\r\n    // const [updatedAt, setUpdatedAt] = useState(new Date());\r\n    const [updatedBy, setUpdatedBy] = useState({\r\n        user_id: currentUser.id,\r\n        full_name: `${currentUser.first_name} ${currentUser.last_name}`,\r\n        user_type: currentUser.user_type,\r\n        college: currentUser.college,\r\n        campus: currentUser.campus,\r\n    });\r\n\r\n    // Datatables Configuration\r\n    const dtColumns = [\r\n        {\r\n            key: \"proposal_no\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            // width: 125  ,\r\n            cell: (publication) => {\r\n                if (publication.is_completed === \"N\") {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={() => showEditForm(publication)}\r\n                            >\r\n                                <span><i className=\"fas fa-pencil-alt\"></i> Edit</span>\r\n                            </Button>\r\n                            &nbsp;&nbsp;\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => onClickDelete(publication._id)}\r\n                            >\r\n                                <span><i className=\"fas fa-trash-alt\"></i> Remove</span>\r\n                            </Button>\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n            },\r\n        },\r\n        {\r\n            key: \"title_of_research\",\r\n            text: \"Title of Research\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"title_of_publication\",\r\n            text: \"Title of Publication\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"date_of_publication\",\r\n            text: \"Date of Publication\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (publication) => {\r\n                return (\r\n                    <React.Fragment>\r\n                        {moment(publication.date_of_publication).format(\"LL\")}\r\n                    </React.Fragment>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"\",\r\n            text: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (publication) => {\r\n                if (\r\n                    currentUser.user_type === USER_TYPE.RH ||\r\n                    currentUser.user_type === USER_TYPE.ADMIN\r\n                ) {\r\n                    if (\r\n                        publication.is_completed === \"N\" &&\r\n                        currentUser.user_type === USER_TYPE.RH\r\n                    ) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    className=\"btn btn-sm\"\r\n                                    onClick={() => {\r\n                                        onSubmitUpdateRemarks(publication._id);\r\n                                    }}\r\n                                >\r\n                                    Completed\r\n                                </Button>\r\n                                &nbsp;\r\n                            </React.Fragment>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <div className=\"badge badge-success\">\r\n                                    COMPLETED\r\n                                </div>\r\n                            </React.Fragment>\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n\r\n    const dtConfig = {\r\n        key_column: \"id\",\r\n        page_size: 10,\r\n        length_menu: [10, 20, 50],\r\n        button: {\r\n            // print: true,\r\n            extra: true,\r\n        },\r\n    };\r\n\r\n    const dtExtraButtons = [\r\n        // {\r\n        //     className: \"btn btn-primary\",\r\n        //     title: \"Print\",\r\n        //     children: [\r\n        //         <span>\r\n        //             <i\r\n        //                 className=\"glyphicon glyphicon-print fa fa-print\"\r\n        //                 aria-hidden=\"true\"\r\n        //             ></i>\r\n        //         </span>,\r\n        //     ],\r\n        //     onClick: () => {\r\n        //         alert(\"Print Logic here\");\r\n        //     },\r\n        // },\r\n        {\r\n            className: \"btn btn-primary\",\r\n            title: \"Create New\",\r\n            children: [\r\n                <span>\r\n                    <i\r\n                        className=\"fa fa-plus-circle\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    &nbsp; Create\r\n                </span>,\r\n            ],\r\n            onClick: () => {\r\n                setModal(!modal);\r\n            },\r\n        },\r\n    ];\r\n\r\n    // End of Datatables Config\r\n\r\n    useEffect(() => {\r\n        // dispatch(getProposalCompletedApproved());\r\n        dispatch(getProposalCompleted());\r\n        dispatch(getPublication());\r\n    }, [dispatch]);\r\n\r\n    const clearForm = () => {\r\n        setPublicationId(null);\r\n        setResearchId(null);\r\n        setTitleOfResearch(\"\");\r\n        setTitleOfPublication(\"\");\r\n        setDateOfPublication(\"\");\r\n        setTitleOfJournal(\"\");\r\n        setTypeOfJournal(\"\");\r\n        setIssnIsbn(\"\");\r\n        setVolumeNo(\"\");\r\n    };\r\n\r\n    const toggleModal = () => {\r\n        setModal(!modal);\r\n        clearForm();\r\n    };\r\n\r\n    const toggleTab = (tabId) => {\r\n        if (activeTab !== tabId) setActiveTab(tabId);\r\n\r\n        clearForm();\r\n    };\r\n\r\n    const showEditForm = (data) => {\r\n        const {\r\n            _id,\r\n            research_id,\r\n            title_of_research,\r\n            // title_of_publication,\r\n            date_of_publication,\r\n            title_of_journal,\r\n            type_of_journal,\r\n            issn_isbn,\r\n            volume_no,\r\n        } = data;\r\n\r\n        toggleModal();\r\n\r\n        setPublicationId(_id);\r\n        setResearchId(research_id);\r\n        setTitleOfResearch(title_of_research);\r\n        // setTitleOfPublication(title_of_publication);\r\n        setDateOfPublication(date_of_publication);\r\n        setTitleOfJournal(title_of_journal);\r\n        setTypeOfJournal(type_of_journal);\r\n        setIssnIsbn(issn_isbn);\r\n        setVolumeNo(volume_no);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        let selectedResearch = document.getElementById(\"research_id\");\r\n        let nameOfTheResearch = selectedResearch.options[selectedResearch.selectedIndex].text;\r\n\r\n        const details = {\r\n            publication_id: data.publication_id,\r\n            research_id: data.research_id,\r\n            title_of_research: nameOfTheResearch,\r\n            // title_of_publication: data.title_of_publication,\r\n            date_of_publication: data.date_of_publication,\r\n            title_of_journal: data.title_of_journal,\r\n            type_of_journal: data.type_of_journal,\r\n            issn_isbn: data.issn_isbn_no,\r\n            volume_no: data.volume_issue_no,\r\n            created_at: new Date(),\r\n            created_by: updatedBy,\r\n        };\r\n\r\n        if (!data.publication_id) {\r\n            dispatch(createPublication(details));\r\n        } else {\r\n            dispatch(updatePublication(details));\r\n        }\r\n\r\n        toggleModal();\r\n    }\r\n\r\n    // const onSubmitForm = (e) => {\r\n    //     e.preventDefault();\r\n\r\n    //     const data = {\r\n    //         publication_id: publicationId,\r\n    //         research_id: researchId,\r\n    //         title_of_research: titleOfResearch,\r\n    //         title_of_publication: titleOfPublication,\r\n    //         date_of_publication: dateOfPublication,\r\n    //         title_of_journal: titleOfJournal,\r\n    //         type_of_journal: typeOfJournal,\r\n    //         issn_isbn: issnIsbn,\r\n    //         volume_no: volumeNo,\r\n    //         created_by: updatedBy,\r\n    //     };\r\n\r\n    //     if (!publicationId) {\r\n    //         dispatch(createPublication(data));\r\n    //     } else {\r\n    //         dispatch(updatePublication(data));\r\n    //     }\r\n\r\n    //     toggleModal();\r\n    // };\r\n\r\n    const onClickDelete = (publication_id) => {\r\n        const isDelete = window.confirm(\r\n            \"Are you sure you want to delete this data?\"\r\n        );\r\n\r\n        if (isDelete) dispatch(deletePublication(publication_id));\r\n    };\r\n\r\n    const onSubmitUpdateRemarks = (publication_id) => {\r\n        const data = {\r\n            publication_id,\r\n            is_completed: \"Y\",\r\n            updated_by: updatedBy,\r\n            updated_at: new Date(),\r\n        };\r\n\r\n        const isSubmit = window.confirm(\"Are you sure you want to update?\");\r\n\r\n        if (isSubmit) {\r\n            dispatch(updatePublication(data));\r\n        }\r\n    };\r\n\r\n    const getResearchesOptions = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof completed !== undefined) {\r\n            const list_of_research = [];\r\n\r\n            for (let i = 0; i < completed.length; i++) {\r\n                let { user_id } = completed[i].created_by;\r\n                // display only the researches of the current user\r\n                if (\r\n                    (completed[i].is_completed === \"Y\" ||\r\n                        completed[i].is_completed === \"N\") &&\r\n                    user_id === currentUserId\r\n                ) {\r\n                    list_of_research.push(\r\n                        <option key={completed[i]._id} value={completed[i]._id}>\r\n                            {completed[i].title_of_research}\r\n                        </option>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return list_of_research;\r\n        }\r\n    };\r\n\r\n    const getPublications = () => {\r\n        const currentUserId = currentUser.id;\r\n        const user = [];\r\n\r\n        for (let i = 0; i < publication.length; i++) {\r\n            // Destructure some of the details\r\n            let { user_id } = publication[i].created_by;\r\n\r\n            if (user_id === currentUserId && (publication[i].is_completed === \"N\" || publication[i].is_completed === \"Y\")) {\r\n                user.push({\r\n                    _id: publication[i]._id,\r\n                    research_id: publication[i].research_id,\r\n                    title_of_research: publication[i].title_of_research,\r\n                    title_of_publication: publication[i].title_of_publication,\r\n                    date_of_publication: publication[i].date_of_publication,\r\n                    title_of_journal: publication[i].title_of_publication,\r\n                    type_of_journal: publication[i].type_of_journal,\r\n                    issn_isbn: publication[i].issn_isbn,\r\n                    volume_no: publication[i].volume_no,\r\n                    is_completed: publication[i].is_completed,\r\n                });\r\n            }\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    const getPendingPublications = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof publication !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < publication.length; i++) {\r\n                    if (publication[i].is_completed === \"N\") {\r\n                        pending.push({\r\n                            _id: publication[i]._id,\r\n                            research_id: publication[i].research_id,\r\n                            title_of_research: publication[i].title_of_research,\r\n                            title_of_publication:\r\n                                publication[i].title_of_publication,\r\n                            date_of_publication:\r\n                                publication[i].date_of_publication,\r\n                            title_of_journal:\r\n                                publication[i].title_of_publication,\r\n                            type_of_journal: publication[i].type_of_journal,\r\n                            issn_isbn: publication[i].issn_isbn,\r\n                            volume_no: publication[i].volume_no,\r\n                            is_completed: publication[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < publication.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = publication[i].created_by;\r\n\r\n                    if (\r\n                        publication[i].is_completed === \"N\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        pending.push({\r\n                            _id: publication[i]._id,\r\n                            research_id: publication[i].research_id,\r\n                            title_of_research: publication[i].title_of_research,\r\n                            title_of_publication:\r\n                                publication[i].title_of_publication,\r\n                            date_of_publication:\r\n                                publication[i].date_of_publication,\r\n                            title_of_journal:\r\n                                publication[i].title_of_publication,\r\n                            type_of_journal: publication[i].type_of_journal,\r\n                            issn_isbn: publication[i].issn_isbn,\r\n                            volume_no: publication[i].volume_no,\r\n                            is_completed: publication[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getCompletedPublications = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof completed !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < publication.length; i++) {\r\n                    if (publication[i].is_completed === \"Y\") {\r\n                        completed.push({\r\n                            _id: publication[i]._id,\r\n                            research_id: publication[i].research_id,\r\n                            title_of_research: publication[i].title_of_research,\r\n                            title_of_publication:\r\n                                publication[i].title_of_publication,\r\n                            date_of_publication:\r\n                                publication[i].date_of_publication,\r\n                            title_of_journal:\r\n                                publication[i].title_of_publication,\r\n                            type_of_journal: publication[i].type_of_journal,\r\n                            issn_isbn: publication[i].issn_isbn,\r\n                            volume_no: publication[i].volume_no,\r\n                            is_completed: publication[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < publication.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = publication[i].created_by;\r\n\r\n                    if (\r\n                        publication[i].is_completed === \"Y\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        completed.push({\r\n                            _id: publication[i]._id,\r\n                            research_id: publication[i].research_id,\r\n                            title_of_research: publication[i].title_of_research,\r\n                            title_of_publication:\r\n                                publication[i].title_of_publication,\r\n                            date_of_publication:\r\n                                publication[i].date_of_publication,\r\n                            title_of_journal:\r\n                                publication[i].title_of_publication,\r\n                            type_of_journal: publication[i].type_of_journal,\r\n                            issn_isbn: publication[i].issn_isbn,\r\n                            volume_no: publication[i].volume_no,\r\n                            is_completed: publication[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={toggleModal}\r\n                size=\"lg\"\r\n                className=\"modal-dialog font-14\"\r\n            >\r\n                <ModalHeader\r\n                    className=\"bg-primary text-light\"\r\n                    toggle={toggleModal}\r\n                >\r\n                    {!publicationId ? \"Add Publication\" : \"Update Publication\"}\r\n                </ModalHeader>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <ModalBody>\r\n                        <Container>\r\n                            <FormGroup>\r\n                                <Label for=\"\">\r\n                                    Title of Research{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    name=\"publication_id\"\r\n                                    id=\"publication_id\"\r\n                                    // value={publicationId}\r\n                                    // onChange={(e) => {\r\n                                    //     setPublicationId(e.target.value);\r\n                                    // }}\r\n                                    defaultValue={publicationId}\r\n                                    {...register(\"publication_id\")}\r\n                                ></input>\r\n                                <select\r\n                                    className={errors.research_id ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"select\"\r\n                                    name=\"research_id\"\r\n                                    id=\"research_id\"\r\n                                    // value={researchId}\r\n                                    // onChange={(e) => {\r\n                                    //     setResearchId(e.target.value);\r\n                                    //     setTitleOfResearch(\r\n                                    //         e.target.options[\r\n                                    //             e.target.selectedIndex\r\n                                    //         ].text\r\n                                    //     );\r\n                                    // }}\r\n                                    defaultValue={researchId}\r\n                                    {...register(\"research_id\")}\r\n                                >\r\n                                    <option value=\"\">Choose...</option>\r\n                                    {getResearchesOptions()}\r\n                                </select>\r\n                                <span className=\"text-danger\">\r\n                                    {errors.research_id?.message}\r\n                                </span>\r\n                            </FormGroup>\r\n                            {/* <FormGroup>\r\n                                <Label>\r\n                                    Title of Publication{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    className={errors.title_of_publication ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"text\"\r\n                                    name=\"title_of_publication\"\r\n                                    id=\"title_of_publication\"\r\n                                    defaultValue={titleOfPublication}\r\n                                    {...register(\"title_of_publication\")}\r\n                                />\r\n                                <span className=\"text-danger\">\r\n                                    {errors.title_of_publication?.message}\r\n                                </span>\r\n                            </FormGroup> */}\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Date of Publication{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <DateTimePickerComponent\r\n                                            format=\"yyyy-MM-dd\"\r\n                                            id=\"datetimepicker\"\r\n                                            value={dateOfPublication}\r\n                                            // onChange={(e) => {\r\n                                            //     setDateOfPublication(\r\n                                            //         e.target.value\r\n                                            //     );\r\n                                            // }}\r\n                                            {...register(\"date_of_publication\")}\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.date_of_publication?.message}\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>\r\n                                    Title of Journal{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    className={errors.title_of_journal ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"text\"\r\n                                    name=\"title_of_journal\"\r\n                                    id=\"title_of_journal\"\r\n                                    // value={titleOfJournal}\r\n                                    // onChange={(e) => {\r\n                                    //     setTitleOfJournal(e.target.value);\r\n                                    // }}\r\n                                    defaultValue={titleOfJournal}\r\n                                    {...register(\"title_of_journal\")}\r\n                                />\r\n                                <span className=\"text-danger\">\r\n                                    {errors.title_of_journal?.message}\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Type of Journal{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className={errors.type_of_journal ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"select\"\r\n                                            name=\"type_of_journal\"\r\n                                            id=\"type_of_journal\"\r\n                                            // value={typeOfJournal}\r\n                                            // onChange={(e) => {\r\n                                            //     setTypeOfJournal(\r\n                                            //         e.target.value\r\n                                            //     );\r\n                                            // }}\r\n                                            defaultValue={typeOfJournal}\r\n                                            {...register(\"type_of_journal\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"local\">Local</option>\r\n                                            <option value=\"national\">\r\n                                                National\r\n                                            </option>\r\n                                            <option value=\"international\">\r\n                                                International\r\n                                            </option>\r\n                                        </select>\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.type_of_journal?.message}\r\n                                        </span>\r\n                                    </Col>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            ISSN / ISBN{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={errors.issn_isbn_no ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"text\"\r\n                                            name=\"issn_isbn_no\"\r\n                                            id=\"issn_isbn_no\"\r\n                                            // value={issnIsbn}\r\n                                            // onChange={(e) => {\r\n                                            //     setIssnIsbn(e.target.value);\r\n                                            // }}\r\n                                            defaultValue={issnIsbn}\r\n                                            {...register(\"issn_isbn_no\")}\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.issn_isbn_no?.message}\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Volume / Issue No.{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={errors.volume_issue_no ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"text\"\r\n                                            name=\"volume_issue_no\"\r\n                                            id=\"volume_issue_no\"\r\n                                            // value={volumeNo}\r\n                                            // onChange={(e) => {\r\n                                            //     setVolumeNo(e.target.value);\r\n                                            // }}\r\n                                            defaultValue={volumeNo}\r\n                                            {...register(\"volume_issue_no\")}\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.volume_issue_no?.message}\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                        </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Save Changes\r\n                        </Button>\r\n                        <Button color=\"light\" onClick={toggleModal}>\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Publication\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/publication\">Publication</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 align-self-center\">\r\n                        <div className=\"customize-input float-right\">\r\n                            <select className=\"custom-select custom-select-set form-control bg-white border-0 custom-shadow custom-radius\">\r\n                                <option>2019</option>\r\n                                <option value={1}>2020</option>\r\n                                <option value={2}>2021</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            { currentUser.user_type === \"rh\" || currentUser.user_type === \"admin\" ? (<>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Nav tabs pills className=\"mb-3 font-14\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"1\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"1\");\r\n                                        }}\r\n                                    >\r\n                                        Pending\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"2\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"2\");\r\n                                        }}\r\n                                    >\r\n                                        Completed\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"1\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark\"\r\n                                        config={dtConfig}\r\n                                        records={getPendingPublications()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                                <TabPane tabId=\"2\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark\"\r\n                                        config={dtConfig}\r\n                                        records={getCompletedPublications()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                            </TabContent>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>) : (<>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <ReactDatatable\r\n                                className=\"table font-14\"\r\n                                tHeadClassName=\"thead-dark\"\r\n                                config={dtConfig}\r\n                                records={getPublications()}\r\n                                columns={dtColumns}\r\n                                extraButtons={dtExtraButtons}\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>) }\r\n            \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Publication;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Completed.jsx",["266","267","268","269","270","271"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {\r\n    getProposalCompleted,\r\n    createProposalCompleted,\r\n    updateProposalCompleted,\r\n    // updateCompleted,\r\n    updateProposalCompletedApprovedRemarks,\r\n} from \"../../../redux/actions/completed_action\";\r\n\r\nimport { getProposal } from \"../../../redux/actions/proposal_action\";\r\nimport { getAccount } from \"../../../redux/actions/account_action\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    TabContent,\r\n    TabPane,\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Progress,\r\n    Spinner,\r\n} from \"reactstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactDatatable from \"@ashvin27/react-datatable\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\n\r\nimport moment from \"moment\";\r\n// import { updateCompleted } from \"../../../../../server/controllers/completed\";\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst MODAL_TYPE = {\r\n    CRT: \"CREATE\",\r\n    UPD: \"UPDATE\",\r\n    DEL: \"DELETE\",\r\n};\r\n\r\nconst USER_TYPE = {\r\n    USR: \"user\",\r\n    ADMIN: \"admin\",\r\n    RD: \"rd\", // research director\r\n    RH: \"rh\", // research head\r\n    CD: \"cd\", // campus director\r\n};\r\n\r\nconst formSchema = yup.object().shape({\r\n    research_id: yup.string().required(\"Title of research field is required.\"),\r\n    abstract: yup.string().required(\"Abstract field is required.\"),\r\n    date_started: yup.string().required(\"Date started field is required.\"),\r\n    date_completed: yup.string().required(\"Date completed field is required.\"),\r\n    duration: yup.string().required(\"Duration field is required.\"),\r\n    \r\n    // research_id_external: yup.string().required(\"Title of research field is required.\"),\r\n    // title_of_research_external: yup.string().required(\"Title of research field is required\"),\r\n    // type_of_research_external: yup.string().required(\"Type of research field is required\"),\r\n    // source_of_funding_external: yup.string().required(\"Source of funding field is required\"),\r\n    // total_funds_external: yup.string().required(\"Total funds field is required.\"),\r\n    // abstract_external: yup.string().required(\"Abstract field is required.\"),\r\n    // date_started_external: yup.string().required(\"Date started field is required.\"),\r\n    // date_completed_external: yup.string().required(\"Date completed field is required.\"),\r\n    // duration_external: yup.string().required(\"Duration field is required.\"),\r\n    // research_file: yup\r\n    //         .mixed()\r\n    //         .test(\"name\", \"Please provide a PDF file.\", (value) => {\r\n    //             return value[0] && value[0].name !== \"\";\r\n    //         })\r\n    //         .test(\"type\", \"Incorrect file type. \", (value) => {\r\n    //             return value[0] && value[0].type === \"application/pdf\"\r\n    //         })\r\n})\r\n\r\nconst Completed = ({ currentUser }) => {\r\n    const faculty = useSelector((state) => state.account.accounts); // This is to populate proposal data\r\n    const proposal_approved = useSelector((state) => state.proposal.proposals);\r\n    const completed = useSelector((state) => state.completed.completed);\r\n\r\n    const dispatch = useDispatch(); // this is to dispatch actions\r\n\r\n    const { register, handleSubmit, formState: { errors }, reset, watch } = useForm({\r\n        resolver: yupResolver(formSchema)\r\n    });\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [modalExternal, setModalExternal] = useState(false);\r\n    const [modalPrompt, setModalPrompt] = useState(false);\r\n    const [modalType, setModalType] = useState(null);\r\n    // const [modalPdf, setModalPdf] = useState(false);\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n    const [researchId, setResearchId] = useState(null);\r\n    const [titleOfResearch, setTitleOfResearch] = useState(\"\");\r\n    const [typeOfResearch, setTypeOfResearch] = useState(\"\");\r\n    const [author, setAuthor] = useState(\"\");\r\n    const [sourceOfFunding, setSourceOfFunding] = useState(\"\");\r\n    const [nameOfAgency, setNameOfAgency] = useState(\"\");\r\n    const [dateOfCompletion, setDateOfCompletion] = useState(new Date());\r\n    const [abstract, setAbstract] = useState(\"\");\r\n    const [dateStarted, setDateStarted] = useState(\"\");\r\n    const [dateCompleted, setDateCompleted] = useState(\"\");\r\n    const [duration, setDuration] = useState(\"\");\r\n    // const [file, setFile] = useState(\"\");\r\n    // const [fileName, setFileName] = useState(\"\");\r\n    // const [filePath, setfilePath] = useState(\"\");\r\n    const [totalFunds, setTotalFunds] = useState(\"\");\r\n    const [remarks, setRemarks] = useState(\"pending\");\r\n    const [status, setStatus] = useState(\"completed\");\r\n    const [isCompleted, setIsCompleted] = useState(\"N\");\r\n    const [updatedAt, setUpdatedAt] = useState(new Date());\r\n    const [updatedBy, setUpdatedBy] = useState({\r\n        user_id: currentUser.id,\r\n        full_name: `${currentUser.first_name} ${currentUser.last_name}`,\r\n        user_type: currentUser.user_type,\r\n        college: currentUser.college,\r\n        campus: currentUser.campus,\r\n    });\r\n\r\n    // Datatables Configuration\r\n    const dtColumns = [\r\n        {\r\n            key: \"_id\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (completed) => {\r\n                if(completed.is_completed === 'N' && currentUser.user_type === USER_TYPE.RH) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => {\r\n                                    showModalPrompt(completed, MODAL_TYPE.DEL);\r\n                                }}\r\n                            >\r\n                                <span><i className=\"fas fa-trash-alt\"></i> Remove</span>\r\n                            </Button>\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n            },\r\n        },\r\n        {\r\n            key: \"title_of_research\",\r\n            text: \"Title of Research\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"abstract\",\r\n            text: \"Abstract\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"date_started\",\r\n            text: \"Started Date\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (completed) => {\r\n                return (\r\n                    <div>\r\n                        { moment(completed.date_started).format(\"LL\") }\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: \"date_completed\",\r\n            text: \"Completed Date\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (completed) => {\r\n                return (\r\n                    <div>\r\n                        { moment(completed.date_completed).format(\"LL\") }\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: \"duration\",\r\n            text: \"Duration\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"is_completed\",\r\n            text: \"Status\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (completed) => {\r\n                if(completed.is_completed === \"Y\") {\r\n                    return (\r\n                        <div className=\"badge badge-success\">Completed</div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <span className=\"badge badge-secondary\">Pending</span>\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        {\r\n            key: \"action\",\r\n            text: \"\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            cell: (completed) => {\r\n                if (currentUser.user_type === USER_TYPE.RH || currentUser.user_type === USER_TYPE.ADMIN) {\r\n                    if (completed.is_completed === \"N\" && currentUser.user_type === USER_TYPE.RH) {\r\n                        return (\r\n                            <React.Fragment key={completed._id}>\r\n                                <Link\r\n                                        className=\"btn btn-secondary\"\r\n                                        size=\"sm\"\r\n                                        to=\"#\"\r\n                                        onClick={() =>\r\n                                            showModalPrompt(\r\n                                                completed,\r\n                                                MODAL_TYPE.UPD\r\n                                            )\r\n                                        }\r\n                                    >Completed\r\n                                    </Link>\r\n                            </React.Fragment>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <React.Fragment key={completed._id}>\r\n                                <div>File here!</div>\r\n                            </React.Fragment>\r\n                        );\r\n                    }\r\n                } \r\n            },\r\n        },\r\n    ];\r\n\r\n    const dtConfig = {\r\n        key_column: \"id\",\r\n        page_size: 10,\r\n        length_menu: [10, 20, 50],\r\n        button: {\r\n            // print: true,\r\n            extra: true,\r\n        },\r\n    };\r\n\r\n    const dtExtraButtons = [\r\n        // {\r\n        //     className: \"btn btn-primary\",\r\n        //     title: \"Print\",\r\n        //     children: [\r\n        //         <span>\r\n        //             <i\r\n        //                 className=\"glyphicon glyphicon-print fa fa-print\"\r\n        //                 aria-hidden=\"true\"\r\n        //             ></i>\r\n        //         </span>,\r\n        //     ],\r\n        //     onClick: () => {\r\n        //         alert(\"Print Logic here\");\r\n        //     },\r\n        // },\r\n        {\r\n            className: \"btn btn-primary\",\r\n            title: \"Create New\",\r\n            children: [\r\n                <span>\r\n                    <i\r\n                        className=\"fa fa-file\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    {/* &nbsp; Funded */}\r\n                </span>,\r\n            ],\r\n            onClick: () => {\r\n                setModal(!modal);\r\n            },\r\n        },\r\n        {\r\n            className: \"btn btn-primary\",\r\n            title: \"Create New\",\r\n            children: [\r\n                <span>\r\n                    <i\r\n                        className=\"fa fa-share\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    {/* &nbsp; Funded */}\r\n                </span>,\r\n            ],\r\n            onClick: () => {\r\n                setModalExternal(!modalExternal);\r\n            },\r\n        },\r\n    ];\r\n\r\n    // End of Datatables Config\r\n\r\n    useEffect(() => {\r\n        dispatch(getProposal());\r\n        dispatch(getProposalCompleted());\r\n        dispatch(getAccount());\r\n    }, [dispatch]);\r\n\r\n    const clearForm = () => {\r\n        setResearchId(\"\");\r\n        setTitleOfResearch(\"\");\r\n        setTypeOfResearch(\"\");\r\n        setAuthor(\"\");\r\n        setSourceOfFunding(\"\");\r\n        setNameOfAgency(\"\");\r\n        setDateStarted(\"\");\r\n        setDateCompleted(\"\");\r\n        setDuration(\"\");\r\n    };\r\n\r\n    const toggleModal = (modal_type) => {\r\n        if (modal_type === MODAL_TYPE.CRT) {\r\n            setModal(!modal);\r\n            setModalType(MODAL_TYPE.CRT);\r\n            // clearForm();\r\n            reset({})\r\n        } else if (modal_type === MODAL_TYPE.UPD) {\r\n            setModalPrompt(!modalPrompt);\r\n            setModalType(MODAL_TYPE.UPD);\r\n        } else {\r\n            setModalPrompt(!modalPrompt);\r\n            setModalType(MODAL_TYPE.DEL);\r\n        }\r\n    };\r\n\r\n    const toggleTab = (tabId) => {\r\n        if (activeTab !== tabId) setActiveTab(tabId);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        // if(data.research_id) {\r\n        //     const formData = new FormData();\r\n        //     const details = {\r\n        //         research_id: data.research_id,\r\n        //         abstract: data.abstract,\r\n        //         file_name: data.research_file[0].name,\r\n        //         is_completed: isCompleted,\r\n        //         created_at: new Date(),\r\n        //         created_by: updatedBy\r\n        //     }\r\n\r\n        //     formData.append(\"file\", data.research_file[0]);\r\n        //     formData.append(\"data\", JSON.stringify(details));\r\n\r\n        //     dispatch(updateProposalCompleted(formData));\r\n        // }\r\n\r\n        if(data.research_id) {\r\n            const details = {\r\n                research_id: data.research_id,\r\n                abstract: data.abstract,\r\n                date_started: data.date_started,\r\n                date_completed: data.date_completed,\r\n                duration: data.duration,\r\n                is_completed: isCompleted,\r\n                created_at: new Date(),\r\n                created_by: updatedBy\r\n            }\r\n\r\n            dispatch(updateProposalCompleted(details));\r\n        }\r\n\r\n        toggleModal(MODAL_TYPE.CRT);\r\n    }\r\n\r\n    const handleSubmitCompletedProposal = (e) => {\r\n        e.preventDefault();\r\n\r\n        const authors = [];\r\n        const dateFormat = moment(dateOfCompletion).format(\"L\");\r\n        author.map((list) => authors.push(list.label));\r\n\r\n        const details = {\r\n            research_id: researchId,\r\n            title_of_research: titleOfResearch,\r\n            type_of_research: typeOfResearch,\r\n            author,\r\n            author_list: authors.join(\", \"),\r\n            source_of_funding: sourceOfFunding,\r\n            name_of_agency: nameOfAgency,\r\n            total_funds: totalFunds,\r\n            abstract: abstract,\r\n            date_started: dateStarted,\r\n            date_completed: dateCompleted,\r\n            duration: duration,\r\n            is_completed: isCompleted,\r\n            created_at: new Date(),\r\n            created_by: updatedBy\r\n        }\r\n\r\n        dispatch(createProposalCompleted(details));\r\n\r\n        setModalExternal(false);\r\n        clearForm();\r\n    }\r\n\r\n    // const onSubmitFormFunded = () => {\r\n    //     if (researchId) {\r\n    //         const formData = new FormData();\r\n    //         const data = {\r\n    //             research_id: researchId,\r\n    //             abstract,\r\n    //             file_name: fileName,\r\n    //             is_completed: isCompleted,\r\n    //             update_at: new Date(),\r\n    //             updated_by: updatedBy,\r\n    //         };\r\n\r\n    //         formData.append(\"file\", file);\r\n    //         formData.append(\"data\", JSON.stringify(data));\r\n\r\n    //         dispatch(updateProposalCompleted(formData));\r\n    //     } else {\r\n    //         const authors = [];\r\n    //         const dateFormat = moment(dateOfCompletion).format(\"L\");\r\n    //         author.map((list) => authors.push(list.label));\r\n\r\n    //         const data = {\r\n    //             research_id: researchId,\r\n    //             title_of_research: titleOfResearch,\r\n    //             type_of_research: typeOfResearch,\r\n    //             author: author,\r\n    //             author_list: authors.join(\", \"),\r\n    //             source_of_funding: sourceOfFunding,\r\n    //             date_of_completion: dateFormat,\r\n    //             abstract,\r\n    //             file_name: fileName,\r\n    //             created_at: new Date(),\r\n    //             created_by: updatedBy,\r\n    //             updated_at: new Date(),\r\n    //             updated_by: updatedBy,\r\n    //         };\r\n\r\n    //         dispatch(createProposalCompleted(data));\r\n    //     }\r\n\r\n    //     toggleModal(MODAL_TYPE.CRT);\r\n    // };\r\n\r\n    const showModalPrompt = (completed, modal_type) => {\r\n        // UPDATE status modal will appear.\r\n        if (modal_type === MODAL_TYPE.UPD) {\r\n            setResearchId(completed._id);\r\n            setIsCompleted(\"Y\");\r\n            setDateOfCompletion(new Date());\r\n            setUpdatedAt(new Date());\r\n            setRemarks(remarks);\r\n\r\n            toggleModal(MODAL_TYPE.UPD);\r\n        }\r\n\r\n        // DELETE modal will appear\r\n        if (modal_type === MODAL_TYPE.DEL) {\r\n            setResearchId(completed._id);\r\n            setIsCompleted(null);\r\n            setDateOfCompletion(null);\r\n            setUpdatedAt(new Date());\r\n\r\n            toggleModal(MODAL_TYPE.DEL);\r\n        }\r\n    };\r\n\r\n    const onSubmitUpdateStatusOrDelete = (modal_type) => {\r\n        const data = {\r\n            research_id: researchId,\r\n            is_completed: isCompleted,\r\n            date_completed: dateOfCompletion,\r\n            updated_at: updatedAt,\r\n            updated_by: updatedBy,\r\n        };\r\n\r\n        if (modal_type === MODAL_TYPE.UPD) {\r\n            dispatch(updateProposalCompletedApprovedRemarks(data));\r\n        } else if (modal_type === MODAL_TYPE.DEL) {\r\n            dispatch(updateProposalCompletedApprovedRemarks(data));\r\n        }\r\n\r\n        toggleModal(\r\n            modal_type === MODAL_TYPE.DEL ? MODAL_TYPE.DEL : MODAL_TYPE.UPD\r\n        );\r\n    };\r\n\r\n    const getAuthorsOption = () => {\r\n        const authors = [];\r\n\r\n        for (let i = 0; i < faculty.length; i++)\r\n            authors.push({\r\n                value: faculty[i]._id,\r\n                label: faculty[i].full_name,\r\n            });\r\n\r\n        return authors;\r\n    };\r\n\r\n    const getUserCompleted = () => {\r\n        const currentUserId = currentUser.id;\r\n        const user = [];\r\n\r\n        for (let i = 0; i < completed.length; i++) {\r\n            // Destructure some of the details\r\n            let { user_id } = completed[i].created_by;\r\n\r\n            if (user_id === currentUserId && (completed[i].is_completed === \"N\" || completed[i].is_completed === \"Y\")) {\r\n                user.push({\r\n                    _id: completed[i]._id,\r\n                    title_of_research: completed[i].title_of_research,\r\n                    type_of_research: completed[i].type_of_research,\r\n                    abstract: completed[i].abstract,\r\n                    author: completed[i].author,\r\n                    author_list: completed[i].author_list,\r\n                    source_of_funding: completed[i].source_of_funding,\r\n                    // date_of_completion: completed[i].date_of_completion,\r\n                    date_started: completed[i].date_started,\r\n                    date_completed: completed[i].date_completed,\r\n                    duration: completed[i].duration,\r\n                    file_name: completed[i].file_name,\r\n                    is_completed: completed[i].is_completed,\r\n                });\r\n            }\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    // Displays only the researches of the current user.\r\n    const getResearchesOptions = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof proposal_approved !== undefined) {\r\n            const list_of_research = [];\r\n\r\n            for (let i = 0; i < proposal_approved.length; i++) {\r\n                let { user_id } = proposal_approved[i].created_by;\r\n\r\n                if (\r\n                    proposal_approved[i].remarks === \"approved\" &&\r\n                    proposal_approved[i].is_completed !== \"N\" &&\r\n                    proposal_approved[i].is_completed !== \"Y\" &&\r\n                    user_id === currentUserId\r\n                ) {\r\n                    list_of_research.push(\r\n                        <option\r\n                            key={proposal_approved[i]._id}\r\n                            value={proposal_approved[i]._id}\r\n                        >\r\n                            {proposal_approved[i].title_of_research}\r\n                        </option>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return list_of_research;\r\n        }\r\n    };\r\n\r\n    const getPendingProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof completed !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < completed.length; i++) {\r\n                    if (completed[i].is_completed === \"N\") {\r\n                        pending.push({\r\n                            _id: completed[i]._id,\r\n                            title_of_research: completed[i].title_of_research,\r\n                            type_of_research: completed[i].type_of_research,\r\n                            abstract: completed[i].abstract,\r\n                            author: completed[i].author,\r\n                            author_list: completed[i].author_list,\r\n                            source_of_funding: completed[i].source_of_funding,\r\n                            date_of_completion: completed[i].date_of_completion,\r\n                            file_name: completed[i].file_name,\r\n                            is_completed: completed[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < completed.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = completed[i].created_by;\r\n\r\n                    if (\r\n                        completed[i].is_completed === \"N\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        pending.push({\r\n                            _id: completed[i]._id,\r\n                            title_of_research: completed[i].title_of_research,\r\n                            type_of_research: completed[i].type_of_research,\r\n                            abstract: completed[i].abstract,\r\n                            author: completed[i].author,\r\n                            author_list: completed[i].author_list,\r\n                            source_of_funding: completed[i].source_of_funding,\r\n                            date_of_completion: completed[i].date_of_completion,\r\n                            file_name: completed[i].file_name,\r\n                            is_completed: completed[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getCompletedProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof completed !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const complete = [];\r\n\r\n                for (let i = 0; i < completed.length; i++) {\r\n                    if (completed[i].is_completed === \"Y\") {\r\n                        complete.push({\r\n                            _id: completed[i]._id,\r\n                            title_of_research: completed[i].title_of_research,\r\n                            type_of_research: completed[i].type_of_research,\r\n                            abstract: completed[i].abstract,\r\n                            author: completed[i].author,\r\n                            author_list: completed[i].author_list,\r\n                            source_of_funding: completed[i].source_of_funding,\r\n                            date_of_completion: completed[i].date_of_completion,\r\n                            file_name: completed[i].file_name,\r\n                            is_completed: completed[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return complete;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const complete = [];\r\n\r\n                for (let i = 0; i < completed.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = completed[i].created_by;\r\n\r\n                    if (\r\n                        completed[i].is_completed === \"Y\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        complete.push({\r\n                            _id: completed[i]._id,\r\n                            title_of_research: completed[i].title_of_research,\r\n                            type_of_research: completed[i].type_of_research,\r\n                            abstract: completed[i].abstract,\r\n                            author: completed[i].author,\r\n                            author_list: completed[i].author_list,\r\n                            source_of_funding: completed[i].source_of_funding,\r\n                            date_of_completion: completed[i].date_of_completion,\r\n                            file_name: completed[i].file_name,\r\n                            is_completed: completed[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return complete;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar={true}\r\n                newestOnTop={false}\r\n                closeOnClick={true}\r\n                rtl={false}\r\n                pauseOnFocusLoss={true}\r\n                draggable={true}\r\n                pauseOnHover={true}\r\n            />\r\n\r\n            <Modal\r\n                isOpen={modalPrompt}\r\n                toggle={() => toggleModal(MODAL_TYPE.DEL)}\r\n                className=\"modal-dialogue\"\r\n            >\r\n                <ModalHeader\r\n                    className={\r\n                        modalType === MODAL_TYPE.DEL\r\n                            ? \"bg-danger text-light\"\r\n                            : \"bg-primary text-light\"\r\n                    }\r\n                    toggle={() => toggleModal(MODAL_TYPE.DEL)}\r\n                >\r\n                    {modalType === MODAL_TYPE.DEL ? \"Delete\" : \"Update Status\"}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <Label>\r\n                        {modalType === MODAL_TYPE.DEL\r\n                            ? \"Are you sure do you want to delete this data?\"\r\n                            : \"Are you sure you want to update the status?\"}\r\n                    </Label>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color={\r\n                            modalType === MODAL_TYPE.DEL ? \"danger\" : \"primary\"\r\n                        }\r\n                        onClick={() =>\r\n                            onSubmitUpdateStatusOrDelete(\r\n                                modalType === MODAL_TYPE.DEL\r\n                                    ? MODAL_TYPE.DEL\r\n                                    : MODAL_TYPE.UPD\r\n                            )\r\n                        }\r\n                    >\r\n                        {modalType === MODAL_TYPE.DEL ? \"Delete\" : \"Update\"}\r\n                    </Button>\r\n                    <Button\r\n                        color=\"light\"\r\n                        onClick={() => toggleModal(MODAL_TYPE.DEL)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n            {/* create modal */}\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={() => toggleModal(MODAL_TYPE.CRT)}\r\n                size=\"lg\"\r\n                className=\"modal-dialog font-14\"\r\n            >\r\n                <ModalHeader\r\n                    className=\"bg-primary text-light\"\r\n                    toggle={() => toggleModal(MODAL_TYPE.CRT)}\r\n                >\r\n                    {!researchId ? \"Add Completed\" : \"Update Completed\"}\r\n                </ModalHeader>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <ModalBody>\r\n                        <Container>\r\n                            {/* <Nav tabs pills className=\"mb-3\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"1\" ? \"active\" : \"\"\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"1\");\r\n                                        }}\r\n                                    >\r\n                                        Funded\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"2\" ? \"active\" : \"\"\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"2\");\r\n                                        }}\r\n                                    >\r\n                                        External\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav> */}\r\n                            {/* <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"1\"> */}\r\n                                    <FormGroup>\r\n                                        <Label for=\"\">\r\n                                            Title of Research{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className={errors.research_id && activeTab === 1 ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"select\"\r\n                                            name=\"research_id\"\r\n                                            id=\"research_id\"\r\n                                            defaultValue={researchId}\r\n                                            {...register(\"research_id\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            {getResearchesOptions()}\r\n                                        </select>\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.research_id?.message && activeTab === 1}\r\n                                        </span>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                            Abstract{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <textarea\r\n                                            className={errors.abstract ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            rows=\"6\"\r\n                                            type=\"textarea\"\r\n                                            name=\"abstract\"\r\n                                            id=\"abstract\"\r\n                                            defaultValue={abstract}\r\n                                            {...register(\"abstract\")}\r\n                                        ></textarea>\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.abstract?.message}\r\n                                        </span>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Date Started</Label>\r\n                                        <input\r\n                                            id=\"date_started\" \r\n                                            name=\"date_started\" \r\n                                            className=\"form-control\" \r\n                                            type=\"date\"\r\n                                            defaultValue={dateStarted}\r\n                                            {...register(\"date_started\")} \r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.date_started?.message}\r\n                                        </span>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Date Completed</Label>\r\n                                        <input \r\n                                            id=\"date_completed\"\r\n                                            name=\"date_completed\"\r\n                                            className=\"form-control\" \r\n                                            type=\"date\" \r\n                                            defaultValue={dateCompleted}\r\n                                            {...register(\"date_completed\")}\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.date_completed?.message}\r\n                                        </span>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Duration</Label>\r\n                                        <input\r\n                                            id=\"duration\" \r\n                                            name=\"duration\" \r\n                                            className=\"form-control\" \r\n                                            type=\"text\"\r\n                                            defaultValue={duration}\r\n                                            {...register(\"duration\")}\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.duration?.message}\r\n                                        </span>\r\n                                    </FormGroup>\r\n                                    {/* <FormGroup>\r\n                                        <Label className=\"badge badge-danger text-white float-left\">\r\n                                            <b>Note:</b> Upload only PDF files.\r\n                                        </Label>\r\n                                        <br />\r\n                                        <div className=\"input-group mb-2\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                name=\"research_file\"\r\n                                                className={errors.research_file ? \"is-invalid form-control\" : \"form-control\" }\r\n                                                {...register(\"research_file\")}\r\n                                            /><br />\r\n                                        </div>\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.research_file?.message}\r\n                                        </span>\r\n                                    </FormGroup> */}\r\n                                {/* </TabPane> */}\r\n                                {/* <TabPane tabId=\"2\"> */}\r\n                                    \r\n                                {/* </TabPane>\r\n                            </TabContent> */}\r\n                        </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter className=\"mt-3\">\r\n                        <Button\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Save Changes\r\n                        </Button>\r\n                        <Button\r\n                            color=\"light\"\r\n                            onClick={() => toggleModal(MODAL_TYPE.CRT)}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <Modal\r\n                isOpen={modalExternal}\r\n                toggle={() => setModalExternal(false)}\r\n                size=\"lg\"\r\n                className=\"modal-dialog font-14\"\r\n            >\r\n                <ModalHeader\r\n                    className=\"bg-primary text-light\"\r\n                    toggle={() => setModalExternal(false)}\r\n                >\r\n                    Add External Completed\r\n                </ModalHeader>\r\n                <Form onSubmit={handleSubmitCompletedProposal}>\r\n                    <ModalBody>\r\n                        <Container>\r\n                            <FormGroup>\r\n                                <Input\r\n                                    type=\"hidden\"\r\n                                    name=\"research_id\"\r\n                                    id=\"research_id\"\r\n                                    // defaultValue={researchId}\r\n                                    // {...register(\"research_id_external\")}\r\n                                    value={researchId}\r\n                                    onChange={(e) => { setResearchId(e.target.value) }}\r\n                                />\r\n                                <Label for=\"\">\r\n                                    Title of Research{\" \"}\r\n                                    <span className=\"text-danger\">\r\n                                        *\r\n                                    </span>\r\n                                </Label>\r\n                                <Input\r\n                                    // className={\r\n                                    //     errors.title_of_research_external\r\n                                    //         ? \"is-invalid form-control\"\r\n                                    //         : \"form-control\"\r\n                                    // }\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"title_of_research\"\r\n                                    id=\"title_of_research\"\r\n                                    value={titleOfResearch}\r\n                                    onChange={(e) => { setTitleOfResearch(e.target.value) }}\r\n                                    // defaultValue={titleOfResearch}\r\n                                    // {...register(\"title_of_research_external\")}\r\n                                />\r\n\r\n                                {/* <small className=\"text-danger\">\r\n                                    {errors.title_of_research_external?.message}\r\n                                </small> */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"\">\r\n                                    Type of Research{\" \"}\r\n                                    <span className=\"text-danger\">\r\n                                        *\r\n                                    </span>\r\n                                </Label>\r\n                                <select\r\n                                    // className={\r\n                                    //     errors.type_of_research_external\r\n                                    //         ? \"is-invalid form-control\"\r\n                                    //         : \"form-control\"\r\n                                    // }\r\n                                    className=\"form-control\"\r\n                                    type=\"select\"\r\n                                    name=\"type_of_research\"\r\n                                    id=\"type_of_research\"\r\n                                    value={typeOfResearch}\r\n                                    onChange={(e) => { setTypeOfResearch(e.target.value) }}\r\n                                    // defaultValue={typeOfResearch}\r\n                                    // {...register(\"type_of_research_external\")}\r\n                                >\r\n                                    <option value=\"\">Choose...</option>\r\n                                    <option value=\"descriptive\">\r\n                                        Descriptive\r\n                                    </option>\r\n                                    <option value=\"developmental\">\r\n                                        Developmental\r\n                                    </option>\r\n                                    <option value=\"experimental\">\r\n                                        Experimental\r\n                                    </option>\r\n                                    <option value=\"modelling\">Modelling</option>\r\n                                    <option value=\"others\">Others</option>\r\n                                </select>\r\n                                {/* <small className=\"text-danger\">\r\n                                    {errors.type_of_research_external?.message}\r\n                                </small> */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"\">\r\n                                    Author(s){\" \"}\r\n                                    <span className=\"text-danger\">\r\n                                        *\r\n                                    </span>\r\n                                </Label>\r\n                                <Select\r\n                                    closeMenuOnSelect={false}\r\n                                    components={animatedComponents}\r\n                                    isMulti\r\n                                    options={getAuthorsOption()}\r\n                                    name=\"author\"\r\n                                    value={author}\r\n                                    onChange={setAuthor}\r\n                                    required\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label for=\"\">\r\n                                            Source of Funding{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            // className={\r\n                                            //     errors.source_of_funding_external\r\n                                            //         ? \"is-invalid form-control\"\r\n                                            //         : \"form-control\"\r\n                                            // }\r\n                                            className=\"form-control\"\r\n                                            type=\"select\"\r\n                                            name=\"source_of_funding\"\r\n                                            id=\"source_of_funding\"\r\n                                            // defaultValue={sourceOfFunding}\r\n                                            // {...register(\"source_of_funding_external\")}\r\n                                            value={sourceOfFunding}\r\n                                            onChange={(e) => { setSourceOfFunding(e.target.value) }}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"stf\">STF</option>\r\n                                            <option value=\"gaa\">GAA</option>\r\n                                            <option value=\"external\">\r\n                                                External\r\n                                            </option>\r\n                                            <option value=\"personal\">\r\n                                                Personal\r\n                                            </option>\r\n                                        </select>\r\n                                        {/* <small className=\"text-danger\">\r\n                                            {errors.source_of_funding_external?.message}\r\n                                        </small> */}\r\n                                    </Col>\r\n                                    <Col md=\"6\">\r\n                                        <Label for=\"\">\r\n                                            {sourceOfFunding ===\r\n                                            \"external\"\r\n                                                ? \"Name of Agency\"\r\n                                                : \"\"}\r\n                                        </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type={\r\n                                                watch(\"source_of_funding\") ===\r\n                                                \"external\"\r\n                                                    ? \"text\"\r\n                                                    : \"hidden\"\r\n                                            }\r\n                                            name=\"name_of_agency\"\r\n                                            id=\"name_of_agency\"\r\n                                            value={nameOfAgency}\r\n                                            onChange={(e) => { setNameOfAgency(e.target.value) }}\r\n                                            // {...register(\"name_of_agency\")}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label for=\"\">\r\n                                            Total Funds{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={\r\n                                                errors.total_funds_external\r\n                                                    ? \"is-invalid form-control\"\r\n                                                    : \"form-control\"\r\n                                            }\r\n                                            name=\"total_funds\"\r\n                                            id=\"total_funds\"\r\n                                            value={totalFunds}\r\n                                            onChange={(e) => { setTotalFunds(e.target.value) }}\r\n                                            // defaultValue={totalFunds}\r\n                                            // {...register(\"total_funds_external\")}\r\n                                        />\r\n                                        {/* <small className=\"text-danger\">\r\n                                            {errors.total_funds_external?.message}\r\n                                        </small> */}\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>\r\n                                    Abstract{\" \"}\r\n                                    <span className=\"text-danger\">\r\n                                        *\r\n                                    </span>\r\n                                </Label>\r\n                                <textarea\r\n                                    // className={errors.abstract_external ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    className=\"form-control\"\r\n                                    rows=\"6\"\r\n                                    type=\"textarea\"\r\n                                    name=\"abstract\"\r\n                                    id=\"abstract\"\r\n                                    value={abstract}\r\n                                    onChange={(e) => { setAbstract(e.target.value) }}\r\n                                    // defaultValue={abstract}\r\n                                    // {...register(\"abstract_external\")}\r\n                                ></textarea>\r\n                                {/* <span className=\"text-danger\">\r\n                                    {errors.abstract_external?.message}\r\n                                </span> */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Date Started</Label>\r\n                                <input\r\n                                    // className={errors.date_started_external ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    className=\"form-control\"\r\n                                    id=\"date_started\" \r\n                                    name=\"date_started\" \r\n                                    type=\"date\"\r\n                                    value={dateStarted}\r\n                                    onChange={(e) => { setDateStarted(e.target.value) }}\r\n                                    // defaultValue={dateStarted}\r\n                                    // {...register(\"date_started_external\")} \r\n                                />\r\n                                <span className=\"text-danger\">\r\n                                    {errors.date_started_external?.message}\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Date Completed</Label>\r\n                                <input \r\n                                    // className={errors.date_completed_external ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    className=\"form-control\"\r\n                                    id=\"date_completed\"\r\n                                    name=\"date_completed\"\r\n                                    type=\"date\" \r\n                                    value={dateCompleted}\r\n                                    onChange={(e) => setDateCompleted(e.target.value) }\r\n                                    // defaultValue={dateCompleted}\r\n                                    // {...register(\"date_completed_external\")}\r\n                                />\r\n                                {/* <span className=\"text-danger\">\r\n                                    {errors.date_completed_external?.message}\r\n                                </span> */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Duration</Label>\r\n                                <input\r\n                                    // className={errors.duration_external ? \"is-invalid form-control\" : \"form-control\" } \r\n                                    className=\"form-control\"\r\n                                    id=\"duration\" \r\n                                    name=\"duration\" \r\n                                    type=\"text\"\r\n                                    value={duration}\r\n                                    onChange={(e) => setDuration(e.target.value)}\r\n                                    // defaultValue={duration}\r\n                                    // {...register(\"duration_external\")}\r\n                                />\r\n                                {/* <span className=\"text-danger\">\r\n                                    {errors.duration_external?.message}\r\n                                </span> */}\r\n                            </FormGroup>\r\n                        </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Save External\r\n                        </Button>\r\n                        <Button\r\n                            color=\"light\"\r\n                            onClick={() => setModalExternal(false)}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Completed\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/completed\">Completed</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 align-self-center\">\r\n                        <div className=\"customize-input float-right\">\r\n                            <select className=\"custom-select custom-select-set form-control bg-white border-0 custom-shadow custom-radius\">\r\n                                <option>2019</option>\r\n                                <option value={1}>2020</option>\r\n                                <option value={2}>2021</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            { currentUser.user_type === \"rh\" || currentUser.user_type === \"rh\" ? (\r\n            <>\r\n                <Container fluid>\r\n                    <Alert color=\"warning\">\r\n                        <h4 className=\"alert-heading font-weight-bold\">\r\n                            Reminders!\r\n                        </h4>\r\n                        <p>\r\n                            Be sure to submit the hard copy of your completed\r\n                            research to your respective research coordinator.\r\n                        </p>\r\n                    </Alert>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Nav tabs pills className=\"mb-3 font-14 text-dark\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"1\" ? \"active\" : \"\"\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"1\");\r\n                                        }}\r\n                                    >\r\n                                        Pending\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"2\" ? \"active\" : \"\"\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"2\");\r\n                                        }}\r\n                                    >\r\n                                        Completed\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"1\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                        config={dtConfig}\r\n                                        records={getPendingProposal()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                                <TabPane tabId=\"2\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                        config={dtConfig}\r\n                                        records={getCompletedProposal()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                            </TabContent>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>) : (\r\n            <>\r\n                <Container fluid>\r\n                    <Alert color=\"warning\">\r\n                        <h4 className=\"alert-heading font-weight-bold\">\r\n                            Reminders!\r\n                        </h4>\r\n                        <p>\r\n                            Be sure to submit the hard copy of your completed\r\n                            research to your respective research coordinator.\r\n                        </p>\r\n                    </Alert>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <ReactDatatable\r\n                                className=\"table font-14\"\r\n                                tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                config={dtConfig}\r\n                                records={getUserCompleted()}\r\n                                columns={dtColumns}\r\n                                extraButtons={dtExtraButtons}\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>\r\n            )}\r\n\r\n            \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Completed;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Presentation.jsx",["272","273","274","275","276","277","278","279","280","281","282","283","284","285"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {\r\n    getPresentation,\r\n    createPresentation,\r\n    updatePresentation,\r\n    deletePresentation,\r\n} from \"../../../redux/actions/presentation_action\";\r\n\r\nimport { getProposalCompleted } from \"../../../redux/actions/completed_action\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    TabContent,\r\n    TabPane,\r\n    Row,\r\n    Col,\r\n} from \"reactstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { FaCheck, FaLessThanEqual } from \"react-icons/fa\";\r\nimport ReactDatatable from \"@ashvin27/react-datatable\";\r\nimport { DateTimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\r\nimport moment from \"moment\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst MODAL_TYPE = {\r\n    CRT: \"CREATE\",\r\n    UPD: \"UPDATE\",\r\n    DEL: \"DELETE\",\r\n};\r\n\r\nconst USER_TYPE = {\r\n    USR: \"user\",\r\n    ADMIN: \"admin\",\r\n    RD: \"rd\", // research director\r\n    RH: \"rh\", // research head\r\n    CD: \"cd\", // campus director\r\n};\r\n\r\nconst formSchema = yup.object().shape({\r\n    research_id: yup.string().required(\"Title of research field is required.\"),\r\n    presentor: yup.string().required(\"Presentor field is required.\"),\r\n    date_presented: yup.date().required(\"Date presented field is required.\"),\r\n    title_of_forum: yup.string().required(\"Title of forum field is required.\"),\r\n    type_of_forum: yup.string().required(\"Type of forum field is required.\"),\r\n    venue_of_forum: yup.string().required(\"Venue of forum field is required.\"),\r\n})\r\n\r\nconst Presentation = ({ currentUser }) => {\r\n    const presentation = useSelector((state) => state.presentation.presentations); // This is to populate department data\r\n    const completed = useSelector((state) => state.completed.completed); // This is to populate department data\r\n\r\n    const dispatch = useDispatch(); // this is to dispatch actions\r\n\r\n    const { register, handleSubmit, formState: { errors }, reset, watch } = useForm({\r\n        resolver: yupResolver(formSchema)\r\n    });\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [modalPrompt, setModalPrompt] = useState(false);\r\n    const [modalType, setModaType] = useState(null);\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n    const [presentationId, setPresentationId] = useState(null);\r\n    const [researchId, setResearchId] = useState(null);\r\n    const [titleOfResearch, setTitleOfResearch] = useState(\"\");\r\n    const [presentor, setPresentor] = useState(\"\");\r\n    const [datePresented, setDatePresented] = useState(new Date());\r\n    const [typeOfForum, setTypeOfForum] = useState(\"\");\r\n    const [venueOfForum, setVenueOfForum] = useState(\"\");\r\n    const [titleOfForum, setTitleOfForum] = useState(\"\");\r\n    const [updatedAt, setUpdatedAt] = useState(new Date());\r\n    const [updatedBy, setUpdatedBy] = useState({\r\n        user_id: currentUser.id,\r\n        full_name: `${currentUser.first_name} ${currentUser.last_name}`,\r\n        user_type: currentUser.user_type,\r\n        college: currentUser.college,\r\n        campus: currentUser.campus,\r\n    });\r\n\r\n    // Datatables Configuration\r\n    const dtColumns = [\r\n        {\r\n            key: \"_id\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            // width: 100,\r\n            cell: (presentation) => {\r\n                if (presentation.is_completed === \"N\") {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={() => showEditForm(presentation)}\r\n                            >\r\n                                <span><i className=\"fas fa-pencil-alt\"></i> Edit</span>\r\n                            </Button>\r\n                            &nbsp;&nbsp;\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => onClickDelete(presentation._id)}\r\n                            >\r\n                                <span><i className=\"fas fa-trash-alt\"></i> Remove</span>\r\n                            </Button>\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n            },\r\n        },\r\n        {\r\n            key: \"title_of_research\",\r\n            text: \"Title of Research\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"presentor\",\r\n            text: \"Presentor\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"date_presented\",\r\n            text: \"Date Presented\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (presentation) => {\r\n                return (\r\n                    <React.Fragment>\r\n                        {moment(presentation.date_presented).format(\"LL\")}\r\n                    </React.Fragment>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"\",\r\n            text: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (presentation) => {\r\n                if (\r\n                    currentUser.user_type === USER_TYPE.RH ||\r\n                    currentUser.user_type === USER_TYPE.ADMIN\r\n                ) {\r\n                    if (\r\n                        presentation.is_completed === \"N\" &&\r\n                        currentUser.user_type === USER_TYPE.RH\r\n                    ) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    className=\"btn btn-sm\"\r\n                                    onClick={() => {\r\n                                        onSubmitUpdateRemarks(presentation._id);\r\n                                    }}\r\n                                >\r\n                                    Completed\r\n                                </Button>\r\n                                &nbsp;\r\n                            </React.Fragment>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <div className=\"badge badge-success\">\r\n                                    COMPLETED\r\n                                </div>\r\n                            </React.Fragment>\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n\r\n    const dtConfig = {\r\n        key_column: \"id\",\r\n        page_size: 10,\r\n        length_menu: [10, 20, 50],\r\n        button: {\r\n            // print: true,\r\n            extra: true,\r\n        },\r\n    };\r\n\r\n    const dtExtraButtons = [\r\n        // {\r\n        //     className: \"btn btn-primary\",\r\n        //     title: \"Print\",\r\n        //     children: [\r\n        //         <span>\r\n        //             <i\r\n        //                 className=\"glyphicon glyphicon-print fa fa-print\"\r\n        //                 aria-hidden=\"true\"\r\n        //             ></i>\r\n        //         </span>,\r\n        //     ],\r\n        //     onClick: () => {\r\n        //         alert(\"Print Logic here\");\r\n        //     },\r\n        // },\r\n        {\r\n            className: \"btn btn-primary\",\r\n            title: \"Create New\",\r\n            children: [\r\n                <span>\r\n                    <i\r\n                        className=\"fa fa-plus-circle\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    &nbsp; Create\r\n                </span>,\r\n            ],\r\n            onClick: () => {\r\n                setModal(!modal);\r\n            },\r\n        },\r\n    ];\r\n\r\n    // End of Datatables Config\r\n\r\n    useEffect(() => {\r\n        dispatch(getPresentation());\r\n        dispatch(getProposalCompleted());\r\n        // dispatch(getProposalCompletedApproved());\r\n        // dispatch(getProposalCompletedApprovedByResearchId(researchId));\r\n    }, [dispatch]);\r\n\r\n    const clearForm = () => {\r\n        setPresentationId(null);\r\n        setResearchId(null);\r\n        setTitleOfResearch(\"\");\r\n        setPresentor(\"\");\r\n        setTypeOfForum(\"\");\r\n        setVenueOfForum(\"\");\r\n        setTitleOfForum(\"\");\r\n    };\r\n\r\n    const toggleModal = () => {\r\n        setModal(!modal);\r\n        reset({})\r\n        // clearForm();\r\n    };\r\n\r\n    const toggleTab = (tabId) => {\r\n        if (activeTab !== tabId) setActiveTab(tabId);\r\n\r\n        clearForm();\r\n    };\r\n\r\n    const showEditForm = (data) => {\r\n        const {\r\n            _id,\r\n            research_id,\r\n            title_of_research,\r\n            presentor,\r\n            date_presented,\r\n            type_of_forum,\r\n            venue_of_forum,\r\n            title_of_forum,\r\n        } = data;\r\n\r\n        toggleModal();\r\n\r\n        setPresentationId(_id);\r\n        setResearchId(research_id);\r\n        setTitleOfResearch(title_of_research);\r\n        setPresentor(presentor);\r\n        setDatePresented(moment(date_presented).format(\"L\"));\r\n        setTypeOfForum(type_of_forum);\r\n        setVenueOfForum(venue_of_forum);\r\n        setTitleOfForum(title_of_forum);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        let selectedResearch = document.getElementById(\"research_id\");\r\n        let titleOfTheResearch = selectedResearch.options[selectedResearch.selectedIndex].text;\r\n\r\n        const details = {\r\n            presentation_id: data.presentation_id,\r\n            research_id: data.research_id,\r\n            title_of_research: titleOfTheResearch,\r\n            presentor: data.presentor,\r\n            date_presented: data.date_presented,\r\n            type_of_forum: data.type_of_forum,\r\n            venue_of_forum: data.venue_of_forum,\r\n            title_of_forum: data.title_of_forum,\r\n            created_at: new Date(),\r\n            created_by: updatedBy,\r\n        };\r\n\r\n        if (!data.presentation_id) {\r\n            dispatch(createPresentation(details));\r\n        } else {\r\n            dispatch(updatePresentation(details));\r\n        }\r\n\r\n        toggleModal();\r\n    }\r\n\r\n    const onSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = {\r\n            presentation_id: presentationId,\r\n            research_id: researchId,\r\n            title_of_research: titleOfResearch,\r\n            presentor: presentor,\r\n            date_presented: datePresented,\r\n            type_of_forum: typeOfForum,\r\n            venue_of_forum: venueOfForum,\r\n            title_of_forum: titleOfForum,\r\n            created_at: new Date(),\r\n            created_by: updatedBy,\r\n        };\r\n\r\n        if (!presentationId) {\r\n            dispatch(createPresentation(data));\r\n        } else {\r\n            dispatch(updatePresentation(data));\r\n        }\r\n\r\n        toggleModal();\r\n    };\r\n\r\n    const onClickDelete = (presentation_id) => {\r\n        const isDelete = window.confirm(\r\n            \"Are you sure you want to delete this data?\"\r\n        );\r\n\r\n        if (isDelete) dispatch(deletePresentation(presentation_id));\r\n    };\r\n\r\n    const getResearchesOptions = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (completed !== undefined) {\r\n            const list_of_research = [];\r\n\r\n            for (let i = 0; i < completed.length; i++) {\r\n                let { user_id } = completed[i].created_by;\r\n\r\n                if (completed[i].is_completed === \"Y\" && user_id === currentUserId) {\r\n                    list_of_research.push(\r\n                        <option \r\n                            key={completed[i]._id} \r\n                            value={completed[i]._id}\r\n                            >\r\n                            {completed[i].title_of_research}\r\n                        </option>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return list_of_research;\r\n        }\r\n    };\r\n\r\n    const getPresentorsOptions = (research_id) => {\r\n        const list_of_presentor = [];\r\n\r\n        if (research_id !== \"\") {\r\n            for (let i = 0; i < completed.length; i++) {\r\n                if (completed[i]._id === research_id) {\r\n                    for (let j = 0; j < completed[i].author.length; j++) {\r\n                        list_of_presentor.push(\r\n                            <option\r\n                                key={completed[i].author[j].value}\r\n                                value={completed[i].author[j].label}\r\n                            >\r\n                                {completed[i].author[j].label}\r\n                            </option>\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return list_of_presentor;\r\n    };\r\n\r\n    const getPresentations = () => {\r\n        const currentUserId = currentUser.id;\r\n        const user = [];\r\n\r\n        for (let i = 0; i < presentation.length; i++) {\r\n            // Destructure some of the details\r\n            let { user_id } = presentation[i].created_by;\r\n\r\n            if (user_id === currentUserId && (presentation[i].is_completed === \"N\" || presentation[i].is_completed === \"Y\")) {\r\n                user.push({\r\n                    _id: presentation[i]._id,\r\n                    research_id: presentation[i].research_id,\r\n                    title_of_research: presentation[i].title_of_research,\r\n                    presentor: presentation[i].presentor,\r\n                    date_presented: presentation[i].date_presented,\r\n                    title_of_forum: presentation[i].title_of_forum,\r\n                    type_of_forum: presentation[i].type_of_forum,\r\n                    venue_of_forum: presentation[i].venue_of_forum,\r\n                    is_completed: presentation[i].is_completed,\r\n                });\r\n            }\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    const getPendingPresentations = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof presentation !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < presentation.length; i++) {\r\n                    if (presentation[i].is_completed === \"N\") {\r\n                        pending.push({\r\n                            _id: presentation[i]._id,\r\n                            research_id: presentation[i].research_id,\r\n                            title_of_research: presentation[i].title_of_research,\r\n                            presentor: presentation[i].presentor,\r\n                            date_presented: presentation[i].date_presented,\r\n                            title_of_forum: presentation[i].title_of_forum,\r\n                            type_of_forum: presentation[i].type_of_forum,\r\n                            venue_of_forum: presentation[i].venue_of_forum,\r\n                            is_completed: presentation[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < presentation.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = presentation[i].created_by;\r\n\r\n                    if (\r\n                        presentation[i].is_completed === \"N\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        pending.push({\r\n                            _id: presentation[i]._id,\r\n                            research_id: presentation[i].research_id,\r\n                            title_of_research: presentation[i].title_of_research,\r\n                            presentor: presentation[i].presentor,\r\n                            date_presented: presentation[i].date_presented,\r\n                            title_of_forum: presentation[i].title_of_forum,\r\n                            type_of_forum: presentation[i].type_of_forum,\r\n                            venue_of_forum: presentation[i].venue_of_forum,\r\n                            is_completed: presentation[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getCompletedPresentations = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof presentation !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < presentation.length; i++) {\r\n                    if (presentation[i].is_completed === \"Y\") {\r\n                        completed.push({\r\n                            _id: presentation[i]._id,\r\n                            title_of_research: presentation[i].title_of_research,\r\n                            presentor: presentation[i].presentor,\r\n                            date_presented: presentation[i].date_presented,\r\n                            title_of_forum: presentation[i].title_of_forum,\r\n                            type_of_forum: presentation[i].type_of_forum,\r\n                            venue_of_forum: presentation[i].venue_of_forum,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < presentation.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = presentation[i].created_by;\r\n\r\n                    if (\r\n                        presentation[i].is_completed === \"Y\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        completed.push({\r\n                            _id: presentation[i]._id,\r\n                            title_of_research:\r\n                                presentation[i].title_of_research,\r\n                            presentor: presentation[i].presentor,\r\n                            date_presented: presentation[i].date_presented,\r\n                            title_of_forum: presentation[i].title_of_forum,\r\n                            type_of_forum: presentation[i].type_of_forum,\r\n                            venue_of_forum: presentation[i].venue_of_forum,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n        }\r\n    };\r\n\r\n    const onSubmitUpdateRemarks = (presentation_id) => {\r\n        const data = {\r\n            presentation_id,\r\n            is_completed: \"Y\",\r\n            updated_at: new Date(),\r\n        };\r\n\r\n        const isSubmit = window.confirm(\"Are you sure you want to update?\");\r\n\r\n        if (isSubmit) {\r\n            dispatch(updatePresentation(data));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar={true}\r\n                newestOnTop={false}\r\n                closeOnClick={true}\r\n                rtl={false}\r\n                pauseOnFocusLoss={true}\r\n                draggable={true}\r\n                pauseOnHover={true}\r\n            />\r\n\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={toggleModal}\r\n                size=\"lg\"\r\n                className=\"modal-dialog font-14\"\r\n            >\r\n                <ModalHeader\r\n                    className=\"bg-primary text-light\"\r\n                    toggle={toggleModal}\r\n                >\r\n                    {!presentationId\r\n                        ? \"Add Presentation\"\r\n                        : \"Update Presentation\"}\r\n                </ModalHeader>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <ModalBody>\r\n                        <Container>\r\n                            <FormGroup>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    name=\"presentation_id\"\r\n                                    id=\"presentation_id\"\r\n                                    // value={presentationId}\r\n                                    // onChange={(e) => {\r\n                                    //     setPresentationId(e.target.value);\r\n                                    // }}\r\n                                    defaultValue={presentationId}\r\n                                    {...register(\"presentation_id\")}\r\n                                />\r\n                                <Label for=\"\">\r\n                                    Title of Research{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <select\r\n                                    className={errors.research_id ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"select\"\r\n                                    name=\"research_id\"\r\n                                    id=\"research_id\"\r\n                                    // value={researchId}\r\n                                    // onChange={(e) => {\r\n                                    //     setResearchId(e.target.value);\r\n                                    //     setTitleOfResearch(\r\n                                    //         e.target.options[\r\n                                    //             e.target.selectedIndex\r\n                                    //         ].text\r\n                                    //     );\r\n                                    // }}\r\n                                    // required\r\n                                    defaultValue={researchId}\r\n                                    {...register(\"research_id\")}\r\n                                >\r\n                                    <option value=\"\">Choose...</option>\r\n                                    {getResearchesOptions()}\r\n                                </select>\r\n                                <span className=\"text-danger\">\r\n                                    {errors.research_id?.message}\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>\r\n                                    Presentor{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <select\r\n                                    className={errors.presentor ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"select\"\r\n                                    name=\"presentor\"\r\n                                    id=\"presentor\"\r\n                                    // value={presentor || \"\"}\r\n                                    // onChange={(e) =>\r\n                                    //     setPresentor(e.target.value)\r\n                                    // }\r\n                                    // required\r\n                                    defaultValue={presentor}\r\n                                    {...register(\"presentor\")}\r\n                                >\r\n                                    <option value=\"\">Choose...</option>\r\n                                    {getPresentorsOptions(watch(\"research_id\"))}\r\n                                </select>\r\n                                <span className=\"text-danger\">\r\n                                    {errors.presentor?.message}\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>Date Presented <span className=\"text-danger\">*</span></Label>\r\n                                        <DateTimePickerComponent\r\n                                            format=\"yyyy-MM-dd\"\r\n                                            id=\"datetimepicker\"\r\n                                            name=\"date_presented\"\r\n                                            // value={datePresented}\r\n                                            // onChange={(e) => {\r\n                                            //     setDatePresented(\r\n                                            //         e.target.value\r\n                                            //     );\r\n                                            // }}\r\n                                            // required\r\n                                            value={datePresented}\r\n                                            {...register(\"date_presented\")}\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.date_presented?.message}\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Title of Forum <span className=\"text-danger\">*</span></Label>\r\n                                <input\r\n                                    className={errors.title_of_forum ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"text\"\r\n                                    name=\"title_of_forum\"\r\n                                    id=\"title_of_forum\"\r\n                                    // value={titleOfForum}\r\n                                    // onChange={(e) => {\r\n                                    //     setTitleOfForum(e.target.value);\r\n                                    // }}\r\n                                    // required\r\n                                    defaultValue={titleOfForum}\r\n                                    {...register(\"title_of_forum\")}\r\n                                />\r\n                                <span className=\"text-danger\">\r\n                                    {errors.title_of_forum?.message}\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>Type of Forum <span className=\"text-danger\">*</span></Label>\r\n                                        <select\r\n                                            className={errors.type_of_forum ? \"is-invalid form-control\" : \"form-control\" }\r\n                                            type=\"select\"\r\n                                            name=\"type_of_forum\"\r\n                                            id=\"type_of_forum\"\r\n                                            // value={typeOfForum}\r\n                                            // onChange={(e) => {\r\n                                            //     setTypeOfForum(e.target.value);\r\n                                            // }}\r\n                                            // required\r\n                                            defaultValue={typeOfForum}\r\n                                            {...register(\"type_of_forum\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"local\">Local</option>\r\n                                            <option value=\"national\">\r\n                                                National\r\n                                            </option>\r\n                                            <option value=\"international\">\r\n                                                International\r\n                                            </option>\r\n                                        </select>\r\n                                        <span className=\"text-danger\">\r\n                                            {errors.type_of_forum?.message}\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Venue of Forum <span className=\"text-danger\">*</span></Label>\r\n                                <input\r\n                                    className={errors.venue_of_forum ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"text\"\r\n                                    name=\"venue_of_forum\"\r\n                                    id=\"venue_of_forum\"\r\n                                    // value={venueOfForum}\r\n                                    // onChange={(e) => {\r\n                                    //     setVenueOfForum(e.target.value);\r\n                                    // }}\r\n                                    // required\r\n                                    defaultValue={venueOfForum}\r\n                                    {...register(\"venue_of_forum\")}\r\n                                />\r\n                                <span className=\"text-danger\">\r\n                                    {errors.venue_of_forum?.message}\r\n                                </span>\r\n                            </FormGroup>\r\n                        </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Save Changes\r\n                        </Button>\r\n                        <Button color=\"light\" onClick={toggleModal}>\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Presentation\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/completed\">Presentation</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 align-self-center\">\r\n                        <div className=\"customize-input float-right\">\r\n                            <select className=\"custom-select custom-select-set form-control bg-white border-0 custom-shadow custom-radius\">\r\n                                <option>2019</option>\r\n                                <option value={1}>2020</option>\r\n                                <option value={2}>2021</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            { currentUser.user_type === \"rh\" || currentUser.user_type === \"admin\" ? (\r\n            <>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Nav tabs pills className=\"mb-3 font-14\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"1\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"1\");\r\n                                        }}\r\n                                    >\r\n                                        Pending\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"2\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"2\");\r\n                                        }}\r\n                                    >\r\n                                        Completed\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"1\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                        config={dtConfig}\r\n                                        records={getPendingPresentations()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                                <TabPane tabId=\"2\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                        config={dtConfig}\r\n                                        records={getCompletedPresentations()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                            </TabContent>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>) : (\r\n            <>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <ReactDatatable\r\n                                className=\"table font-14\"\r\n                                tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                config={dtConfig}\r\n                                records={getPresentations()}\r\n                                columns={dtColumns}\r\n                                extraButtons={dtExtraButtons}\r\n                            />\r\n                        </CardBody>\r\n                    </Card> \r\n                </Container>\r\n            </>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Presentation;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Seminar.jsx",["286","287","288","289","290","291","292"],"D:\\research-management-system\\client\\src\\components\\pages\\researches\\Utilization.jsx",["293","294","295","296","297","298"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {\r\n    getUtilization,\r\n    createUtilizaition,\r\n    updateUtilization,\r\n    deleteUtilization,\r\n} from \"../../../redux/actions/utilization_action\";\r\n\r\nimport { getProposalCompleted } from \"../../../redux/actions/completed_action\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    TabContent,\r\n    TabPane,\r\n    Row,\r\n    Col,\r\n} from \"reactstrap\";\r\n\r\nimport ReactDatatable from \"@ashvin27/react-datatable\";\r\nimport { DateTimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\r\nimport moment from \"moment\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst MODAL_TYPE = {\r\n    CRT: \"CREATE\",\r\n    UPD: \"UPDATE\",\r\n    DEL: \"DELETE\",\r\n};\r\n\r\nconst USER_TYPE = {\r\n    USR: \"user\",\r\n    ADMIN: \"admin\",\r\n    RD: \"rd\", // research director\r\n    RH: \"rh\", // research head\r\n    CD: \"cd\", // campus director\r\n};\r\n\r\nconst formSchema = yup.object().shape({\r\n    research_id: yup.string().required(\"Title of research field is required\"),\r\n    beneficiary: yup.string().required(\"Beneficiary field is required\"),\r\n    date_of_utilization: yup.mixed().required(\"Date of utilization field is required.\")\r\n                        .test(\"date_of_utilization\", \"Please provide an input.\",(value) => {\r\n                           return value !== \"\"\r\n                        }),\r\n})\r\n\r\nconst Utilization = ({ currentUser }) => {\r\n    const completed = useSelector((state) => state.completed.completed);\r\n    const utilization = useSelector((state) => state.utilization.utilizations);\r\n\r\n    const dispatch = useDispatch(); // this is to dispatch actions\r\n\r\n    const { register, handleSubmit, formState: { errors }, reset, watch } = useForm({\r\n        resolver: yupResolver(formSchema)\r\n    })\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n    const [utilizationId, setUtilizationId] = useState(null);\r\n    const [researchId, setResearchId] = useState(null);\r\n    const [titleOfResearch, setTitleOfResearch] = useState(\"\");\r\n    const [beneficiary, setBeneficiary] = useState(\"\");\r\n    const [dateOfUtilization, setDateOfUtilization] = useState(\"\");\r\n    // const [updatedAt, setUpdatedAt] = useState(new Date());\r\n    const [updatedBy, setUpdatedBy] = useState({\r\n        user_id: currentUser.id,\r\n        full_name: `${currentUser.first_name} ${currentUser.last_name}`,\r\n        user_type: currentUser.user_type,\r\n        college: currentUser.college,\r\n        campus: currentUser.campus,\r\n    });\r\n\r\n    // Datatables Configuration\r\n    const dtColumns = [\r\n        {\r\n            key: \"proposal_no\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            width: 70,\r\n            cell: (utilization) => {\r\n                if(utilization.is_completed === 'N') { \r\n                    return (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={() => showEditForm(utilization)}\r\n                            >\r\n                                <span><i className=\"fas fa-pencil-alt\"></i> Edit</span>\r\n                            </Button>{\" \"}\r\n                            &nbsp;\r\n                            <Button\r\n                                color=\"danger\"\r\n                                size=\"sm\"\r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => onClickDelete(utilization._id)}\r\n                            >\r\n                                <span><i className=\"fas fa-trash-alt\"></i> Remove</span>\r\n                            </Button>\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n            },\r\n        },\r\n        {\r\n            key: \"title_of_research\",\r\n            text: \"Title of Research\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"beneficiary\",\r\n            text: \"Beneficiary\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"date_of_utilization\",\r\n            text: \"Date of Utilization\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (utilization) => {\r\n                return (\r\n                    <React.Fragment>\r\n                        {moment(utilization.date_of_utilization).format(\"LL\")}\r\n                    </React.Fragment>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"\",\r\n            text: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (utilization) => {\r\n                if(currentUser.user_type === USER_TYPE.RH || currentUser.user_type === USER_TYPE.ADMIN) {\r\n                    if(utilization.is_completed === 'N' && currentUser.user_type === USER_TYPE.RH) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    className=\"btn btn-sm\"\r\n                                    onClick={() => {\r\n                                        onSubmitUpdateRemarks(utilization._id);\r\n                                    }}\r\n                                >\r\n                                    Completed\r\n                                </Button>\r\n                                &nbsp;\r\n                            </React.Fragment>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <div className=\"badge badge-success\">COMPLETED</div>\r\n                            </React.Fragment>\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n\r\n    const dtConfig = {\r\n        key_column: \"id\",\r\n        page_size: 10,\r\n        length_menu: [10, 20, 50],\r\n        button: {\r\n            // print: true,\r\n            extra: true,\r\n        },\r\n    };\r\n\r\n    const dtExtraButtons = [\r\n        // {\r\n        //     className: \"btn btn-primary\",\r\n        //     title: \"Print\",\r\n        //     children: [\r\n        //         <span>\r\n        //             <i\r\n        //                 className=\"glyphicon glyphicon-print fa fa-print\"\r\n        //                 aria-hidden=\"true\"\r\n        //             ></i>\r\n        //         </span>,\r\n        //     ],\r\n        //     onClick: () => {\r\n        //         alert(\"Print Logic here\");\r\n        //     },\r\n        // },\r\n        {\r\n            className: \"btn btn-primary\",\r\n            title: \"Create New\",\r\n            children: [\r\n                <span>\r\n                    <i\r\n                        className=\"fa fa-plus-circle\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    &nbsp; Create\r\n                </span>,\r\n            ],\r\n            onClick: () => {\r\n                setModal(!modal);\r\n            },\r\n        },\r\n    ];\r\n\r\n    // End of Datatables Config\r\n\r\n    useEffect(() => {\r\n        dispatch(getUtilization());\r\n        dispatch(getProposalCompleted());\r\n        // dispatch(getProposalCompletedApproved());\r\n    }, [dispatch]);\r\n\r\n    const clearForm = () => {\r\n        setUtilizationId(null);\r\n        setResearchId(null);\r\n        setTitleOfResearch(\"\");\r\n        setBeneficiary(\"\");\r\n        setDateOfUtilization(\"\");\r\n    };\r\n\r\n    const toggleModal = () => {\r\n        setModal(!modal);\r\n        clearForm();\r\n    };\r\n\r\n    const toggleTab = (tabId) => {\r\n        if (activeTab !== tabId) setActiveTab(tabId);\r\n\r\n        clearForm();\r\n    };\r\n\r\n    const showEditForm = (data) => {\r\n        console.log(\"DATA: \", data);\r\n        const {\r\n            _id,\r\n            research_id,\r\n            title_of_research,\r\n            beneficiary,\r\n            date_of_utilization,\r\n        } = data;\r\n\r\n        toggleModal();\r\n\r\n        setUtilizationId(_id);\r\n        setResearchId(research_id);\r\n        setTitleOfResearch(title_of_research);\r\n        setBeneficiary(beneficiary);\r\n        setDateOfUtilization(date_of_utilization);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        let selectedResearch = document.getElementById(\"research_id\");\r\n        let titleOfTheResearch = selectedResearch.options[selectedResearch.selectedIndex].text;\r\n\r\n        const details = {\r\n            utilization_id: data.utilization_id,\r\n            research_id: data.research_id,\r\n            title_of_research: titleOfTheResearch,\r\n            beneficiary: data.beneficiary,\r\n            date_of_utilization: data.date_of_utilization,\r\n            created_at: new Date(),\r\n            created_by: updatedBy,\r\n        };\r\n\r\n        if (!data.utilization_id) {\r\n            dispatch(createUtilizaition(details));\r\n        } else {\r\n            dispatch(updateUtilization(details));\r\n        }\r\n\r\n        toggleModal();\r\n    }\r\n\r\n    const onSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = {\r\n            utilization_id: utilizationId,\r\n            research_id: researchId,\r\n            title_of_research: titleOfResearch,\r\n            beneficiary,\r\n            date_of_utilization: dateOfUtilization,\r\n            created_by: updatedBy,\r\n        };\r\n\r\n        if (!utilizationId) {\r\n            dispatch(createUtilizaition(data));\r\n        } else {\r\n            dispatch(updateUtilization(data));\r\n        }\r\n\r\n        toggleModal();\r\n    };\r\n\r\n    const onClickDelete = (utilization_id) => {\r\n        const isDelete = window.confirm(\r\n            \"Are you sure you want to delete this data?\"\r\n        );\r\n\r\n        if (isDelete) dispatch(deleteUtilization(utilization_id));\r\n    };\r\n\r\n    const onSubmitUpdateRemarks = (utilization_id) => {\r\n        const data = {\r\n            utilization_id,\r\n            is_completed: \"Y\",\r\n            updated_at: new Date(),\r\n        };\r\n\r\n        const isSubmit = window.confirm(\"Are you sure you want to update?\");\r\n\r\n        if (isSubmit) {\r\n            dispatch(updateUtilization(data));\r\n        }\r\n    };\r\n\r\n    const getResearchesOptions = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (completed !== undefined) {\r\n            const list_of_research = [];\r\n\r\n            for (let i = 0; i < completed.length; i++) {\r\n                let { user_id } = completed[i].created_by;\r\n\r\n                if (\r\n                    completed[i].is_completed === \"Y\" &&\r\n                    user_id === currentUserId\r\n                ) {\r\n                    list_of_research.push(\r\n                        <option key={completed[i]._id} value={completed[i]._id}>\r\n                            {completed[i].title_of_research}\r\n                        </option>\r\n                    );\r\n                }\r\n            }\r\n\r\n            return list_of_research;\r\n        }\r\n    };\r\n\r\n    const getUtilizations = () => {\r\n        const currentUserId = currentUser.id;\r\n        const user = [];\r\n\r\n        for (let i = 0; i < utilization.length; i++) {\r\n            // Destructure some of the details\r\n            let { user_id } = utilization[i].created_by;\r\n\r\n            if (user_id === currentUserId && (utilization[i].is_completed === \"N\" || utilization[i].is_completed === \"Y\")) {\r\n                user.push({\r\n                    _id: utilization[i]._id,\r\n                    research_id: utilization[i].research_id,\r\n                    title_of_research: utilization[i].title_of_research,\r\n                    beneficiary: utilization[i].beneficiary,\r\n                    date_of_utilization: utilization[i].date_of_utilization,\r\n                    is_completed: utilization[i].is_completed,\r\n                });\r\n            }\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    const getPendingUtilization = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof utilization !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < utilization.length; i++) {\r\n                    if (utilization[i].is_completed === \"N\") {\r\n                        pending.push({\r\n                            _id: utilization[i]._id,\r\n                            research_id: utilization[i].research_id,\r\n                            title_of_research: utilization[i].title_of_research,\r\n                            beneficiary: utilization[i].beneficiary,\r\n                            date_of_utilization:\r\n                                utilization[i].date_of_utilization,\r\n                            is_completed: utilization[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < utilization.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = utilization[i].created_by;\r\n\r\n                    if (\r\n                        utilization[i].is_completed === \"N\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        pending.push({\r\n                            _id: utilization[i]._id,\r\n                            research_id: utilization[i].research_id,\r\n                            title_of_research: utilization[i].title_of_research,\r\n                            beneficiary: utilization[i].beneficiary,\r\n                            date_of_utilization:\r\n                                utilization[i].date_of_utilization,\r\n                            is_completed: utilization[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getCompletedUtilization = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof presentation !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < utilization.length; i++) {\r\n                    if (utilization[i].is_completed === \"Y\") {\r\n                        completed.push({\r\n                            _id: utilization[i]._id,\r\n                            research_id: utilization[i].research_id,\r\n                            title_of_research: utilization[i].title_of_research,\r\n                            beneficiary: utilization[i].beneficiary,\r\n                            date_of_utilization:\r\n                                utilization[i].date_of_utilization,\r\n                            is_completed: utilization[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < utilization.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = utilization[i].created_by;\r\n\r\n                    if (\r\n                        utilization[i].is_completed === \"Y\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        completed.push({\r\n                            __id: utilization[i]._id,\r\n                            research_id: utilization[i].research_id,\r\n                            title_of_research: utilization[i].title_of_research,\r\n                            beneficiary: utilization[i].beneficiary,\r\n                            date_of_utilization:\r\n                                utilization[i].date_of_utilization,\r\n                            is_completed: utilization[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={toggleModal}\r\n                size=\"lg\"\r\n                className=\"modal-dialog\"\r\n            >\r\n                <ModalHeader\r\n                    className=\"bg-primary text-light\"\r\n                    toggle={toggleModal}\r\n                >\r\n                    {!utilizationId ? \"Add Utilization\" : \"Update Utilization\"}\r\n                </ModalHeader>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <ModalBody>\r\n                        <Container>\r\n                            <FormGroup>\r\n                                <Label for=\"\">\r\n                                    Title of Research{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    name=\"utilization_id\"\r\n                                    id=\"utilization_id\"\r\n                                    // value={utilizationId}\r\n                                    // onChange={(e) => {\r\n                                    //     setUtilizationId(e.target.value);\r\n                                    // }}\r\n                                    defaultValue={utilizationId}\r\n                                    {...register(\"utilization_id\")}\r\n                                ></input>\r\n                                <select\r\n                                    className={errors.research_id ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"select\"\r\n                                    name=\"research_id\"\r\n                                    id=\"research_id\"\r\n                                    // value={researchId}\r\n                                    // onChange={(e) => {\r\n                                    //     setResearchId(e.target.value);\r\n                                    //     setTitleOfResearch(\r\n                                    //         e.target.options[\r\n                                    //             e.target.selectedIndex\r\n                                    //         ].text\r\n                                    //     );\r\n                                    // }}\r\n                                    defaultValue={researchId}\r\n                                    {...register(\"research_id\")}\r\n                                >\r\n                                    <option value=\"\">Choose...</option>\r\n                                    {getResearchesOptions()}\r\n                                </select>\r\n                                <span className=\"text-danger\">\r\n                                    { errors.research_id?.message }\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>\r\n                                    Beneficiary{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    className={errors.beneficiary ? \"is-invalid form-control\" : \"form-control\" }\r\n                                    type=\"text\"\r\n                                    name=\"beneficiary\"\r\n                                    id=\"beneficiary\"\r\n                                    // value={beneficiary}\r\n                                    // onChange={(e) => {\r\n                                    //     setBeneficiary(e.target.value);\r\n                                    // }}\r\n                                    defaultValue={beneficiary}\r\n                                    {...register(\"beneficiary\")}\r\n                                />\r\n                                <span className=\"text-danger\">\r\n                                    { errors.beneficiary?.message }\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Date of Utilization{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <DateTimePickerComponent\r\n                                            format=\"yyyy-MM-dd\"\r\n                                            id=\"datetimepicker\"\r\n                                            value={dateOfUtilization}\r\n                                            // onChange={(e) => {\r\n                                            //     setDateOfUtilization(\r\n                                            //         e.target.value\r\n                                            //     );\r\n                                            // }}\r\n                                            {...register(\"date_of_utilization\")}\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            { errors.date_of_utilization?.message }\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                        </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Save Changes\r\n                        </Button>\r\n                        <Button color=\"light\" onClick={toggleModal}>\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Utilization\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/utilization\">Utilzation</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 align-self-center\">\r\n                        <div className=\"customize-input float-right\">\r\n                            <select className=\"custom-select custom-select-set form-control bg-white border-0 custom-shadow custom-radius\">\r\n                                <option>2019</option>\r\n                                <option value={1}>2020</option>\r\n                                <option value={2}>2021</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            { currentUser.user_type === \"rh\" || currentUser.user_type === \"admin\" ? (<>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Nav tabs pills className=\"mb-3 font-14\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"1\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"1\");\r\n                                        }}\r\n                                    >\r\n                                        Pending\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"2\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"2\");\r\n                                        }}\r\n                                    >\r\n                                        Completed\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"1\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark\"\r\n                                        config={dtConfig}\r\n                                        records={getPendingUtilization()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                                <TabPane tabId=\"2\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark\"\r\n                                        config={dtConfig}\r\n                                        records={getCompletedUtilization()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                            </TabContent>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>) : (<>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <ReactDatatable\r\n                                className=\"table font-14\"\r\n                                tHeadClassName=\"thead-dark\"\r\n                                config={dtConfig}\r\n                                records={getUtilizations()}\r\n                                columns={dtColumns}\r\n                                extraButtons={dtExtraButtons}\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>) }\r\n            \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Utilization;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\researches\\dashboard\\Administrator.jsx",["299","300","301","302","303","304","305","306","307","308","309","310","311"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { getProposal } from \"../../../../redux/actions/proposal_action\";\r\nimport { getProposalCompleted } from \"../../../../redux/actions/completed_action\";\r\nimport { getPresentation } from \"../../../../redux/actions/presentation_action\";\r\nimport { getPublication } from \"../../../../redux/actions/publication_action\";\r\nimport { getUtilization } from \"../../../../redux/actions/utilization_action\";\r\nimport { getInnovation } from \"../../../../redux/actions/innovation_action\";\r\n\r\nimport { getDepartment } from \"../../../../redux/actions/department_action\";\r\nimport { getAccount } from \"../../../../redux/actions/account_action\";\r\n\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nimport AccountContext from \"../../../../context/AccountContext\";\r\nimport moment from \"moment\";\r\n\r\nconst USER_TYPE = {\r\n    USR: \"user\",\r\n    ADMIN: \"admin\",\r\n    RD: \"rd\", // research director\r\n    RH: \"rh\", // research head\r\n    CD: \"cd\", // campus director\r\n};\r\n\r\nconst Administrator = ({ currentUser }) => {\r\n    const faculty = useSelector((state) => state.account.accounts); // This is to populate faculty data\r\n    const college = useSelector((state) => state.department.departments);\r\n    const proposal = useSelector((state) => state.proposal.proposals);\r\n    const completed = useSelector((state) => state.completed.completed);\r\n    const presentation = useSelector(\r\n        (state) => state.presentation.presentations\r\n    );\r\n    const publication = useSelector((state) => state.publication.publications);\r\n    const utilization = useSelector((state) => state.utilization.utilizations);\r\n    const innovation = useSelector((state) => state.innovation.innovations);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { userData } = useContext(AccountContext);\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [colleges, setColleges] = useState(\"\");\r\n    const [totalProposal, setTotalProposal] = useState(0);\r\n    const [totalCompleted, setTotalCompleted] = useState(0);\r\n    const [totalPresentation, setTotalPresentation] = useState(0);\r\n    const [totalPublication, setTotalPublication] = useState(0);\r\n    const [totalUtilization, setTotalUtilization] = useState(0);\r\n    const [totalInnovation, setTotalInnovation] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (typeof userData !== undefined || userData !== null) {\r\n            const { first_name } = userData.user;\r\n            setFirstName(first_name);\r\n\r\n            dispatch(getAccount());\r\n            dispatch(getDepartment());\r\n            dispatch(getProposal());\r\n            dispatch(getProposalCompleted());\r\n            dispatch(getPresentation());\r\n            dispatch(getPublication());\r\n            dispatch(getUtilization());\r\n            dispatch(getInnovation());\r\n        }\r\n    }, [dispatch, userData]);\r\n\r\n    const getGreetingTime = () => {\r\n        let greetings = null;\r\n        const currentHour = moment().format(\"HH\");\r\n\r\n        if (currentHour === 0 || currentHour < 12) greetings = \"Good morning\";\r\n        else if (currentHour < 18) greetings = \"Good afternoon\";\r\n        else greetings = \"Good evening\";\r\n\r\n        return greetings;\r\n    };\r\n\r\n    const getTotalFacultyByCollege = () => {\r\n        if (colleges !== \"\") {\r\n            return faculty.filter((prop) => {\r\n                return prop.college === colleges;\r\n            }).length;\r\n        } else {\r\n            return faculty.length;\r\n        }\r\n    };\r\n\r\n    // return number of proposals based on colleges\r\n    const getTotalProposal = () => {\r\n        if (colleges !== \"\") {\r\n            return proposal.filter((prop) => {\r\n                return prop.created_by.college === colleges;\r\n            }).length;\r\n        } else {\r\n            return proposal.length;\r\n        }\r\n    };\r\n\r\n    const getTotalCompleted = () => {\r\n        if (colleges !== \"\") {\r\n            return completed.filter((prop) => {\r\n                return (\r\n                    prop.created_by.college === colleges &&\r\n                    prop.is_completed !== \"\"\r\n                );\r\n            }).length;\r\n        } else {\r\n            return completed.filter((prop) => {\r\n                return prop.is_completed === \"N\" || prop.is_completed === \"Y\";\r\n            }).length;\r\n        }\r\n    };\r\n\r\n    const getTotalPresented = () => {\r\n        if (colleges !== \"\") {\r\n            return presentation.filter((prop) => {\r\n                return prop.created_by.college === colleges;\r\n            }).length;\r\n        } else {\r\n            return presentation.length;\r\n        }\r\n    };\r\n\r\n    const getTotalPublished = () => {\r\n        if (colleges !== \"\") {\r\n            return publication.filter((prop) => {\r\n                return prop.created_by.college === colleges;\r\n            }).length;\r\n        } else {\r\n            return publication.length;\r\n        }\r\n    };\r\n\r\n    const getTotalUtilized = () => {\r\n        if (colleges !== \"\") {\r\n            return utilization.filter((prop) => {\r\n                return prop.created_by.college === colleges;\r\n            }).length;\r\n        } else {\r\n            return utilization.length;\r\n        }\r\n    };\r\n\r\n    const getTotalInnovated = () => {\r\n        if (colleges !== \"\") {\r\n            return innovation.filter((prop) => {\r\n                return prop.created_by.college === colleges;\r\n            }).length;\r\n        } else {\r\n            return innovation.length;\r\n        }\r\n    };\r\n\r\n    const getColleges = () => {\r\n        const colleges = [];\r\n\r\n        for (let i = 0; i < college.length; i++) {\r\n            colleges.push(\r\n                <option key={college[i]._id} value={college[i].department_code}>\r\n                    {college[i].department_code}\r\n                </option>\r\n            );\r\n        }\r\n\r\n        return colleges;\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            {getGreetingTime()} {firstName}!\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"index.html\">Dashboard</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 align-self-center\">\r\n                        <div className=\"customize-input float-right\">\r\n                            <select\r\n                                id=\"colleges\"\r\n                                name=\"colleges\"\r\n                                value={colleges}\r\n                                onChange={(e) => {\r\n                                    setColleges(e.target.value);\r\n                                }}\r\n                                className=\"custom-select custom-select-set form-control bg-white border-0 custom-shadow custom-radius\"\r\n                            >\r\n                                <option value=\"\">Overall</option>\r\n                                {getColleges()}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* This is where the content will be displayed. */}\r\n            <div className=\"container-fluid\">\r\n                <div className=\"card-group\">\r\n                    <div className=\"card border-right\">\r\n                        <div className=\"card-body bg-primary text-white\">\r\n                            <div className=\"d-flex d-lg-flex d-md-block align-items-center\">\r\n                                <div>\r\n                                    <div className=\"d-inline-flex align-items-center\">\r\n                                        <h2 className=\"text-white mb-1 font-weight-medium\">\r\n                                            {getTotalProposal()}\r\n                                        </h2>\r\n                                    </div>\r\n                                    <h6>Proposals</h6>\r\n                                </div>\r\n                                <div class=\"ml-auto mt-md-3 mt-lg-0\">\r\n                                    <span class=\"opacity-10 text-white\">\r\n                                        <svg\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            width=\"30\"\r\n                                            height=\"30\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            fill=\"none\"\r\n                                            stroke=\"currentColor\"\r\n                                            stroke-width=\"2\"\r\n                                            stroke-linecap=\"round\"\r\n                                            stroke-linejoin=\"round\"\r\n                                            class=\"feather feather-edit-3\"\r\n                                        >\r\n                                            <path d=\"M12 20h9\"></path>\r\n                                            <path d=\"M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z\"></path>\r\n                                        </svg>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card border-right\">\r\n                        <div className=\"card-body bg-cyan text-white\">\r\n                            <div className=\"d-flex d-lg-flex d-md-block align-items-center\">\r\n                                <div>\r\n                                    <div className=\"d-inline-flex align-items-center\">\r\n                                        <h2 className=\"text-white mb-1 font-weight-medium\">\r\n                                            {getTotalCompleted()}\r\n                                        </h2>\r\n                                    </div>\r\n                                    <h6>Completed</h6>\r\n                                </div>\r\n                                <div class=\"ml-auto mt-md-3 mt-lg-0\">\r\n                                    <span class=\"opacity-10 text-white\">\r\n                                        <svg\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            width=\"30\"\r\n                                            height=\"30\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            fill=\"none\"\r\n                                            stroke=\"currentColor\"\r\n                                            stroke-width=\"2\"\r\n                                            stroke-linecap=\"round\"\r\n                                            stroke-linejoin=\"round\"\r\n                                            class=\"feather feather-check-circle\"\r\n                                        >\r\n                                            <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                                            <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n                                        </svg>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card border-right\">\r\n                        <div className=\"card-body bg-success text-white\">\r\n                            <div className=\"d-flex d-lg-flex d-md-block align-items-center\">\r\n                                <div>\r\n                                    <div className=\"d-inline-flex align-items-center\">\r\n                                        <h2 className=\"text-white mb-1 font-weight-medium\">\r\n                                            {getTotalPresented()}\r\n                                        </h2>\r\n                                    </div>\r\n                                    <h6>Presentations</h6>\r\n                                </div>\r\n                                <div class=\"ml-auto mt-md-3 mt-lg-0\">\r\n                                    <span class=\"opacity-10 text-white\">\r\n                                        <svg\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            width=\"30\"\r\n                                            height=\"30\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            fill=\"none\"\r\n                                            stroke=\"currentColor\"\r\n                                            stroke-width=\"2\"\r\n                                            stroke-linecap=\"round\"\r\n                                            stroke-linejoin=\"round\"\r\n                                            class=\"feather feather-pie-chart\"\r\n                                        >\r\n                                            <path d=\"M21.21 15.89A10 10 0 1 1 8 2.83\"></path>\r\n                                            <path d=\"M22 12A10 10 0 0 0 12 2v10z\"></path>\r\n                                        </svg>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card border-right\">\r\n                        <div className=\"card-body bg-danger text-white\">\r\n                            <div className=\"d-flex d-lg-flex d-md-block align-items-center\">\r\n                                <div>\r\n                                    <div className=\"d-inline-flex align-items-center\">\r\n                                        <h2 className=\"text-white mb-1 font-weight-medium\">\r\n                                            {getTotalPublished()}\r\n                                        </h2>\r\n                                    </div>\r\n                                    <h6>Publications</h6>\r\n                                </div>\r\n                                <div class=\"ml-auto mt-md-3 mt-lg-0\">\r\n                                    <span class=\"opacity-10 text-white\">\r\n                                        <svg\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            width=\"30\"\r\n                                            height=\"30\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            fill=\"none\"\r\n                                            stroke=\"currentColor\"\r\n                                            stroke-width=\"2\"\r\n                                            stroke-linecap=\"round\"\r\n                                            stroke-linejoin=\"round\"\r\n                                            class=\"feather feather-book-open\"\r\n                                        >\r\n                                            <path d=\"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z\"></path>\r\n                                            <path d=\"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z\"></path>\r\n                                        </svg>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row-fluid\">\r\n                    <div className=\"card-group\">\r\n                        <div className=\"card border-right\">\r\n                            <div className=\"card-body bg-danger text-white\">\r\n                                <div className=\"d-flex d-lg-flex d-md-block align-items-center\">\r\n                                    <div>\r\n                                        <div className=\"d-inline-flex align-items-center\">\r\n                                            <h2 className=\"text-white mb-1 font-weight-medium\">\r\n                                                {getTotalUtilized()}\r\n                                            </h2>\r\n                                        </div>\r\n                                        <h6>Utilizations</h6>\r\n                                    </div>\r\n                                    <div class=\"ml-auto mt-md-3 mt-lg-0\">\r\n                                        <span class=\"opacity-10 text-white\">\r\n                                            <svg\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                width=\"30\"\r\n                                                height=\"30\"\r\n                                                viewBox=\"0 0 24 24\"\r\n                                                fill=\"none\"\r\n                                                stroke=\"currentColor\"\r\n                                                stroke-width=\"2\"\r\n                                                stroke-linecap=\"round\"\r\n                                                stroke-linejoin=\"round\"\r\n                                                class=\"feather feather-file-text\"\r\n                                            >\r\n                                                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                                                <polyline points=\"14 2 14 8 20 8\"></polyline>\r\n                                                <line\r\n                                                    x1=\"16\"\r\n                                                    y1=\"13\"\r\n                                                    x2=\"8\"\r\n                                                    y2=\"13\"\r\n                                                ></line>\r\n                                                <line\r\n                                                    x1=\"16\"\r\n                                                    y1=\"17\"\r\n                                                    x2=\"8\"\r\n                                                    y2=\"17\"\r\n                                                ></line>\r\n                                                <polyline points=\"10 9 9 9 8 9\"></polyline>\r\n                                            </svg>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card border-right\">\r\n                            <div className=\"card-body bg-success text-white\">\r\n                                <div className=\"d-flex d-lg-flex d-md-block align-items-center\">\r\n                                    <div>\r\n                                        <div className=\"d-inline-flex align-items-center\">\r\n                                            <h2 className=\"text-white mb-1 font-weight-medium\">\r\n                                                {getTotalInnovated()}\r\n                                            </h2>\r\n                                        </div>\r\n                                        <h6>Innovations</h6>\r\n                                    </div>\r\n                                    <div class=\"ml-auto mt-md-3 mt-lg-0\">\r\n                                        <span class=\"opacity-10 text-white\">\r\n                                            <svg\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                width=\"30\"\r\n                                                height=\"30\"\r\n                                                viewBox=\"0 0 24 24\"\r\n                                                fill=\"none\"\r\n                                                stroke=\"currentColor\"\r\n                                                stroke-width=\"2\"\r\n                                                stroke-linecap=\"round\"\r\n                                                stroke-linejoin=\"round\"\r\n                                                class=\"feather feather-monitor\"\r\n                                            >\r\n                                                <rect\r\n                                                    x=\"2\"\r\n                                                    y=\"3\"\r\n                                                    width=\"20\"\r\n                                                    height=\"14\"\r\n                                                    rx=\"2\"\r\n                                                    ry=\"2\"\r\n                                                ></rect>\r\n                                                <line\r\n                                                    x1=\"8\"\r\n                                                    y1=\"21\"\r\n                                                    x2=\"16\"\r\n                                                    y2=\"21\"\r\n                                                ></line>\r\n                                                <line\r\n                                                    x1=\"12\"\r\n                                                    y1=\"17\"\r\n                                                    x2=\"12\"\r\n                                                    y2=\"21\"\r\n                                                ></line>\r\n                                            </svg>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card\"></div>\r\n                        <div className=\"card\"></div>\r\n                    </div>\r\n                </div>\r\n\r\n                <section className=\"faculties-percentage\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-5\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"card-title text-center\">\r\n                                        Faculties Percentage\r\n                                    </div>\r\n                                    <Doughnut\r\n                                        width={500}\r\n                                        height={500}\r\n                                        data={{\r\n                                            labels: [\r\n                                                \"Proposal\",\r\n                                                \"Completed\",\r\n                                                \"Presentation\",\r\n                                                \"Publication\",\r\n                                                \"Utilization\",\r\n                                                \"Innovation\",\r\n                                            ],\r\n                                            datasets: [\r\n                                                {\r\n                                                    label: \"Percentage of Faculties\",\r\n                                                    data: [\r\n                                                        Math.floor(\r\n                                                            (getTotalProposal() /\r\n                                                                getTotalFacultyByCollege()) *\r\n                                                                100\r\n                                                        ),\r\n                                                        Math.floor(\r\n                                                            (getTotalCompleted() /\r\n                                                                getTotalFacultyByCollege()) *\r\n                                                                100\r\n                                                        ),\r\n                                                        Math.floor(\r\n                                                            (getTotalPresented() /\r\n                                                                getTotalFacultyByCollege()) *\r\n                                                                100\r\n                                                        ),\r\n                                                        Math.floor(\r\n                                                            (getTotalPublished() /\r\n                                                                getTotalFacultyByCollege()) *\r\n                                                                100\r\n                                                        ),\r\n                                                        Math.floor(\r\n                                                            (getTotalUtilized() /\r\n                                                                getTotalFacultyByCollege()) *\r\n                                                                100\r\n                                                        ),\r\n                                                        Math.floor(\r\n                                                            (getTotalInnovated() /\r\n                                                                getTotalFacultyByCollege()) *\r\n                                                                100\r\n                                                        ),\r\n                                                    ],\r\n                                                    backgroundColor: [\r\n                                                        \"rgb(255, 99, 132)\",\r\n                                                        \"rgb(54, 162, 235)\",\r\n                                                        \"rgb(255, 205, 86)\",\r\n                                                        \"rgb(75, 192, 192)\",\r\n                                                        \"rgb(255, 159, 64)\",\r\n                                                        \"rgb(95, 118, 232)\",\r\n                                                    ],\r\n                                                    hoverOffset: 5,\r\n                                                },\r\n                                            ],\r\n                                        }}\r\n                                    />\r\n                                    <div className=\"mt-3\">&nbsp;</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Administrator;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\researches\\Innovation.jsx",["312","313","314","315","316"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\n\r\nimport { getAccount } from \"../../../redux/actions/account_action\";\r\n\r\nimport {\r\n    getInnovation,\r\n    createInnovation,\r\n    updateInnovation,\r\n    deleteInnovation,\r\n} from \"../../../redux/actions/innovation_action\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    TabContent,\r\n    TabPane,\r\n    Row,\r\n    Col,\r\n    Toast,\r\n    ToastBody,\r\n    ToastHeader,\r\n} from \"reactstrap\";\r\n\r\nimport ReactDatatable from \"@ashvin27/react-datatable\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { DateTimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst MODAL_TYPE = {\r\n    CRT: \"CREATE\",\r\n    UPD: \"UPDATE\",\r\n    DEL: \"DELETE\",\r\n};\r\n\r\nconst USER_TYPE = {\r\n    USR: \"user\",\r\n    ADMIN: \"admin\",\r\n    RD: \"rd\",\r\n    RH: \"rh\", \r\n    CD: \"cd\", \r\n};\r\n\r\nconst formSchema = yup.object().shape({\r\n    // author: yup.mixed().test(\"author\", \"Author field is required\", (value) => {\r\n    //     let nameOfAuthor = document.getElementById(\"react-select\")\r\n    //     console.log(\"Author\", nameOfAuthor)\r\n    // }),\r\n    title_of_innovation: yup.string().required(\"Title of innovation field is required\"),\r\n    type_of_innovation: yup.string().required(\"Type of innovation field is required\"),\r\n    is_submitted_or_granted: yup.string().required(\"Status field is required\"),\r\n    // date_submitted: yup.mixed()\r\n    // .test(\"date_submitted\", \"Date submitted field is required\", (value) => {\r\n    //     let statusCode = document.getElementById(\"is_submitted_or_granted\");\r\n    //     return statusCode.value === \"submitted\" && statusCode.value !== \"\";\r\n    // }),\r\n    // grant_code: yup.string().required(\"Grant code field is required\"),\r\n    // date_granted: yup.string().required(\"Date granted field is required\"),\r\n})\r\n\r\nconst Innovation = ({ currentUser }) => {\r\n    const faculty = useSelector((state) => state.account.accounts); // This is to populate proposal data\r\n    const innovation = useSelector((state) => state.innovation.innovations); // This is to populate proposal data\r\n\r\n    const dispatch = useDispatch(); // this is to dispatch actions\r\n\r\n    const { register, handleSubmit, formState: { errors }, reset, watch } = useForm({\r\n        resolver: yupResolver(formSchema)\r\n    })\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n    const [innovationId, setInnovationId] = useState(null);\r\n    const [facultyDetails, setFacultyDetails] = useState(\"\");\r\n    const [titleOfInnovation, setTitleOfInnovation] = useState(\"\");\r\n    const [typeOfInnovation, setTypeOfInnovation] = useState(\"\");\r\n    const [status, setStatus] = useState(\"\");\r\n    const [dateSubmitted, setDateSubmitted] = useState(\"\");\r\n    const [grantCode, setGrantCode] = useState(\"\");\r\n    const [dateGranted, setDateGranted] = useState(\"\");\r\n    const [updatedAt, setUpdatedAt] = useState(new Date());\r\n    const [updatedBy, setUpdatedBy] = useState({\r\n        user_id: currentUser.id,\r\n        full_name: `${currentUser.first_name} ${currentUser.last_name}`,\r\n        user_type: currentUser.user_type,\r\n        college: currentUser.college,\r\n        campus: currentUser.campus,\r\n    });\r\n\r\n    // Datatables Configuration\r\n    const dtColumns = [\r\n        {\r\n            key: \"proposal_no\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            // width: 150,\r\n            cell: (innovation) => {\r\n                if (innovation.is_completed === \"N\") {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={() => showEditForm(innovation)}\r\n                            >\r\n                                <span><i className=\"fas fa-pencil-alt\"></i> Edit</span>\r\n                            </Button>{\" \"}\r\n                            &nbsp;\r\n                            <Button\r\n                                color=\"danger\"\r\n                                size=\"sm\"\r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => onClickDelete(innovation._id)}\r\n                            >\r\n                                <span><i className=\"fas fa-trash-alt\"></i> Remove</span>\r\n                            </Button>\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n            },\r\n        },\r\n        {\r\n            key: \"title_of_innovation\",\r\n            text: \"Title of Innovation\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (innovation) => {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Link\r\n                            to=\"#\"\r\n                            className=\"text-secondary\"\r\n                            onClick={() => {\r\n                                showToast();\r\n                            }}\r\n                        >\r\n                            {innovation.title_of_innovation}\r\n                        </Link>\r\n                    </React.Fragment>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"faculty_name\",\r\n            text: \"Author\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"type_of_innovation\",\r\n            text: \"Type of Innovation\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            isSearchable: true,\r\n            cell: (innovation) => {\r\n                const { type_of_innovation } = innovation;\r\n\r\n                return (\r\n                    <React.Fragment>\r\n                        {type_of_innovation[0].toUpperCase() +\r\n                            type_of_innovation.substring(1)}\r\n                    </React.Fragment>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"status\",\r\n            text: \"Status\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            isSearchable: true,\r\n            cell: (innovation) => {\r\n                const { status } = innovation;\r\n\r\n                return (\r\n                    <React.Fragment>\r\n                        <div className=\"text-secondary\">\r\n                            {status.toUpperCase()}\r\n                        </div>\r\n                    </React.Fragment>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"\",\r\n            text: \"\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (innovation) => {\r\n                if (\r\n                    currentUser.user_type === USER_TYPE.RH ||\r\n                    currentUser.user_type === USER_TYPE.ADMIN\r\n                ) {\r\n                    if (\r\n                        innovation.is_completed === \"N\" &&\r\n                        currentUser.user_type === USER_TYPE.RH\r\n                    ) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    size=\"sm\"\r\n                                    className=\"btn btn-sm\"\r\n                                    onClick={() => {\r\n                                        onSubmitUpdateRemarks(innovation._id);\r\n                                    }}\r\n                                >\r\n                                    Completed\r\n                                </Button>\r\n                                &nbsp;\r\n                            </React.Fragment>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <div className=\"badge badge-success\">\r\n                                    COMPLETED\r\n                                </div>\r\n                            </React.Fragment>\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n\r\n    const dtConfig = {\r\n        key_column: \"id\",\r\n        page_size: 10,\r\n        length_menu: [10, 20, 50],\r\n        button: {\r\n            // print: true,\r\n            extra: true,\r\n        },\r\n    };\r\n\r\n    const dtExtraButtons = [\r\n        // {\r\n        //     className: \"btn btn-primary\",\r\n        //     title: \"Print\",\r\n        //     children: [\r\n        //         <span>\r\n        //             <i\r\n        //                 className=\"glyphicon glyphicon-print fa fa-print\"\r\n        //                 aria-hidden=\"true\"\r\n        //             ></i>\r\n        //         </span>,\r\n        //     ],\r\n        //     onClick: () => {\r\n        //         alert(\"Print Logic here\");\r\n        //     },\r\n        // },\r\n        {\r\n            className: \"btn btn-primary\",\r\n            title: \"Create New\",\r\n            children: [\r\n                <span>\r\n                    <i\r\n                        className=\"fa fa-plus-circle\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    &nbsp; Create\r\n                </span>\r\n            ],\r\n            onClick: () => {\r\n                setModal(!modal);\r\n            },\r\n        },\r\n    ];\r\n\r\n    // End of Datatables Config\r\n\r\n    useEffect(() => {\r\n        dispatch(getAccount());\r\n        dispatch(getInnovation());\r\n    }, [dispatch]);\r\n\r\n    const clearForm = () => {\r\n        setInnovationId(null);\r\n        setFacultyDetails(\"\");\r\n        setTitleOfInnovation(\"\");\r\n        setTypeOfInnovation(\"\");\r\n        setStatus(\"\");\r\n        setDateSubmitted(\"\");\r\n        setGrantCode(\"\");\r\n        setDateGranted(\"\");\r\n    };\r\n\r\n    const toggleModal = () => {\r\n        setModal(!modal);\r\n        clearForm();\r\n    };\r\n\r\n    const toggleTab = (tabId) => {\r\n        if (activeTab !== tabId) setActiveTab(tabId);\r\n\r\n        clearForm();\r\n    };\r\n\r\n    const showToast = () => {\r\n        return (\r\n            <Toast>\r\n                <ToastHeader>Header</ToastHeader>\r\n                <ToastBody>Hello</ToastBody>\r\n            </Toast>\r\n        );\r\n    };\r\n\r\n    const showEditForm = (data) => {\r\n        const {\r\n            _id,\r\n            faculty_id,\r\n            faculty_name,\r\n            title_of_innovation,\r\n            type_of_innovation,\r\n            status,\r\n            date_submitted,\r\n            grant_code,\r\n            date_granted,\r\n        } = data;\r\n\r\n        toggleModal();\r\n\r\n        setInnovationId(_id);\r\n        setFacultyDetails({ value: faculty_id, label: faculty_name });\r\n        setTitleOfInnovation(title_of_innovation);\r\n        setTypeOfInnovation(type_of_innovation);\r\n        setStatus(status);\r\n        setDateSubmitted(date_submitted);\r\n        setGrantCode(grant_code);\r\n        setDateGranted(date_granted);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        if(data.is_submitted_or_granted === \"submitted\") {\r\n            const details = {\r\n                innovation_id: data.innovation_id,\r\n                faculty_id: facultyDetails.value,\r\n                faculty_name: facultyDetails.label,\r\n                title_of_innovation: data.title_of_innovation,\r\n                type_of_innovation: data.type_of_innovation,\r\n                status: data.is_submitted_or_granted,\r\n                date_submitted: dateSubmitted,\r\n                grant_code: \"\",\r\n                date_granted: \"\",\r\n                created_by: updatedBy,\r\n            }\r\n\r\n            if (!data.innovation_id) {\r\n                dispatch(createInnovation(details));\r\n            } else {\r\n                dispatch(updateInnovation(details));\r\n            }\r\n        } else if(data.is_submitted_or_granted === \"granted\") {\r\n            const details = {\r\n                innovation_id: data.innovation_id,\r\n                faculty_id: facultyDetails.value,\r\n                faculty_name: facultyDetails.label,\r\n                title_of_innovation: data.title_of_innovation,\r\n                type_of_innovation: data.type_of_innovation,\r\n                status: data.is_submitted_or_granted,\r\n                date_submitted: \"\",\r\n                grant_code: grantCode,\r\n                date_granted: dateGranted,\r\n                created_by: updatedBy,\r\n            }\r\n\r\n            if (!data.innovation_id) {\r\n                dispatch(createInnovation(details));\r\n            } else {\r\n                dispatch(updateInnovation(details));\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = {\r\n            innovation_id: innovationId,\r\n            faculty_id: facultyDetails.value,\r\n            faculty_name: facultyDetails.label,\r\n            title_of_innovation: titleOfInnovation,\r\n            type_of_innovation: typeOfInnovation,\r\n            status,\r\n            date_submitted: dateSubmitted,\r\n            grant_code: grantCode,\r\n            date_granted: dateGranted,\r\n            created_by: updatedBy,\r\n        };\r\n\r\n        if (!innovationId) {\r\n            dispatch(createInnovation(data));\r\n        } else {\r\n            dispatch(updateInnovation(data));\r\n        }\r\n\r\n        toggleModal();\r\n    };\r\n\r\n    const onClickDelete = (innovation_id) => {\r\n        const isDelete = window.confirm(\r\n            \"Are you sure you want to delete this data?\"\r\n        );\r\n\r\n        if (isDelete) dispatch(deleteInnovation(innovation_id));\r\n    };\r\n\r\n    const onSubmitUpdateRemarks = (innovation_id) => {\r\n        const data = {\r\n            innovation_id,\r\n            is_completed: \"Y\",\r\n            updated_at: updatedAt,\r\n            updated_by: updatedBy,\r\n        };\r\n\r\n        const isSubmit = window.confirm(\"Are you sure you want to update?\");\r\n\r\n        if (isSubmit) {\r\n            dispatch(updateInnovation(data));\r\n        }\r\n    };\r\n\r\n    // authors option assigning\r\n    const getFacultyOption = () => {\r\n        const options = [];\r\n\r\n        for (let i = 0; i < faculty.length; i++) {\r\n            options.push({\r\n                value: faculty[i]._id,\r\n                label: faculty[i].full_name,\r\n            });\r\n        }\r\n\r\n        return options;\r\n    };\r\n\r\n    const getInnovations = () => {\r\n        const currentUserId = currentUser.id;\r\n        const pending = [];\r\n\r\n        for (let i = 0; i < innovation.length; i++) {\r\n            // Destructure some of the details\r\n            let { user_id } = innovation[i].created_by;\r\n\r\n            if (user_id === currentUserId && (innovation[i].is_completed === \"N\" || innovation[i].is_completed === \"Y\")) {\r\n                pending.push({\r\n                    _id: innovation[i]._id,\r\n                    faculty_name: innovation[i].faculty_name,\r\n                    title_of_innovation: innovation[i].title_of_innovation,\r\n                    type_of_innovation: innovation[i].type_of_innovation,\r\n                    status: innovation[i].status,\r\n                    date_submitted: innovation[i].date_submitted,\r\n                    grant_code: innovation[i].grant_code,\r\n                    date_granted: innovation[i].date_granted,\r\n                    is_completed: innovation[i].is_completed,\r\n                });\r\n            }\r\n        }\r\n\r\n        return pending;\r\n    }\r\n\r\n    const getPendingInnovations = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof innovation !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < innovation.length; i++) {\r\n                    if (innovation[i].is_completed === \"N\") {\r\n                        pending.push({\r\n                            _id: innovation[i]._id,\r\n                            faculty_name: innovation[i].faculty_name,\r\n                            title_of_innovation:\r\n                                innovation[i].title_of_innovation,\r\n                            type_of_innovation:\r\n                                innovation[i].type_of_innovation,\r\n                            status: innovation[i].status,\r\n                            date_submitted: innovation[i].date_submitted,\r\n                            grant_code: innovation[i].grant_code,\r\n                            date_granted: innovation[i].date_granted,\r\n                            is_completed: innovation[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < innovation.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = innovation[i].created_by;\r\n\r\n                    if (\r\n                        innovation[i].is_completed === \"N\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        pending.push({\r\n                            _id: innovation[i]._id,\r\n                            faculty_name: innovation[i].faculty_name,\r\n                            title_of_innovation:\r\n                                innovation[i].title_of_innovation,\r\n                            type_of_innovation:\r\n                                innovation[i].type_of_innovation,\r\n                            status: innovation[i].status,\r\n                            date_submitted: innovation[i].date_submitted,\r\n                            grant_code: innovation[i].grant_code,\r\n                            date_granted: innovation[i].date_granted,\r\n                            is_completed: innovation[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getCompletedInnovations = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof innovation !== undefined) {\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < innovation.length; i++) {\r\n                    if (innovation[i].is_completed === \"Y\") {\r\n                        completed.push({\r\n                            _id: innovation[i]._id,\r\n                            faculty_name: innovation[i].faculty_name,\r\n                            title_of_innovation:\r\n                                innovation[i].title_of_innovation,\r\n                            type_of_innovation:\r\n                                innovation[i].type_of_innovation,\r\n                            status: innovation[i].status,\r\n                            date_submitted: innovation[i].date_submitted,\r\n                            grant_code: innovation[i].grant_code,\r\n                            date_granted: innovation[i].date_granted,\r\n                            is_completed: innovation[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const completed = [];\r\n\r\n                for (let i = 0; i < innovation.length; i++) {\r\n                    // Destructure some of the details\r\n                    let { user_id } = innovation[i].created_by;\r\n\r\n                    if (\r\n                        innovation[i].is_completed === \"Y\" &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        completed.push({\r\n                            _id: innovation[i]._id,\r\n                            faculty_name: innovation[i].faculty_name,\r\n                            title_of_innovation:\r\n                                innovation[i].title_of_innovation,\r\n                            type_of_innovation:\r\n                                innovation[i].type_of_innovation,\r\n                            status: innovation[i].status,\r\n                            date_submitted: innovation[i].date_submitted,\r\n                            grant_code: innovation[i].grant_code,\r\n                            date_granted: innovation[i].date_granted,\r\n                            is_completed: innovation[i].is_completed,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return completed;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={toggleModal}\r\n                size=\"lg\"\r\n                className=\"modal-dialog\"\r\n            >\r\n                <ModalHeader\r\n                    className=\"bg-primary text-light\"\r\n                    toggle={toggleModal}\r\n                >\r\n                    {!innovationId ? \"Add Innovation\" : \"Update Innovation\"}\r\n                </ModalHeader>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <ModalBody>\r\n                        <Container>\r\n                            <FormGroup>\r\n                                <Label>\r\n                                    Author{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    name=\"innovation_id\"\r\n                                    id=\"innovation_id\"\r\n                                    defaultValue={innovationId}\r\n                                    {...register(\"innovation_id\")}\r\n                                />\r\n                                <Select\r\n                                    id=\"react-select\"\r\n                                    closeMenuOnSelect={false}\r\n                                    components={animatedComponents}\r\n                                    isMulti={false}\r\n                                    options={getFacultyOption()}\r\n                                    name=\"faculty\"\r\n                                    value={facultyDetails}\r\n                                    onChange={setFacultyDetails}\r\n                                    isSearchable={true}\r\n                                />\r\n                                {/* <span className=\"text-danger\">\r\n                                    { errors.author?.message }\r\n                                </span> */}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>\r\n                                    Title of Innovation{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"title_of_innovation\"\r\n                                    id=\"title_of_innovation\"\r\n                                    defaultValue={titleOfInnovation}\r\n                                    {...register(\"title_of_innovation\")}\r\n                                />\r\n                                <span className=\"text-danger\">\r\n                                    { errors.title_of_innovation?.message }\r\n                                </span>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Type of Innovation{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            type=\"select\"\r\n                                            name=\"type_of_innovation\"\r\n                                            id=\"type_of_innovation\"\r\n                                            defaultValue={typeOfInnovation}\r\n                                            {...register(\"type_of_innovation\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"patent\">\r\n                                                Patent\r\n                                            </option>\r\n                                            <option value=\"utility model\">\r\n                                                Utility Model\r\n                                            </option>\r\n                                            <option value=\"trademark\">\r\n                                                Trademark\r\n                                            </option>\r\n                                            <option value=\"industrial design\">\r\n                                                Industrial Design\r\n                                            </option>\r\n                                            <option value=\"copyright\">\r\n                                                Copyright\r\n                                            </option>\r\n                                            <option value=\"geographic indication\">\r\n                                                Geographic Indication\r\n                                            </option>\r\n                                        </select>\r\n                                        <span className=\"text-danger\">\r\n                                            { errors.type_of_innovation?.message }\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Status{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            type=\"select\"\r\n                                            name=\"is_submitted_or_granted\"\r\n                                            id=\"is_submitted_or_granted\"\r\n                                            defaultValue={status}\r\n                                            {...register(\"is_submitted_or_granted\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"submitted\">\r\n                                                Submitted\r\n                                            </option>\r\n                                            <option value=\"granted\">\r\n                                                Granted\r\n                                            </option>\r\n                                        </select>\r\n                                        <span className=\"text-danger\">\r\n                                            { errors.is_submitted_or_granted?.message }\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                className={\r\n                                    watch(\"is_submitted_or_granted\") === \"submitted\" ? \"\" : \"hidden\"\r\n                                }\r\n                            >\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Date Submitted{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <DateTimePickerComponent\r\n                                            format=\"yyyy-MM-dd\"\r\n                                            id=\"datetimepicker\"\r\n                                            value={dateSubmitted}\r\n                                            onChange={(e) => {\r\n                                                setDateSubmitted(\r\n                                                    e.target.value\r\n                                                );\r\n                                            }}\r\n                                            required={\r\n                                                watch(\"is_submitted_or_granted\") === \"submitted\"\r\n                                                    ? true\r\n                                                    : false\r\n                                            }\r\n                                        />\r\n                                        <span className=\"text-danger\">\r\n                                            { errors.date_submitted?.message }\r\n                                        </span>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                className={watch(\"is_submitted_or_granted\") === \"granted\" ? \"\" : \"hidden\"}\r\n                            >\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Grant Code{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"grant_code\"\r\n                                            id=\"grant_code\"\r\n                                            value={grantCode}\r\n                                            onChange={(e) => {\r\n                                                setGrantCode(e.target.value);\r\n                                            }}\r\n                                            required={\r\n                                                watch(\"is_submitted_or_granted\") === \"granted\"\r\n                                                    ? true\r\n                                                    : false\r\n                                            }\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                className={ watch(\"is_submitted_or_granted\") === \"granted\" ? \"\" : \"hidden\"}\r\n                            >\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label>\r\n                                            Date Granted{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <DateTimePickerComponent\r\n                                            format=\"yyyy-MM-dd\"\r\n                                            id=\"datetimepicker\"\r\n                                            value={dateGranted}\r\n                                            onChange={(e) => {\r\n                                                setDateGranted(e.target.value);\r\n                                            }}\r\n                                            required={\r\n                                                watch(\"status\") === \"granted\"\r\n                                                    ? true\r\n                                                    : false\r\n                                            }\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                        </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Save Changes\r\n                        </Button>\r\n                        <Button color=\"light\" onClick={toggleModal}>\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Innovation\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/innovation\">Innovation</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 align-self-center\">\r\n                        <div className=\"customize-input float-right\">\r\n                            <select className=\"custom-select custom-select-set form-control bg-white border-0 custom-shadow custom-radius\">\r\n                                <option>2019</option>\r\n                                <option value={1}>2020</option>\r\n                                <option value={2}>2021</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            { currentUser.user_type === \"rh\" || currentUser.user_type === \"admin\" ? (<>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Nav tabs pills className=\"mb-3 font-14\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"1\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"1\");\r\n                                        }}\r\n                                    >\r\n                                        Pending\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"2\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"2\");\r\n                                        }}\r\n                                    >\r\n                                        Completed\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"1\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark\"\r\n                                        config={dtConfig}\r\n                                        records={getPendingInnovations()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                                <TabPane tabId=\"2\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark\"\r\n                                        config={dtConfig}\r\n                                        records={getCompletedInnovations()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons}\r\n                                    />\r\n                                </TabPane>\r\n                            </TabContent>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </>) : (<>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <ReactDatatable\r\n                                className=\"table font-14\"\r\n                                tHeadClassName=\"thead-dark\"\r\n                                config={dtConfig}\r\n                                records={getInnovations()}\r\n                                columns={dtColumns}\r\n                                extraButtons={dtExtraButtons}\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n                \r\n            </>)}\r\n            \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Innovation;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\error\\PageNotFound.jsx",[],"D:\\research-management-system\\client\\src\\components\\pages\\manage\\Department.js",[],"D:\\research-management-system\\client\\src\\components\\pages\\researches\\Proposal.jsx",["317","318","319","320","321","322","323","324","325"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {\r\n    getProposal,\r\n    createProposal,\r\n    updateProposal,\r\n    updateProposalRemarks,\r\n    deleteProposal,\r\n} from \"../../../redux/actions/proposal_action\";\r\n\r\nimport { getAccount } from \"../../../redux/actions/account_action\";\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    TabContent,\r\n    TabPane,\r\n    Row,\r\n    Col,\r\n} from \"reactstrap\";\r\n\r\nimport {\r\n    MdDelete,\r\n    MdKeyboardTab,\r\n    MdMoreVert,\r\n    MdThumbUp,\r\n    MdThumbDown,\r\n} from \"react-icons/md\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactDatatable from \"@ashvin27/react-datatable\";\r\nimport { DateTimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport moment from \"moment\";\r\n\r\nimport { jsPDF } from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst REMARKS = {\r\n    PENDING: \"pending\",\r\n    SUBMITTED: \"submitted\",\r\n    EVALUATED: \"evaluated\",\r\n    FOR_APPROVAL: \"for approval\",\r\n    APPROVED: \"approved\",\r\n    DISAPPROVED: \"disapproved\",\r\n};\r\n\r\nconst MODAL_TYPE = {\r\n    CRT: \"CREATE\",\r\n    UPD: \"UPDATE\",\r\n    DEL: \"DELETE\",\r\n};\r\n\r\nconst USER_TYPE = {\r\n    USR: \"user\",\r\n    ADMIN: \"admin\",\r\n    RD: \"rd\",\r\n    RH: \"rh\",\r\n    CD: \"cd\",\r\n};\r\n\r\nconst formSchema = yup.object().shape({\r\n    title_of_research: yup.string().required(\"Title of research field is required\"),\r\n    type_of_research: yup.string().required(\"Type of research field is required\"),\r\n    source_of_funding: yup.string().required(\"Source of funding field is required\"),\r\n    total_funds: yup.string().required(\"Total funds field is required.\"),\r\n    // name_of_agency: yup.string().required(\"Name of agency field is required\"),\r\n    // date_of_completion: yup.string().required(\"Date of completion field is required\"),\r\n});\r\n\r\nconst Proposal = ({ currentUser }) => {\r\n    const faculty = useSelector((state) => state.account.accounts); // This is to populate faculty data\r\n    const proposal = useSelector((state) => state.proposal.proposals); // This is to populate proposal data\r\n\r\n    const dispatch = useDispatch(); // this is to dispatch actions\r\n\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        formState: { errors },\r\n        watch,\r\n    } = useForm({\r\n        resolver: yupResolver(formSchema),\r\n    });\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [modalPrompt, setModalPrompt] = useState(false);\r\n    const [modalType, setModaType] = useState(null);\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n    const [researchId, setResearchId] = useState(null);\r\n    const [titleOfResearch, setTitleOfResearch] = useState(\"\");\r\n    const [typeOfResearch, setTypeOfResearch] = useState(\"\");\r\n    const [author, setAuthor] = useState([]);\r\n    const [sourceOfFunding, setSourceOfFunding] = useState(\"\");\r\n    const [totalFunds, setTotalFunds] = useState(\"\");\r\n    const [nameOfAgency, setNameOfAgency] = useState(\"\");\r\n    const [dateOfCompletion, setDateOfCompletion] = useState(new Date());\r\n    const [remarks, setRemarks] = useState(\"pending\");\r\n    const [status, setStatus] = useState(\"proposal\");\r\n    const [createdBy, setCreatedBy] = useState({\r\n        user_id: currentUser.id,\r\n        full_name: `${currentUser.first_name} ${currentUser.last_name}`,\r\n        user_type: currentUser.user_type,\r\n        college: currentUser.college,\r\n        campus: currentUser.campus,\r\n    });\r\n\r\n    // datatables configuration\r\n    const dtColumns = [\r\n        {\r\n            key: \"proposal_no\",\r\n            className: \"text-center\",\r\n            align: \"left\",\r\n            width: proposal.remarks === REMARKS.PENDING ? 80 : null,\r\n            cell: (proposal) => {\r\n                // Only the Research Head has the access of all the buttons\r\n                // if (proposal.remarks === REMARKS.PENDING && currentUser.user_type === USER_TYPE.USR) {\r\n                if (currentUser.user_type === USER_TYPE.ADMIN) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className={\r\n                                    proposal.remarks === REMARKS.PENDING\r\n                                        ? \"btn btn-secondary\"\r\n                                        : \"hidden\"\r\n                                }\r\n                                onClick={() => showEditForm(proposal)}\r\n                            >\r\n                                <span><i className=\"fas fa-pencil-alt\"></i> Edit</span>\r\n                            </Button>\r\n                            &nbsp;&nbsp;\r\n                            <Button\r\n                                size=\"sm\"\r\n                                className={\r\n                                    proposal.remarks === REMARKS.PENDING\r\n                                        ? \"btn btn-danger\"\r\n                                        : \"hidden\"\r\n                                }\r\n                                onClick={() =>\r\n                                    showModalPrompt(\r\n                                        proposal,\r\n                                        null,\r\n                                        MODAL_TYPE.DEL\r\n                                    )\r\n                                }\r\n                            >\r\n                                <span><i className=\"fas fa-trash-alt\"></i> Remove</span>\r\n                            </Button>\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n            },\r\n        },\r\n        {\r\n            key: \"title_of_research\",\r\n            text: \"Title of Research\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            width: 400,\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"type_of_research\",\r\n            text: \"Type of Research\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (proposal) => {\r\n                const { type_of_research } = proposal;\r\n\r\n                return (\r\n                    <div>\r\n                        {type_of_research.charAt(0).toUpperCase() +\r\n                            type_of_research.substring(1)}\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"author_list\",\r\n            text: \"Author(s)\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"source_of_funding\",\r\n            text: \"Funding\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            isSearchable: true,\r\n            cell: (proposal) => {\r\n                const { source_of_funding } = proposal;\r\n\r\n                return (\r\n                    <div>\r\n                        {source_of_funding.charAt(0).toUpperCase() +\r\n                            source_of_funding.substring(1)}\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            key: \"total_funds\",\r\n            text: \"Total Funds\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            key: \"remarks\",\r\n            text: \"Status\",\r\n            className: \"font-14\",\r\n            align: \"left\",\r\n            sortable: true,\r\n            cell: (proposal) => {\r\n                if(proposal.remarks === REMARKS.APPROVED) {\r\n                    return (\r\n                        <div>\r\n                            <span className=\"badge badge-success\">\r\n                                { proposal.remarks.toUpperCase() }\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div>\r\n                            <span className=\"badge badge-secondary\">\r\n                                { proposal.remarks.toUpperCase() }\r\n                            </span>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        {\r\n            key: \"action\",\r\n            text: \"\",\r\n            className: \"\",\r\n            align: \"left\",\r\n            cell: (proposal) => {\r\n                // Only the Research Head has the access of all the buttons\r\n                if (\r\n                    currentUser.user_type === USER_TYPE.RH ||\r\n                    currentUser.user_type === USER_TYPE.ADMIN\r\n                ) {\r\n                    if (proposal.remarks === REMARKS.PENDING) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    className=\"btn btn-primary btn-sm\"\r\n                                    onClick={() =>\r\n                                        showModalPrompt(\r\n                                            proposal,\r\n                                            REMARKS.SUBMITTED,\r\n                                            MODAL_TYPE.UPD\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Submitted\r\n                                </Button>\r\n                            </React.Fragment>\r\n                        );\r\n                    } else if (proposal.remarks === REMARKS.SUBMITTED) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    className=\"btn btn-primary btn-sm\"\r\n                                    onClick={() =>\r\n                                        showModalPrompt(\r\n                                            proposal,\r\n                                            REMARKS.EVALUATED,\r\n                                            MODAL_TYPE.UPD\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Evaluated\r\n                                </Button>\r\n                            </React.Fragment>\r\n                        );\r\n                    } else if (proposal.remarks === REMARKS.EVALUATED) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <div className=\"dropdown\">\r\n                                    <Link\r\n                                        to=\"#\"\r\n                                        className=\"text-secondary dropdown-toggle\"\r\n                                        type=\"button\"\r\n                                        id=\"dropDownApprovedDisapproved\"\r\n                                        data-toggle=\"dropdown\"\r\n                                        aria-haspopup=\"true\"\r\n                                        aria-expanded=\"false\"\r\n                                    >\r\n                                        <MdMoreVert size={20} />\r\n                                    </Link>\r\n                                    <div\r\n                                        className=\"dropdown-menu\"\r\n                                        aria-labelledby=\"dropdownMenuButton\"\r\n                                    >\r\n                                        <Link\r\n                                            className=\"dropdown-item\"\r\n                                            to=\"#\"\r\n                                            onClick={() =>\r\n                                                showModalPrompt(\r\n                                                    proposal,\r\n                                                    REMARKS.FOR_APPROVAL,\r\n                                                    MODAL_TYPE.UPD\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            <MdThumbUp />\r\n                                            &nbsp;&nbsp;For Approval\r\n                                        </Link>\r\n                                        <Link\r\n                                            className=\"dropdown-item\"\r\n                                            to=\"#\"\r\n                                            onClick={() =>\r\n                                                showModalPrompt(\r\n                                                    proposal,\r\n                                                    REMARKS.DISAPPROVED,\r\n                                                    MODAL_TYPE.UPD\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            <MdThumbDown />\r\n                                            &nbsp;&nbsp;Disapproved\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                            </React.Fragment>\r\n                        );\r\n                    } else if (proposal.remarks === REMARKS.FOR_APPROVAL) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Button\r\n                                    className=\"btn btn-primary btn-sm\"\r\n                                    onClick={() =>\r\n                                        showModalPrompt(\r\n                                            proposal,\r\n                                            REMARKS.APPROVED,\r\n                                            MODAL_TYPE.UPD\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Approved\r\n                                </Button>\r\n                            </React.Fragment>\r\n                        );\r\n                    } \r\n                    // else if (proposal.remarks === REMARKS.APPROVED) {\r\n                    //     return (\r\n                    //         <React.Fragment>\r\n                    //             <div className=\"badge badge-success\">\r\n                    //                 {proposal.remarks.toUpperCase()}\r\n                    //             </div>\r\n                    //         </React.Fragment>\r\n                    //     );\r\n                    // }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n\r\n    const dtConfig = {\r\n        key_column: \"id\",\r\n        page_size: 10,\r\n        length_menu: [10, 20, 50],\r\n        button: {\r\n            extra: true,\r\n        },\r\n    };\r\n\r\n    const dtExtraButtons = [\r\n        {\r\n            className: \"btn btn-primary\",\r\n            title: \"Create New\",\r\n            children: [\r\n                <span>\r\n                    <i\r\n                        className=\"fa fa-plus-circle\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                    &nbsp; Create\r\n                </span>,\r\n            ],\r\n            onClick: () => {\r\n                setModal(!modal);\r\n            },\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        dispatch(getAccount());\r\n        dispatch(getProposal());\r\n    }, [dispatch]);\r\n\r\n    const clearForm = () => {\r\n        setResearchId(null);\r\n        setTitleOfResearch(\"\");\r\n        setTypeOfResearch(\"\");\r\n        setAuthor(\"\");\r\n        setSourceOfFunding(\"\");\r\n        setNameOfAgency(\"\");\r\n        setDateOfCompletion(\"\");\r\n        // setRemarks(\"\");\r\n    };\r\n\r\n    const toggleModal = (modal_type) => {\r\n        if (modal_type === MODAL_TYPE.CRT) {\r\n            setModal(!modal);\r\n            setModaType(MODAL_TYPE.CRT);\r\n            clearForm();\r\n        } else if (modal_type === MODAL_TYPE.UPD) {\r\n            setModalPrompt(!modalPrompt);\r\n            setModaType(MODAL_TYPE.UPD);\r\n        } else {\r\n            setModalPrompt(!modalPrompt); \r\n            setModaType(MODAL_TYPE.DEL);\r\n        }\r\n    };\r\n\r\n    const toggleTab = (tabId) => {\r\n        if (activeTab !== tabId) setActiveTab(tabId);\r\n    };\r\n\r\n    const showEditForm = (data) => {\r\n        const {\r\n            _id,\r\n            title_of_research,\r\n            type_of_research,\r\n            author,\r\n            source_of_funding,\r\n            name_of_agency,\r\n            total_funds,\r\n            // date_of_completion,\r\n            remarks,\r\n        } = data;\r\n\r\n        // const date_completed = moment(date_of_completion).format(\"MM/DD/YYYY\");\r\n\r\n        toggleModal(MODAL_TYPE.CRT);\r\n\r\n        setResearchId(_id);\r\n        setTitleOfResearch(title_of_research);\r\n        setTypeOfResearch(type_of_research);\r\n        setAuthor(author);\r\n        setSourceOfFunding(source_of_funding);\r\n        setNameOfAgency(name_of_agency);\r\n        // setDateOfCompletion(date_completed);\r\n        setTotalFunds(total_funds);\r\n        setRemarks(remarks);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        const authors = [];\r\n        const dateFormat = moment(dateOfCompletion).format(\"L\");\r\n        author.map((list) => authors.push(list.label));\r\n\r\n        const details = {\r\n            research_id: data.research_id,\r\n            title_of_research: data.title_of_research,\r\n            type_of_research: data.type_of_research,\r\n            author,\r\n            author_list: authors.join(\", \"),\r\n            source_of_funding: data.source_of_funding,\r\n            name_of_agency: data.name_of_agency,\r\n            total_funds: data.total_funds,\r\n            remarks: remarks,\r\n            status: status,\r\n            created_by: createdBy,\r\n        };\r\n\r\n        if (!data.research_id) {\r\n            dispatch(createProposal(details));\r\n        } else {\r\n            dispatch(updateProposal(details));\r\n        }\r\n\r\n        toggleModal(MODAL_TYPE.CRT);\r\n    };\r\n\r\n    const showModalPrompt = (proposal, remarks, modal_type) => {\r\n        // UPDATE status modal will appear.\r\n        if (modal_type === MODAL_TYPE.UPD) {\r\n            setResearchId(proposal._id);\r\n            setRemarks(remarks);\r\n            toggleModal(MODAL_TYPE.UPD);\r\n        }\r\n\r\n        // DELETE modal will appear\r\n        if (modal_type === MODAL_TYPE.DEL) {\r\n            setResearchId(proposal._id);\r\n            toggleModal(MODAL_TYPE.DEL);\r\n        }\r\n    };\r\n\r\n    const onSubmitUpdateStatusOrDelete = (modal_type) => {\r\n        // IF MODAL is delete\r\n        if (modal_type === MODAL_TYPE.DEL) {\r\n            dispatch(deleteProposal(researchId));\r\n        } else if (modal_type === MODAL_TYPE.UPD) {\r\n            dispatch(\r\n                updateProposalRemarks({ research_id: researchId, remarks })\r\n            );\r\n        }\r\n\r\n        toggleModal(\r\n            modal_type === MODAL_TYPE.DEL ? MODAL_TYPE.DEL : MODAL_TYPE.UPD\r\n        );\r\n    };\r\n\r\n    const getUsersProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n        const user = [];\r\n\r\n        for (let i = 0; i < proposal.length; i++) {\r\n            // Destructure some of the details created by.\r\n            let { user_id } = proposal[i].created_by;\r\n\r\n            // Displays ONLY the records of the current logged in user.\r\n            if (user_id === currentUserId) {\r\n                user.push({\r\n                    _id: proposal[i]._id,\r\n                    title_of_research: proposal[i].title_of_research,\r\n                    type_of_research: proposal[i].type_of_research,\r\n                    author: proposal[i].author,\r\n                    author_list: proposal[i].author_list,\r\n                    source_of_funding: proposal[i].source_of_funding,\r\n                    date_of_completion: proposal[i].date_of_completion,\r\n                    status: proposal[i].status,\r\n                    remarks: proposal[i].remarks,\r\n                });\r\n            }\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    const getPendingProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof proposal !== undefined) {\r\n            // Current logged in is RESEARCH HEAD or ADMINISTRATOR.\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Displays ALL the records.\r\n                    if (proposal[i].remarks === REMARKS.PENDING) {\r\n                        pending.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const pending = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Destructure some of the details created by.\r\n                    let { user_id } = proposal[i].created_by;\r\n\r\n                    // Displays ONLY the records of the current logged in user.\r\n                    if (\r\n                        proposal[i].remarks === REMARKS.PENDING &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        pending.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return pending;\r\n            }\r\n        }\r\n    };\r\n\r\n    console.log(\"Pending proposal\", getPendingProposal());\r\n\r\n    const getSubmittedProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof proposal !== undefined) {\r\n            // Current logged in is RESEARCH HEAD or ADMINISTRATOR.\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const submitted = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Displays ONLY the proposal of the current logged in user.\r\n                    if (proposal[i].remarks === REMARKS.SUBMITTED) {\r\n                        submitted.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                            created_by_id: proposal[i].created_by.user_id,\r\n                            created_by_name: proposal[i].created_by.full_name,\r\n                            created_by_type: proposal[i].created_by.user_type,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return submitted;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const submitted = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Destructure some of the details created by.\r\n                    let { user_id } = proposal[i].created_by;\r\n\r\n                    // Displays ONLY the records of the current logged in user.\r\n                    if (\r\n                        proposal[i].remarks === REMARKS.SUBMITTED &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        submitted.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return submitted;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getEvaluatedProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof proposal !== undefined) {\r\n            // Current logged in is RESEARCH HEAD or ADMINISTRATOR.\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const evaluated = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Displays ONLY the proposal of the current logged in user.\r\n                    if (proposal[i].remarks === REMARKS.EVALUATED) {\r\n                        evaluated.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                            created_by_id: proposal[i].created_by.user_id,\r\n                            created_by_name: proposal[i].created_by.full_name,\r\n                            created_by_type: proposal[i].created_by.user_type,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return evaluated;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const evaluated = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Destructure some of the details created by.\r\n                    let { user_id } = proposal[i].created_by;\r\n\r\n                    // Displays ONLY the records of the current logged in user.\r\n                    if (\r\n                        proposal[i].remarks === REMARKS.EVALUATED &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        evaluated.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return evaluated;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getForApprovalProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof proposal !== undefined) {\r\n            // Current logged in is RESEARCH HEAD or ADMINISTRATOR.\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const for_approval = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Displays ONLY the proposal of the current logged in user.\r\n                    if (proposal[i].remarks === REMARKS.FOR_APPROVAL) {\r\n                        for_approval.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                            created_by_id: proposal[i].created_by.user_id,\r\n                            created_by_name: proposal[i].created_by.full_name,\r\n                            created_by_type: proposal[i].created_by.user_type,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return for_approval;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const for_approval = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Destructure some of the details created by.\r\n                    let { user_id } = proposal[i].created_by;\r\n\r\n                    // Displays ONLY the records of the current logged in user.\r\n                    if (\r\n                        proposal[i].remarks === REMARKS.FOR_APPROVAL &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        for_approval.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return for_approval;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getApprovedProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof proposal !== undefined) {\r\n            // Current logged in is RESEARCH HEAD or ADMINISTRATOR.\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const approved = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Displays ONLY the proposal of the current logged in user.\r\n                    if (proposal[i].remarks === REMARKS.APPROVED) {\r\n                        approved.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                            created_by_id: proposal[i].created_by.user_id,\r\n                            created_by_name: proposal[i].created_by.full_name,\r\n                            created_by_type: proposal[i].created_by.user_type,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return approved;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const approved = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Destructure some of the details created by.\r\n                    let { user_id } = proposal[i].created_by;\r\n\r\n                    // Displays ONLY the records of the current logged in user.\r\n                    if (\r\n                        proposal[i].remarks === REMARKS.APPROVED &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        approved.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return approved;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getDisApprovedProposal = () => {\r\n        const currentUserId = currentUser.id;\r\n\r\n        if (typeof proposal !== undefined) {\r\n            // Current logged in is RESEARCH HEAD or ADMINISTRATOR.\r\n            if (\r\n                currentUser.user_type === USER_TYPE.RH ||\r\n                currentUser.user_type === USER_TYPE.ADMIN\r\n            ) {\r\n                const disapproved = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Displays ONLY the proposal of the current logged in user.\r\n                    if (proposal[i].remarks === REMARKS.DISAPPROVED) {\r\n                        disapproved.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                            created_by_id: proposal[i].created_by.user_id,\r\n                            created_by_name: proposal[i].created_by.full_name,\r\n                            created_by_type: proposal[i].created_by.user_type,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return disapproved;\r\n            }\r\n            // Current logged in user is USER.\r\n            else {\r\n                const disapproved = [];\r\n\r\n                for (let i = 0; i < proposal.length; i++) {\r\n                    // Destructure some of the details created by.\r\n                    let { user_id } = proposal[i].created_by;\r\n\r\n                    // Displays ONLY the records of the current logged in user.\r\n                    if (\r\n                        proposal[i].remarks === REMARKS.DISAPPROVED &&\r\n                        user_id === currentUserId\r\n                    ) {\r\n                        disapproved.push({\r\n                            _id: proposal[i]._id,\r\n                            title_of_research: proposal[i].title_of_research,\r\n                            type_of_research: proposal[i].type_of_research,\r\n                            author: proposal[i].author,\r\n                            author_list: proposal[i].author_list,\r\n                            source_of_funding: proposal[i].source_of_funding,\r\n                            total_funds: proposal[i].total_funds,\r\n                            // date_of_completion: proposal[i].date_of_completion,\r\n                            status: proposal[i].status,\r\n                            remarks: proposal[i].remarks,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return disapproved;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getAuthorOptions = () => {\r\n        const authors = [];\r\n\r\n        for (let i = 0; i < faculty.length; i++) {\r\n            authors.push({\r\n                value: faculty[i]._id,\r\n                label: faculty[i].full_name,\r\n            });\r\n        }\r\n\r\n        return authors;\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            <Modal\r\n                isOpen={modalPrompt}\r\n                toggle={() => toggleModal(MODAL_TYPE.DEL)}\r\n                className=\"modal-dialogue\"\r\n            >\r\n                <ModalHeader\r\n                    className={\r\n                        modalType === MODAL_TYPE.DEL\r\n                            ? \"bg-danger text-light\"\r\n                            : \"bg-primary text-light\"\r\n                    }\r\n                    toggle={() => toggleModal(MODAL_TYPE.DEL)}\r\n                >\r\n                    {modalType === MODAL_TYPE.DEL ? \"Delete\" : \"Update Status\"}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <Label>\r\n                        {modalType === MODAL_TYPE.DEL\r\n                            ? \"Are you sure do you want to delete this data?\"\r\n                            : \"Are you sure you want to update the status?\"}\r\n                    </Label>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color={\r\n                            modalType === MODAL_TYPE.DEL ? \"danger\" : \"primary\"\r\n                        }\r\n                        onClick={() =>\r\n                            onSubmitUpdateStatusOrDelete(\r\n                                modalType === MODAL_TYPE.DEL\r\n                                    ? MODAL_TYPE.DEL\r\n                                    : MODAL_TYPE.UPD\r\n                            )\r\n                        }\r\n                    >\r\n                        {modalType === MODAL_TYPE.DEL ? \"Delete\" : \"Update\"}\r\n                    </Button>\r\n                    <Button\r\n                        color=\"light\"\r\n                        onClick={() => toggleModal(MODAL_TYPE.DEL)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={() => toggleModal(MODAL_TYPE.CRT)}\r\n                size=\"lg\"\r\n                className=\"modal-dialogue\"\r\n            >\r\n                <ModalHeader\r\n                    className=\"bg-primary text-light\"\r\n                    toggle={() => toggleModal(MODAL_TYPE.CRT)}\r\n                >\r\n                    {!researchId ? \"Add Proposal\" : \"Update Proposal\"}\r\n                </ModalHeader>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <ModalBody>\r\n                        <Container>\r\n                            <FormGroup>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    name=\"research_id\"\r\n                                    id=\"research_id\"\r\n                                    defaultValue={researchId}\r\n                                    {...register(\"research_id\")}\r\n                                />\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    name=\"status\"\r\n                                    id=\"status\"\r\n                                    defaultValue={status}\r\n                                    {...register(\"status\")}\r\n                                />\r\n                                <Label for=\"\">\r\n                                    Title of Research{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <input\r\n                                    className={\r\n                                        errors.title_of_research\r\n                                            ? \"is-invalid form-control\"\r\n                                            : \"form-control\"\r\n                                    }\r\n                                    type=\"text\"\r\n                                    name=\"title_of_research\"\r\n                                    id=\"title_of_research\"\r\n                                    defaultValue={titleOfResearch}\r\n                                    {...register(\"title_of_research\")}\r\n                                />\r\n                                <small className=\"text-danger\">\r\n                                    {errors.title_of_research?.message}\r\n                                </small>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"\">\r\n                                    Type of Research{\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <select\r\n                                    className={\r\n                                        errors.type_of_research\r\n                                            ? \"is-invalid form-control\"\r\n                                            : \"form-control\"\r\n                                    }\r\n                                    type=\"select\"\r\n                                    name=\"type_of_research\"\r\n                                    id=\"type_of_research\"\r\n                                    defaultValue={typeOfResearch}\r\n                                    {...register(\"type_of_research\")}\r\n                                >\r\n                                    <option value=\"\">Choose...</option>\r\n                                    <option value=\"descriptive\">\r\n                                        Descriptive\r\n                                    </option>\r\n                                    <option value=\"developmental\">\r\n                                        Developmental\r\n                                    </option>\r\n                                    <option value=\"experimental\">\r\n                                        Experimental\r\n                                    </option>\r\n                                    <option value=\"modelling\">Modelling</option>\r\n                                    <option value=\"others\">Others</option>\r\n                                </select>\r\n                                <small className=\"text-danger\">\r\n                                    {errors.type_of_research?.message}\r\n                                </small>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"\">\r\n                                    Author(s){\" \"}\r\n                                    <span className=\"text-danger\">*</span>\r\n                                </Label>\r\n                                <Select\r\n                                    className=\"is-invalid\"\r\n                                    closeMenuOnSelect={false}\r\n                                    components={animatedComponents}\r\n                                    isMulti\r\n                                    options={getAuthorOptions()}\r\n                                    name=\"author\"\r\n                                    value={author}\r\n                                    onChange={setAuthor}\r\n                                    styles={{\r\n                                        borderRadius: \"0 !important\",\r\n                                    }}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label for=\"\">\r\n                                            Source of Funding{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className={\r\n                                                errors.source_of_funding\r\n                                                    ? \"is-invalid form-control\"\r\n                                                    : \"form-control\"\r\n                                            }\r\n                                            type=\"select\"\r\n                                            name=\"source_of_funding\"\r\n                                            id=\"source_of_funding\"\r\n                                            defaultValue={sourceOfFunding}\r\n                                            {...register(\"source_of_funding\")}\r\n                                        >\r\n                                            <option value=\"\">Choose...</option>\r\n                                            <option value=\"stf\">STF</option>\r\n                                            <option value=\"gaa\">GAA</option>\r\n                                            <option value=\"external\">\r\n                                                External\r\n                                            </option>\r\n                                            <option value=\"personal\">\r\n                                                Personal\r\n                                            </option>\r\n                                        </select>\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.source_of_funding?.message}\r\n                                        </small>\r\n                                    </Col>\r\n                                    <Col md=\"6\">\r\n                                        <Label for=\"\">\r\n                                            {watch(\"source_of_funding\") ===\r\n                                            \"external\"\r\n                                                ? \"Name of Agency\"\r\n                                                : \"\"}\r\n                                        </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type={\r\n                                                watch(\"source_of_funding\") ===\r\n                                                \"external\"\r\n                                                    ? \"text\"\r\n                                                    : \"hidden\"\r\n                                            }\r\n                                            name=\"name_of_agency\"\r\n                                            id=\"name_of_agency\"\r\n                                            defaultValue={nameOfAgency}\r\n                                            {...register(\"name_of_agency\")}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label for=\"\">\r\n                                            Total Funds{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </Label>\r\n                                        <input\r\n                                            className={\r\n                                                errors.total_funds\r\n                                                    ? \"is-invalid form-control\"\r\n                                                    : \"form-control\"\r\n                                            }\r\n                                            name=\"total_funds\"\r\n                                            id=\"total_funds\"\r\n                                            defaultValue={totalFunds}\r\n                                            {...register(\"total_funds\")}\r\n                                        />\r\n                                        <small className=\"text-danger\">\r\n                                            {errors.total_funds?.message}\r\n                                        </small>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"6\">\r\n                                        <Label for=\"\">Status</Label>\r\n                                        <br />\r\n                                        <p className=\"badge badge-primary\">\r\n                                            {remarks.toUpperCase()}\r\n                                        </p>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                        </Container>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Save Changes\r\n                        </Button>\r\n                        <Button\r\n                            color=\"light\"\r\n                            onClick={() => toggleModal(MODAL_TYPE.CRT)}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n\r\n            <div className=\"page-breadcrumb\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 align-self-center\">\r\n                        <h3 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\r\n                            Proposal\r\n                        </h3>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb m-0 p-0\">\r\n                                    <li className=\"breadcrumb-item\">\r\n                                        <a href=\"/\">Settings</a>\r\n                                    </li>\r\n                                    <li\r\n                                        className=\"breadcrumb-item text-muted active\"\r\n                                        aria-current=\"page\"\r\n                                    >\r\n                                        <a href=\"/proposal\">Proposal</a>\r\n                                    </li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 align-self-center\">\r\n                        <div className=\"customize-input float-right\">\r\n                            <select className=\"custom-select custom-select-set form-control bg-white border-0 custom-shadow custom-radius\">\r\n                                <option>2019</option>\r\n                                <option value={1}>2020</option>\r\n                                <option value={2}>2021</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            { currentUser.user_type === \"rh\" || currentUser.user_type === \"rh\" ? (\r\n                <Container fluid>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Nav tabs pills className=\"mb-3 font-14\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"1\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"1\");\r\n                                        }}\r\n                                    >\r\n                                        Pending\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"2\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"2\");\r\n                                        }}\r\n                                    >\r\n                                        Submitted\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"3\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"3\");\r\n                                        }}\r\n                                    >\r\n                                        Evaluated\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"4\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"4\");\r\n                                        }}\r\n                                    >\r\n                                        For Approval\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"5\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"5\");\r\n                                        }}\r\n                                    >\r\n                                        Approved\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        href=\"#\"\r\n                                        className={\r\n                                            activeTab === \"6\" ? \"active\" : null\r\n                                        }\r\n                                        onClick={() => {\r\n                                            toggleTab(\"6\");\r\n                                        }}\r\n                                    >\r\n                                        Disapproved\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"1\">\r\n                                    <div className=\"table-responsive\">\r\n                                        <ReactDatatable\r\n                                            className=\"table font-14\"\r\n                                            tHeadClassName=\"thead-dark font-14 font-weight-medium\"\r\n                                            config={dtConfig}\r\n                                            records={getPendingProposal()}\r\n                                            columns={dtColumns}\r\n                                            extraButtons={dtExtraButtons}\r\n                                        />\r\n                                    </div>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"2\">\r\n                                    <div className=\"table-responsive\">\r\n                                        <ReactDatatable\r\n                                            className=\"table font-14\"\r\n                                            tHeadClassName=\"thead-dark font-14 font-weight-medium\"\r\n                                            config={dtConfig}\r\n                                            records={getSubmittedProposal()}\r\n                                            columns={dtColumns}\r\n                                            extraButtons={dtExtraButtons}\r\n                                        />\r\n                                    </div>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"3\">\r\n                                    <div className=\"table-responsive\">\r\n                                        <ReactDatatable\r\n                                            className=\"table font-14\"\r\n                                            tHeadClassName=\"thead-dark font-14 font-weight-medium\"\r\n                                            config={dtConfig}\r\n                                            records={getEvaluatedProposal()}\r\n                                            columns={dtColumns}\r\n                                            extraButtons={dtExtraButtons}\r\n                                        />\r\n                                    </div>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"4\">\r\n                                    <div className=\"table-responsive\">\r\n                                        <ReactDatatable\r\n                                            className=\"table font-14\"\r\n                                            tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                            config={dtConfig}\r\n                                            records={getForApprovalProposal()}\r\n                                            columns={dtColumns}\r\n                                            extraButtons={dtExtraButtons}\r\n                                        />\r\n                                    </div>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"5\">\r\n                                    <div className=\"table-responsive\">\r\n                                        <ReactDatatable\r\n                                            className=\"table font-14\"\r\n                                            tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                            config={dtConfig}\r\n                                            records={getApprovedProposal()}\r\n                                            columns={dtColumns}\r\n                                            extraButtons={dtExtraButtons}\r\n                                        />\r\n                                    </div>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"6\">\r\n                                    <div className=\"table-responsive\">\r\n                                        <ReactDatatable\r\n                                            className=\"table font-14\"\r\n                                            tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                            config={dtConfig}\r\n                                            records={getDisApprovedProposal()}\r\n                                            columns={dtColumns}\r\n                                            extraButtons={dtExtraButtons}\r\n                                        />\r\n                                    </div>\r\n                                </TabPane>\r\n                            </TabContent>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            ) : (\r\n                <>\r\n                    <Container fluid>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <div className=\"table-responsive\">\r\n                                    <ReactDatatable\r\n                                        className=\"table font-14\"\r\n                                        tHeadClassName=\"thead-dark font-weight-medium\"\r\n                                        config={dtConfig}\r\n                                        records={getUsersProposal()}\r\n                                        columns={dtColumns}\r\n                                        extraButtons={dtExtraButtons} \r\n                                    />\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </>\r\n            ) }\r\n            \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Proposal;\r\n","D:\\research-management-system\\client\\src\\components\\pages\\researches\\dashboard\\Faculties.jsx",[],"D:\\research-management-system\\client\\src\\components\\auth\\Login.jsx",["326","327","328","329","330","331","332"],"import React, { useState, useEffect, useContext, Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\nimport AccountContext from \"../../context/AccountContext\";\r\n\r\nimport \"./login.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FaUser, FaLock } from \"react-icons/fa\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\n\r\nimport SDSSULOGO from \"../../images/sdssu-logo.webp\";\r\nimport COVERPHOTO from \"../../images/research-collaboration.svg\";\r\n\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n} from \"reactstrap\";\r\n\r\nconst Login = () => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const [username, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const { setUserData } = useContext(AccountContext);\r\n    const history = useHistory();\r\n\r\n    const onSubmitFormLogin = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const loginResponse = await axios.post(\r\n            \"https://sdssu-rms.herokuapp.com/account/login\",\r\n            { username, password }\r\n        );\r\n\r\n        const { success, token, user, message } = loginResponse.data;\r\n\r\n        if (success) {\r\n            setUserData({ token, user });\r\n            localStorage.setItem(\"auth-token\", `Bearer ${token}`);\r\n\r\n            history.push(\"/dashboard\");\r\n        } else {\r\n            toast.error(message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n\r\n            <Container>\r\n                <Row\r\n                    style={{\r\n                        position: \"relative\",\r\n                        height: \"100%\",\r\n                        margin: \"0 auto\",\r\n                    }}\r\n                >\r\n                    <Col md=\"7\">\r\n                        <div\r\n                            style={{\r\n                                position: \"relative\",\r\n                                width: \"100%\",\r\n                                top: \"20%\",\r\n                                bottom: \"30%\",\r\n                                height: \"20%\",\r\n                            }}\r\n                        >\r\n                            <h1 className=\"title text-primary font-weight-bold\">\r\n                                SURIGAO DEL SUR STATE UNIVERSITY{\" \"}\r\n                            </h1>\r\n                            <h2 className=\"\">Research Management System</h2>\r\n                            <img\r\n                                style={{\r\n                                    position: \"fixed\",\r\n                                    zIndex: \"0\",\r\n                                }}\r\n                                className=\"d-block mx-auto\"\r\n                                src={COVERPHOTO}\r\n                                alt=\"\"\r\n                                width=\"500\"\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                    <Col md=\"5\">\r\n                        <Card\r\n                            className=\"pt-3 pr-3 pl-3 pb-5\"\r\n                            style={{\r\n                                position: \"relative\",\r\n                                width: \"400px\",\r\n                                // top: \"20%\",\r\n                                margin: \"150px 0\",\r\n                                borderRadius: \"8px\",\r\n                                boxShadow:\r\n                                    \"0 2px 4px rgba(0, 0, 0, .1), 0 8px 16px rgba(0, 0, 0, .1)\",\r\n                            }}\r\n                        >\r\n                            <img\r\n                                style={{\r\n                                    padding: \"0\",\r\n                                    margin: \"0\",\r\n                                    height: \"120px\",\r\n                                    width: \"120px\",\r\n                                    position: \"relative\",\r\n                                    top: \"-70px\",\r\n                                    left: \"120px\",\r\n                                    bottom: \"-30px\",\r\n                                }}\r\n                                src={SDSSULOGO}\r\n                                alt=\"sdssu-logo\"\r\n                            />\r\n                            <Form\r\n                                style={{ marginTop: \"-40px\" }}\r\n                                onSubmit={onSubmitFormLogin}\r\n                            >\r\n                                <FormGroup>\r\n                                    <Input\r\n                                        style={{\r\n                                            borderRadius: \"6px\",\r\n                                            border: \"1px solid #dddfe2\",\r\n                                        }}\r\n                                        className=\"pt-4 pb-4\"\r\n                                        autoComplete=\"false\"\r\n                                        type=\"text\"\r\n                                        name=\"username\"\r\n                                        id=\"username\"\r\n                                        value={username}\r\n                                        onChange={(e) => {\r\n                                            setUserName(e.target.value);\r\n                                        }}\r\n                                        placeholder=\"Username\"\r\n                                        required\r\n                                    />\r\n                                    {/* <small className=\"text-danger\">Username field is required</small> */}\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Input\r\n                                        style={{\r\n                                            borderRadius: \"6px\",\r\n                                            border: \"1px solid #dddfe2\",\r\n                                        }}\r\n                                        className=\"pt-4 pb-4\"\r\n                                        autoComplete=\"false\"\r\n                                        type={\r\n                                            showPassword ? \"text\" : \"password\"\r\n                                        }\r\n                                        name=\"password\"\r\n                                        id=\"password\"\r\n                                        value={password}\r\n                                        onChange={(e) => {\r\n                                            setPassword(e.target.value);\r\n                                        }}\r\n                                        placeholder=\"Password\"\r\n                                        required\r\n                                    />\r\n                                </FormGroup>\r\n                                <FormGroup check>\r\n                                    <Label check className=\"\">\r\n                                        <Input\r\n                                            type=\"checkbox\"\r\n                                            onChange={() => {\r\n                                                setShowPassword(!showPassword);\r\n                                            }}\r\n                                        />{\" \"}\r\n                                        Show password\r\n                                    </Label>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <button\r\n                                        style={{\r\n                                            padding: \"8px 16px\",\r\n                                            borderRadius: \"6px\",\r\n                                            width: \"100%\",\r\n                                            fontSize: \"20px\",\r\n                                        }}\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-primary mt-3\"\r\n                                    >\r\n                                        Log In\r\n                                    </button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","D:\\research-management-system\\client\\src\\redux\\actions\\account_action.js",["333"],"import * as api from '../../api';\r\nimport { toast } from 'react-toastify';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// action creators\r\nexport const getAccount = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchAccount();\r\n\r\n        if(data.success) {\r\n            dispatch({ \r\n                type: 'FETCH_ACCOUNT', \r\n                payload: data.results \r\n            });\r\n        } else {\r\n            console.log(\"Error:\", data.message);\r\n        }\r\n    } catch (error) {\r\n        console.log('Error: ', error.message);\r\n    }\r\n}\r\n\r\nexport const createAccount = (account_data) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.createAccount(account_data);\r\n\r\n        if(data.success) {\r\n            dispatch({ \r\n                type: 'CREATE_ACCOUNT', \r\n                payload: data.results \r\n            });\r\n\r\n            toast.success(data.message);\r\n        } else {\r\n            toast.error(data.message);\r\n        }\r\n    } catch (error) {\r\n        toast.error(\"Unable to create this data.\");\r\n        console.log('Error: ', error);\r\n    }\r\n}\r\n\r\nexport const updateAccount = (account_details) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.updateAccount(account_details);\r\n        \r\n        dispatch({ type: 'UPDATE_ACCOUNT', payload: data });\r\n        toast.success(\"Updated successfully\");\r\n    } catch (error) {\r\n        toast.error(\"Unable to update this data.\");\r\n        console.log('Error: ', error);\r\n    }\r\n}\r\n\r\n\r\nexport const deleteAccount = (department_id) => async (dispatch) => {\r\n    // try {\r\n    //     await api.deleteDepartment(department_id);\r\n\r\n    //     dispatch({ type: 'DELETE_DEPT', payload: department_id });\r\n    //     toast.success(\"Deleted successfully\");\r\n    // } catch (error) {\r\n    //     toast.error(\"Unable to delete this data.\");\r\n    //     console.log('Error: ', error);\r\n    // }\r\n}","D:\\research-management-system\\client\\src\\redux\\actions\\department_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\campus_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\proposal_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\auth_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\completed_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\innovation_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\publication_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\utilization_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\presentation_action.js",[],"D:\\research-management-system\\client\\src\\redux\\actions\\seminar_action.js",[],"D:\\research-management-system\\client\\src\\api\\index.js",[],{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","severity":1,"message":"339","line":8,"column":8,"nodeType":"340","messageId":"341","endLine":8,"endColumn":23},{"ruleId":"338","severity":1,"message":"342","line":13,"column":12,"nodeType":"340","messageId":"341","endLine":13,"endColumn":20},{"ruleId":"338","severity":1,"message":"343","line":15,"column":23,"nodeType":"340","messageId":"341","endLine":15,"endColumn":34},{"ruleId":"338","severity":1,"message":"344","line":16,"column":11,"nodeType":"340","messageId":"341","endLine":16,"endColumn":18},{"ruleId":"338","severity":1,"message":"345","line":18,"column":12,"nodeType":"340","messageId":"341","endLine":18,"endColumn":20},{"ruleId":"338","severity":1,"message":"346","line":21,"column":12,"nodeType":"340","messageId":"341","endLine":21,"endColumn":19},{"ruleId":"338","severity":1,"message":"342","line":24,"column":12,"nodeType":"340","messageId":"341","endLine":24,"endColumn":20},{"ruleId":"338","severity":1,"message":"347","line":1,"column":29,"nodeType":"340","messageId":"341","endLine":1,"endColumn":38},{"ruleId":"338","severity":1,"message":"348","line":2,"column":10,"nodeType":"340","messageId":"341","endLine":2,"endColumn":14},{"ruleId":"338","severity":1,"message":"349","line":6,"column":13,"nodeType":"340","messageId":"341","endLine":6,"endColumn":21},{"ruleId":"338","severity":1,"message":"350","line":16,"column":5,"nodeType":"340","messageId":"341","endLine":16,"endColumn":10},{"ruleId":"338","severity":1,"message":"351","line":37,"column":20,"nodeType":"340","messageId":"341","endLine":37,"endColumn":29},{"ruleId":"338","severity":1,"message":"352","line":38,"column":23,"nodeType":"340","messageId":"341","endLine":38,"endColumn":35},{"ruleId":"338","severity":1,"message":"353","line":39,"column":27,"nodeType":"340","messageId":"341","endLine":39,"endColumn":43},{"ruleId":"338","severity":1,"message":"354","line":42,"column":22,"nodeType":"340","messageId":"341","endLine":42,"endColumn":33},{"ruleId":"338","severity":1,"message":"355","line":43,"column":12,"nodeType":"340","messageId":"341","endLine":43,"endColumn":20},{"ruleId":"338","severity":1,"message":"356","line":43,"column":22,"nodeType":"340","messageId":"341","endLine":43,"endColumn":33},{"ruleId":"338","severity":1,"message":"357","line":44,"column":22,"nodeType":"340","messageId":"341","endLine":44,"endColumn":33},{"ruleId":"338","severity":1,"message":"358","line":45,"column":21,"nodeType":"340","messageId":"341","endLine":45,"endColumn":31},{"ruleId":"338","severity":1,"message":"359","line":46,"column":12,"nodeType":"340","messageId":"341","endLine":46,"endColumn":18},{"ruleId":"338","severity":1,"message":"360","line":46,"column":20,"nodeType":"340","messageId":"341","endLine":46,"endColumn":29},{"ruleId":"338","severity":1,"message":"361","line":47,"column":35,"nodeType":"340","messageId":"341","endLine":47,"endColumn":59},{"ruleId":"338","severity":1,"message":"362","line":50,"column":35,"nodeType":"340","messageId":"341","endLine":50,"endColumn":59},{"ruleId":"363","severity":1,"message":"364","line":86,"column":9,"nodeType":"365","messageId":"366","endLine":86,"endColumn":46},{"ruleId":"338","severity":1,"message":"367","line":89,"column":11,"nodeType":"340","messageId":"341","endLine":89,"endColumn":22},{"ruleId":"338","severity":1,"message":"350","line":18,"column":5,"nodeType":"340","messageId":"341","endLine":18,"endColumn":10},{"ruleId":"338","severity":1,"message":"344","line":37,"column":11,"nodeType":"340","messageId":"341","endLine":37,"endColumn":18},{"ruleId":"338","severity":1,"message":"368","line":1,"column":48,"nodeType":"340","messageId":"341","endLine":1,"endColumn":54},{"ruleId":"338","severity":1,"message":"369","line":21,"column":5,"nodeType":"340","messageId":"341","endLine":21,"endColumn":15},{"ruleId":"338","severity":1,"message":"370","line":23,"column":5,"nodeType":"340","messageId":"341","endLine":23,"endColumn":15},{"ruleId":"338","severity":1,"message":"371","line":15,"column":7,"nodeType":"340","messageId":"341","endLine":15,"endColumn":20},{"ruleId":"338","severity":1,"message":"372","line":53,"column":12,"nodeType":"340","messageId":"341","endLine":53,"endColumn":21},{"ruleId":"338","severity":1,"message":"373","line":54,"column":12,"nodeType":"340","messageId":"341","endLine":54,"endColumn":21},{"ruleId":"338","severity":1,"message":"374","line":55,"column":12,"nodeType":"340","messageId":"341","endLine":55,"endColumn":20},{"ruleId":"338","severity":1,"message":"375","line":56,"column":12,"nodeType":"340","messageId":"341","endLine":56,"endColumn":25},{"ruleId":"338","severity":1,"message":"359","line":60,"column":12,"nodeType":"340","messageId":"341","endLine":60,"endColumn":18},{"ruleId":"338","severity":1,"message":"360","line":60,"column":20,"nodeType":"340","messageId":"341","endLine":60,"endColumn":29},{"ruleId":"338","severity":1,"message":"350","line":28,"column":5,"nodeType":"340","messageId":"341","endLine":28,"endColumn":10},{"ruleId":"338","severity":1,"message":"348","line":38,"column":10,"nodeType":"340","messageId":"341","endLine":38,"endColumn":14},{"ruleId":"338","severity":1,"message":"376","line":46,"column":7,"nodeType":"340","messageId":"341","endLine":46,"endColumn":17},{"ruleId":"338","severity":1,"message":"377","line":91,"column":9,"nodeType":"340","messageId":"341","endLine":91,"endColumn":14},{"ruleId":"338","severity":1,"message":"378","line":92,"column":9,"nodeType":"340","messageId":"341","endLine":92,"endColumn":14},{"ruleId":"338","severity":1,"message":"379","line":102,"column":12,"nodeType":"340","messageId":"341","endLine":102,"endColumn":27},{"ruleId":"338","severity":1,"message":"380","line":103,"column":12,"nodeType":"340","messageId":"341","endLine":103,"endColumn":30},{"ruleId":"338","severity":1,"message":"381","line":110,"column":23,"nodeType":"340","messageId":"341","endLine":110,"endColumn":35},{"ruleId":"338","severity":1,"message":"382","line":39,"column":5,"nodeType":"340","messageId":"341","endLine":39,"endColumn":13},{"ruleId":"338","severity":1,"message":"383","line":40,"column":5,"nodeType":"340","messageId":"341","endLine":40,"endColumn":12},{"ruleId":"338","severity":1,"message":"384","line":131,"column":12,"nodeType":"340","messageId":"341","endLine":131,"endColumn":18},{"ruleId":"338","severity":1,"message":"385","line":131,"column":20,"nodeType":"340","messageId":"341","endLine":131,"endColumn":29},{"ruleId":"338","severity":1,"message":"381","line":134,"column":23,"nodeType":"340","messageId":"341","endLine":134,"endColumn":35},{"ruleId":"338","severity":1,"message":"386","line":409,"column":15,"nodeType":"340","messageId":"341","endLine":409,"endColumn":25},{"ruleId":"338","severity":1,"message":"368","line":1,"column":38,"nodeType":"340","messageId":"341","endLine":1,"endColumn":44},{"ruleId":"338","severity":1,"message":"350","line":28,"column":5,"nodeType":"340","messageId":"341","endLine":28,"endColumn":10},{"ruleId":"338","severity":1,"message":"348","line":38,"column":10,"nodeType":"340","messageId":"341","endLine":38,"endColumn":14},{"ruleId":"338","severity":1,"message":"387","line":39,"column":10,"nodeType":"340","messageId":"341","endLine":39,"endColumn":17},{"ruleId":"338","severity":1,"message":"388","line":39,"column":19,"nodeType":"340","messageId":"341","endLine":39,"endColumn":34},{"ruleId":"338","severity":1,"message":"376","line":47,"column":7,"nodeType":"340","messageId":"341","endLine":47,"endColumn":17},{"ruleId":"338","severity":1,"message":"389","line":81,"column":12,"nodeType":"340","messageId":"341","endLine":81,"endColumn":23},{"ruleId":"338","severity":1,"message":"390","line":81,"column":25,"nodeType":"340","messageId":"341","endLine":81,"endColumn":39},{"ruleId":"338","severity":1,"message":"391","line":82,"column":12,"nodeType":"340","messageId":"341","endLine":82,"endColumn":21},{"ruleId":"338","severity":1,"message":"392","line":82,"column":23,"nodeType":"340","messageId":"341","endLine":82,"endColumn":34},{"ruleId":"338","severity":1,"message":"393","line":93,"column":12,"nodeType":"340","messageId":"341","endLine":93,"endColumn":21},{"ruleId":"338","severity":1,"message":"394","line":93,"column":23,"nodeType":"340","messageId":"341","endLine":93,"endColumn":35},{"ruleId":"338","severity":1,"message":"381","line":94,"column":23,"nodeType":"340","messageId":"341","endLine":94,"endColumn":35},{"ruleId":"338","severity":1,"message":"395","line":326,"column":11,"nodeType":"340","messageId":"341","endLine":326,"endColumn":23},{"ruleId":"338","severity":1,"message":"396","line":14,"column":10,"nodeType":"340","messageId":"341","endLine":14,"endColumn":30},{"ruleId":"338","severity":1,"message":"376","line":39,"column":7,"nodeType":"340","messageId":"341","endLine":39,"endColumn":17},{"ruleId":"338","severity":1,"message":"378","line":69,"column":67,"nodeType":"340","messageId":"341","endLine":69,"endColumn":72},{"ruleId":"338","severity":1,"message":"397","line":74,"column":12,"nodeType":"340","messageId":"341","endLine":74,"endColumn":21},{"ruleId":"338","severity":1,"message":"398","line":74,"column":23,"nodeType":"340","messageId":"341","endLine":74,"endColumn":35},{"ruleId":"338","severity":1,"message":"381","line":82,"column":23,"nodeType":"340","messageId":"341","endLine":82,"endColumn":35},{"ruleId":"338","severity":1,"message":"399","line":221,"column":11,"nodeType":"340","messageId":"341","endLine":221,"endColumn":20},{"ruleId":"338","severity":1,"message":"350","line":28,"column":5,"nodeType":"340","messageId":"341","endLine":28,"endColumn":10},{"ruleId":"338","severity":1,"message":"376","line":45,"column":7,"nodeType":"340","messageId":"341","endLine":45,"endColumn":17},{"ruleId":"338","severity":1,"message":"377","line":74,"column":60,"nodeType":"340","messageId":"341","endLine":74,"endColumn":65},{"ruleId":"338","severity":1,"message":"378","line":74,"column":67,"nodeType":"340","messageId":"341","endLine":74,"endColumn":72},{"ruleId":"338","severity":1,"message":"381","line":87,"column":23,"nodeType":"340","messageId":"341","endLine":87,"endColumn":35},{"ruleId":"338","severity":1,"message":"395","line":303,"column":11,"nodeType":"340","messageId":"341","endLine":303,"endColumn":23},{"ruleId":"338","severity":1,"message":"400","line":19,"column":7,"nodeType":"340","messageId":"341","endLine":19,"endColumn":16},{"ruleId":"338","severity":1,"message":"401","line":45,"column":12,"nodeType":"340","messageId":"341","endLine":45,"endColumn":25},{"ruleId":"338","severity":1,"message":"402","line":45,"column":27,"nodeType":"340","messageId":"341","endLine":45,"endColumn":43},{"ruleId":"338","severity":1,"message":"403","line":46,"column":12,"nodeType":"340","messageId":"341","endLine":46,"endColumn":26},{"ruleId":"338","severity":1,"message":"404","line":46,"column":28,"nodeType":"340","messageId":"341","endLine":46,"endColumn":45},{"ruleId":"338","severity":1,"message":"405","line":47,"column":12,"nodeType":"340","messageId":"341","endLine":47,"endColumn":29},{"ruleId":"338","severity":1,"message":"406","line":47,"column":31,"nodeType":"340","messageId":"341","endLine":47,"endColumn":51},{"ruleId":"338","severity":1,"message":"407","line":48,"column":12,"nodeType":"340","messageId":"341","endLine":48,"endColumn":28},{"ruleId":"338","severity":1,"message":"408","line":48,"column":30,"nodeType":"340","messageId":"341","endLine":48,"endColumn":49},{"ruleId":"338","severity":1,"message":"409","line":49,"column":12,"nodeType":"340","messageId":"341","endLine":49,"endColumn":28},{"ruleId":"338","severity":1,"message":"410","line":49,"column":30,"nodeType":"340","messageId":"341","endLine":49,"endColumn":49},{"ruleId":"338","severity":1,"message":"411","line":50,"column":12,"nodeType":"340","messageId":"341","endLine":50,"endColumn":27},{"ruleId":"338","severity":1,"message":"412","line":50,"column":29,"nodeType":"340","messageId":"341","endLine":50,"endColumn":47},{"ruleId":"338","severity":1,"message":"376","line":55,"column":7,"nodeType":"340","messageId":"341","endLine":55,"endColumn":17},{"ruleId":"338","severity":1,"message":"377","line":92,"column":60,"nodeType":"340","messageId":"341","endLine":92,"endColumn":65},{"ruleId":"338","severity":1,"message":"394","line":107,"column":23,"nodeType":"340","messageId":"341","endLine":107,"endColumn":35},{"ruleId":"338","severity":1,"message":"381","line":108,"column":23,"nodeType":"340","messageId":"341","endLine":108,"endColumn":35},{"ruleId":"338","severity":1,"message":"395","line":406,"column":11,"nodeType":"340","messageId":"341","endLine":406,"endColumn":23},{"ruleId":"338","severity":1,"message":"413","line":1,"column":38,"nodeType":"340","messageId":"341","endLine":1,"endColumn":48},{"ruleId":"338","severity":1,"message":"350","line":29,"column":5,"nodeType":"340","messageId":"341","endLine":29,"endColumn":10},{"ruleId":"338","severity":1,"message":"414","line":40,"column":5,"nodeType":"340","messageId":"341","endLine":40,"endColumn":13},{"ruleId":"338","severity":1,"message":"415","line":41,"column":5,"nodeType":"340","messageId":"341","endLine":41,"endColumn":18},{"ruleId":"338","severity":1,"message":"416","line":48,"column":10,"nodeType":"340","messageId":"341","endLine":48,"endColumn":33},{"ruleId":"338","severity":1,"message":"417","line":57,"column":10,"nodeType":"340","messageId":"341","endLine":57,"endColumn":15},{"ruleId":"338","severity":1,"message":"385","line":123,"column":20,"nodeType":"340","messageId":"341","endLine":123,"endColumn":29},{"ruleId":"338","severity":1,"message":"418","line":124,"column":23,"nodeType":"340","messageId":"341","endLine":124,"endColumn":35},{"ruleId":"338","severity":1,"message":"386","line":482,"column":15,"nodeType":"340","messageId":"341","endLine":482,"endColumn":25},{"ruleId":"338","severity":1,"message":"347","line":1,"column":27,"nodeType":"340","messageId":"341","endLine":1,"endColumn":36},{"ruleId":"338","severity":1,"message":"419","line":2,"column":10,"nodeType":"340","messageId":"341","endLine":2,"endColumn":21},{"ruleId":"338","severity":1,"message":"420","line":2,"column":23,"nodeType":"340","messageId":"341","endLine":2,"endColumn":34},{"ruleId":"338","severity":1,"message":"348","line":9,"column":10,"nodeType":"340","messageId":"341","endLine":9,"endColumn":14},{"ruleId":"338","severity":1,"message":"421","line":10,"column":10,"nodeType":"340","messageId":"341","endLine":10,"endColumn":16},{"ruleId":"338","severity":1,"message":"422","line":10,"column":18,"nodeType":"340","messageId":"341","endLine":10,"endColumn":24},{"ruleId":"338","severity":1,"message":"423","line":21,"column":5,"nodeType":"340","messageId":"341","endLine":21,"endColumn":11},{"ruleId":"338","severity":1,"message":"424","line":3,"column":10,"nodeType":"340","messageId":"341","endLine":3,"endColumn":20},"no-native-reassign",["425"],"no-negated-in-lhs",["426"],"no-unused-vars","'SideMenuBarUser' is defined but never used.","Identifier","unusedVar","'userType' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'history' is assigned a value but never used.","'position' is assigned a value but never used.","'college' is assigned a value but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'userData' is assigned a value but never used.","'Input' is defined but never used.","'setUserId' is assigned a value but never used.","'setFirstName' is assigned a value but never used.","'setmiddleInitial' is assigned a value but never used.","'setLastName' is assigned a value but never used.","'fullName' is assigned a value but never used.","'setFullName' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'setCollege' is assigned a value but never used.","'campus' is assigned a value but never used.","'setCampus' is assigned a value but never used.","'setFieldOfSpecialization' is assigned a value but never used.","'setEducationalAttainment' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'getColleges' is assigned a value but never used.","'useRef' is defined but never used.","'CardHeader' is defined but never used.","'CardFooter' is defined but never used.","'createAccount' is defined but never used.","'accountId' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'middleInitial' is assigned a value but never used.","'MODAL_TYPE' is assigned a value but never used.","'reset' is assigned a value but never used.","'watch' is assigned a value but never used.","'titleOfResearch' is assigned a value but never used.","'titleOfPublication' is assigned a value but never used.","'setUpdatedBy' is assigned a value but never used.","'Progress' is defined but never used.","'Spinner' is defined but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'dateFormat' is assigned a value but never used.","'FaCheck' is defined but never used.","'FaLessThanEqual' is defined but never used.","'modalPrompt' is assigned a value but never used.","'setModalPrompt' is assigned a value but never used.","'modalType' is assigned a value but never used.","'setModaType' is assigned a value but never used.","'updatedAt' is assigned a value but never used.","'setUpdatedAt' is assigned a value but never used.","'onSubmitForm' is assigned a value but never used.","'getProposalCompleted' is defined but never used.","'activeTab' is assigned a value but never used.","'setActiveTab' is assigned a value but never used.","'clearForm' is assigned a value but never used.","'USER_TYPE' is assigned a value but never used.","'totalProposal' is assigned a value but never used.","'setTotalProposal' is assigned a value but never used.","'totalCompleted' is assigned a value but never used.","'setTotalCompleted' is assigned a value but never used.","'totalPresentation' is assigned a value but never used.","'setTotalPresentation' is assigned a value but never used.","'totalPublication' is assigned a value but never used.","'setTotalPublication' is assigned a value but never used.","'totalUtilization' is assigned a value but never used.","'setTotalUtilization' is assigned a value but never used.","'totalInnovation' is assigned a value but never used.","'setTotalInnovation' is assigned a value but never used.","'useContext' is defined but never used.","'MdDelete' is defined but never used.","'MdKeyboardTab' is defined but never used.","'DateTimePickerComponent' is defined but never used.","'jsPDF' is defined but never used.","'setCreatedBy' is assigned a value but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'FaUser' is defined but never used.","'FaLock' is defined but never used.","'Button' is defined but never used.","'useHistory' is defined but never used.","no-global-assign","no-unsafe-negation"]